
BatteryMonitor_F303_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000901c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a0  080091b0  080091b0  000191b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009650  08009650  000201fc  2**0
                  CONTENTS
  4 .ARM          00000000  08009650  08009650  000201fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009650  08009650  000201fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009650  08009650  00019650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009654  08009654  00019654  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  08009658  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201fc  2**0
                  CONTENTS
 10 .bss          0000062c  20000200  20000200  00020200  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000082c  2000082c  00020200  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011af2  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002408  00000000  00000000  00031d1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f08  00000000  00000000  00034128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e00  00000000  00000000  00035030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001dbb6  00000000  00000000  00035e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013147  00000000  00000000  000539e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000aed1b  00000000  00000000  00066b2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00115848  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000053c4  00000000  00000000  00115898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000200 	.word	0x20000200
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009194 	.word	0x08009194

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000204 	.word	0x20000204
 80001cc:	08009194 	.word	0x08009194

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08a      	sub	sp, #40	; 0x28
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000bae:	f107 031c 	add.w	r3, r7, #28
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
 8000bc8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bca:	4b2e      	ldr	r3, [pc, #184]	; (8000c84 <MX_ADC1_Init+0xdc>)
 8000bcc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000bd0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000bd2:	4b2c      	ldr	r3, [pc, #176]	; (8000c84 <MX_ADC1_Init+0xdc>)
 8000bd4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000bd8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bda:	4b2a      	ldr	r3, [pc, #168]	; (8000c84 <MX_ADC1_Init+0xdc>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000be0:	4b28      	ldr	r3, [pc, #160]	; (8000c84 <MX_ADC1_Init+0xdc>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000be6:	4b27      	ldr	r3, [pc, #156]	; (8000c84 <MX_ADC1_Init+0xdc>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bec:	4b25      	ldr	r3, [pc, #148]	; (8000c84 <MX_ADC1_Init+0xdc>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bf4:	4b23      	ldr	r3, [pc, #140]	; (8000c84 <MX_ADC1_Init+0xdc>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bfa:	4b22      	ldr	r3, [pc, #136]	; (8000c84 <MX_ADC1_Init+0xdc>)
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c00:	4b20      	ldr	r3, [pc, #128]	; (8000c84 <MX_ADC1_Init+0xdc>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c06:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <MX_ADC1_Init+0xdc>)
 8000c08:	2201      	movs	r2, #1
 8000c0a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c0c:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <MX_ADC1_Init+0xdc>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c14:	4b1b      	ldr	r3, [pc, #108]	; (8000c84 <MX_ADC1_Init+0xdc>)
 8000c16:	2204      	movs	r2, #4
 8000c18:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c1a:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <MX_ADC1_Init+0xdc>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000c20:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <MX_ADC1_Init+0xdc>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c26:	4817      	ldr	r0, [pc, #92]	; (8000c84 <MX_ADC1_Init+0xdc>)
 8000c28:	f000 fe38 	bl	800189c <HAL_ADC_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000c32:	f000 fb6b 	bl	800130c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000c3a:	f107 031c 	add.w	r3, r7, #28
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4810      	ldr	r0, [pc, #64]	; (8000c84 <MX_ADC1_Init+0xdc>)
 8000c42:	f001 fe31 	bl	80028a8 <HAL_ADCEx_MultiModeConfigChannel>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000c4c:	f000 fb5e 	bl	800130c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000c50:	2302      	movs	r3, #2
 8000c52:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c54:	2301      	movs	r3, #1
 8000c56:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000c5c:	2306      	movs	r3, #6
 8000c5e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c68:	1d3b      	adds	r3, r7, #4
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4805      	ldr	r0, [pc, #20]	; (8000c84 <MX_ADC1_Init+0xdc>)
 8000c6e:	f001 fb5b 	bl	8002328 <HAL_ADC_ConfigChannel>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000c78:	f000 fb48 	bl	800130c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c7c:	bf00      	nop
 8000c7e:	3728      	adds	r7, #40	; 0x28
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	2000021c 	.word	0x2000021c

08000c88 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c8e:	463b      	mov	r3, r7
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
 8000c9c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000c9e:	4b27      	ldr	r3, [pc, #156]	; (8000d3c <MX_ADC2_Init+0xb4>)
 8000ca0:	4a27      	ldr	r2, [pc, #156]	; (8000d40 <MX_ADC2_Init+0xb8>)
 8000ca2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ca4:	4b25      	ldr	r3, [pc, #148]	; (8000d3c <MX_ADC2_Init+0xb4>)
 8000ca6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000caa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000cac:	4b23      	ldr	r3, [pc, #140]	; (8000d3c <MX_ADC2_Init+0xb4>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cb2:	4b22      	ldr	r3, [pc, #136]	; (8000d3c <MX_ADC2_Init+0xb4>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000cb8:	4b20      	ldr	r3, [pc, #128]	; (8000d3c <MX_ADC2_Init+0xb4>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000cbe:	4b1f      	ldr	r3, [pc, #124]	; (8000d3c <MX_ADC2_Init+0xb4>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cc6:	4b1d      	ldr	r3, [pc, #116]	; (8000d3c <MX_ADC2_Init+0xb4>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ccc:	4b1b      	ldr	r3, [pc, #108]	; (8000d3c <MX_ADC2_Init+0xb4>)
 8000cce:	2201      	movs	r2, #1
 8000cd0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cd2:	4b1a      	ldr	r3, [pc, #104]	; (8000d3c <MX_ADC2_Init+0xb4>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000cd8:	4b18      	ldr	r3, [pc, #96]	; (8000d3c <MX_ADC2_Init+0xb4>)
 8000cda:	2201      	movs	r2, #1
 8000cdc:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000cde:	4b17      	ldr	r3, [pc, #92]	; (8000d3c <MX_ADC2_Init+0xb4>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ce6:	4b15      	ldr	r3, [pc, #84]	; (8000d3c <MX_ADC2_Init+0xb4>)
 8000ce8:	2204      	movs	r2, #4
 8000cea:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000cec:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <MX_ADC2_Init+0xb4>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000cf2:	4b12      	ldr	r3, [pc, #72]	; (8000d3c <MX_ADC2_Init+0xb4>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000cf8:	4810      	ldr	r0, [pc, #64]	; (8000d3c <MX_ADC2_Init+0xb4>)
 8000cfa:	f000 fdcf 	bl	800189c <HAL_ADC_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 8000d04:	f000 fb02 	bl	800130c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d10:	2300      	movs	r3, #0
 8000d12:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 8000d14:	2306      	movs	r3, #6
 8000d16:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d20:	463b      	mov	r3, r7
 8000d22:	4619      	mov	r1, r3
 8000d24:	4805      	ldr	r0, [pc, #20]	; (8000d3c <MX_ADC2_Init+0xb4>)
 8000d26:	f001 faff 	bl	8002328 <HAL_ADC_ConfigChannel>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8000d30:	f000 faec 	bl	800130c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000d34:	bf00      	nop
 8000d36:	3718      	adds	r7, #24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	2000026c 	.word	0x2000026c
 8000d40:	50000100 	.word	0x50000100

08000d44 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08c      	sub	sp, #48	; 0x30
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 031c 	add.w	r3, r7, #28
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d64:	d136      	bne.n	8000dd4 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000d66:	4b3b      	ldr	r3, [pc, #236]	; (8000e54 <HAL_ADC_MspInit+0x110>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	4a39      	ldr	r2, [pc, #228]	; (8000e54 <HAL_ADC_MspInit+0x110>)
 8000d6e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000d70:	4b38      	ldr	r3, [pc, #224]	; (8000e54 <HAL_ADC_MspInit+0x110>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d10b      	bne.n	8000d90 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000d78:	4b37      	ldr	r3, [pc, #220]	; (8000e58 <HAL_ADC_MspInit+0x114>)
 8000d7a:	695b      	ldr	r3, [r3, #20]
 8000d7c:	4a36      	ldr	r2, [pc, #216]	; (8000e58 <HAL_ADC_MspInit+0x114>)
 8000d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d82:	6153      	str	r3, [r2, #20]
 8000d84:	4b34      	ldr	r3, [pc, #208]	; (8000e58 <HAL_ADC_MspInit+0x114>)
 8000d86:	695b      	ldr	r3, [r3, #20]
 8000d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8c:	61bb      	str	r3, [r7, #24]
 8000d8e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d90:	4b31      	ldr	r3, [pc, #196]	; (8000e58 <HAL_ADC_MspInit+0x114>)
 8000d92:	695b      	ldr	r3, [r3, #20]
 8000d94:	4a30      	ldr	r2, [pc, #192]	; (8000e58 <HAL_ADC_MspInit+0x114>)
 8000d96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d9a:	6153      	str	r3, [r2, #20]
 8000d9c:	4b2e      	ldr	r3, [pc, #184]	; (8000e58 <HAL_ADC_MspInit+0x114>)
 8000d9e:	695b      	ldr	r3, [r3, #20]
 8000da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 8000da8:	230b      	movs	r3, #11
 8000daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dac:	2303      	movs	r3, #3
 8000dae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db4:	f107 031c 	add.w	r3, r7, #28
 8000db8:	4619      	mov	r1, r3
 8000dba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dbe:	f002 f815 	bl	8002dec <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	2012      	movs	r0, #18
 8000dc8:	f001 ffd9 	bl	8002d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000dcc:	2012      	movs	r0, #18
 8000dce:	f001 fff2 	bl	8002db6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000dd2:	e03a      	b.n	8000e4a <HAL_ADC_MspInit+0x106>
  else if(adcHandle->Instance==ADC2)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a20      	ldr	r2, [pc, #128]	; (8000e5c <HAL_ADC_MspInit+0x118>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d135      	bne.n	8000e4a <HAL_ADC_MspInit+0x106>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000dde:	4b1d      	ldr	r3, [pc, #116]	; (8000e54 <HAL_ADC_MspInit+0x110>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	3301      	adds	r3, #1
 8000de4:	4a1b      	ldr	r2, [pc, #108]	; (8000e54 <HAL_ADC_MspInit+0x110>)
 8000de6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000de8:	4b1a      	ldr	r3, [pc, #104]	; (8000e54 <HAL_ADC_MspInit+0x110>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d10b      	bne.n	8000e08 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000df0:	4b19      	ldr	r3, [pc, #100]	; (8000e58 <HAL_ADC_MspInit+0x114>)
 8000df2:	695b      	ldr	r3, [r3, #20]
 8000df4:	4a18      	ldr	r2, [pc, #96]	; (8000e58 <HAL_ADC_MspInit+0x114>)
 8000df6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dfa:	6153      	str	r3, [r2, #20]
 8000dfc:	4b16      	ldr	r3, [pc, #88]	; (8000e58 <HAL_ADC_MspInit+0x114>)
 8000dfe:	695b      	ldr	r3, [r3, #20]
 8000e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e04:	613b      	str	r3, [r7, #16]
 8000e06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e08:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <HAL_ADC_MspInit+0x114>)
 8000e0a:	695b      	ldr	r3, [r3, #20]
 8000e0c:	4a12      	ldr	r2, [pc, #72]	; (8000e58 <HAL_ADC_MspInit+0x114>)
 8000e0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e12:	6153      	str	r3, [r2, #20]
 8000e14:	4b10      	ldr	r3, [pc, #64]	; (8000e58 <HAL_ADC_MspInit+0x114>)
 8000e16:	695b      	ldr	r3, [r3, #20]
 8000e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000e20:	23f0      	movs	r3, #240	; 0xf0
 8000e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e24:	2303      	movs	r3, #3
 8000e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2c:	f107 031c 	add.w	r3, r7, #28
 8000e30:	4619      	mov	r1, r3
 8000e32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e36:	f001 ffd9 	bl	8002dec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	2012      	movs	r0, #18
 8000e40:	f001 ff9d 	bl	8002d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000e44:	2012      	movs	r0, #18
 8000e46:	f001 ffb6 	bl	8002db6 <HAL_NVIC_EnableIRQ>
}
 8000e4a:	bf00      	nop
 8000e4c:	3730      	adds	r7, #48	; 0x30
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	200002bc 	.word	0x200002bc
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	50000100 	.word	0x50000100

08000e60 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e66:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <MX_GPIO_Init+0x44>)
 8000e68:	695b      	ldr	r3, [r3, #20]
 8000e6a:	4a0e      	ldr	r2, [pc, #56]	; (8000ea4 <MX_GPIO_Init+0x44>)
 8000e6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e70:	6153      	str	r3, [r2, #20]
 8000e72:	4b0c      	ldr	r3, [pc, #48]	; (8000ea4 <MX_GPIO_Init+0x44>)
 8000e74:	695b      	ldr	r3, [r3, #20]
 8000e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e7e:	4b09      	ldr	r3, [pc, #36]	; (8000ea4 <MX_GPIO_Init+0x44>)
 8000e80:	695b      	ldr	r3, [r3, #20]
 8000e82:	4a08      	ldr	r2, [pc, #32]	; (8000ea4 <MX_GPIO_Init+0x44>)
 8000e84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e88:	6153      	str	r3, [r2, #20]
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <MX_GPIO_Init+0x44>)
 8000e8c:	695b      	ldr	r3, [r3, #20]
 8000e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e92:	603b      	str	r3, [r7, #0]
 8000e94:	683b      	ldr	r3, [r7, #0]

}
 8000e96:	bf00      	nop
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	40021000 	.word	0x40021000

08000ea8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000eac:	b093      	sub	sp, #76	; 0x4c
 8000eae:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb0:	f000 fc70 	bl	8001794 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eb4:	f000 f906 	bl	80010c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb8:	f7ff ffd2 	bl	8000e60 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ebc:	f000 fbcc 	bl	8001658 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000ec0:	f7ff fe72 	bl	8000ba8 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000ec4:	f7ff fee0 	bl	8000c88 <MX_ADC2_Init>
  MX_TIM2_Init();
 8000ec8:	f000 fb5a 	bl	8001580 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000ecc:	486c      	ldr	r0, [pc, #432]	; (8001080 <main+0x1d8>)
 8000ece:	f003 fbcd 	bl	800466c <HAL_TIM_Base_Start>
  __HAL_TIM_SetCounter(&htim2, 0);
 8000ed2:	4b6b      	ldr	r3, [pc, #428]	; (8001080 <main+0x1d8>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("nel while\r\n");
 8000eda:	486a      	ldr	r0, [pc, #424]	; (8001084 <main+0x1dc>)
 8000edc:	f004 ffaa 	bl	8005e34 <puts>

	  for (int k = 0; k < 7; k++)
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	e054      	b.n	8000f90 <main+0xe8>
	  {
		  for (int i = 0; i<100; i++)			// 100 conversioni per canale
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60bb      	str	r3, [r7, #8]
 8000eea:	e023      	b.n	8000f34 <main+0x8c>
		  {
			  HAL_ADC_Start(hADC[k]);
 8000eec:	4a66      	ldr	r2, [pc, #408]	; (8001088 <main+0x1e0>)
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f000 fe63 	bl	8001bc0 <HAL_ADC_Start>
			  HAL_ADC_PollForConversion(hADC[k], HAL_MAX_DELAY);
 8000efa:	4a63      	ldr	r2, [pc, #396]	; (8001088 <main+0x1e0>)
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f02:	f04f 31ff 	mov.w	r1, #4294967295
 8000f06:	4618      	mov	r0, r3
 8000f08:	f000 ff10 	bl	8001d2c <HAL_ADC_PollForConversion>
			  conversione = HAL_ADC_GetValue(hADC[k]);
 8000f0c:	4a5e      	ldr	r2, [pc, #376]	; (8001088 <main+0x1e0>)
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f000 ffd7 	bl	8001ec8 <HAL_ADC_GetValue>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	4a5b      	ldr	r2, [pc, #364]	; (800108c <main+0x1e4>)
 8000f1e:	6013      	str	r3, [r2, #0]
			  sommaConversioni += conversione;
 8000f20:	4b5b      	ldr	r3, [pc, #364]	; (8001090 <main+0x1e8>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	4b59      	ldr	r3, [pc, #356]	; (800108c <main+0x1e4>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4413      	add	r3, r2
 8000f2a:	4a59      	ldr	r2, [pc, #356]	; (8001090 <main+0x1e8>)
 8000f2c:	6013      	str	r3, [r2, #0]
		  for (int i = 0; i<100; i++)			// 100 conversioni per canale
 8000f2e:	68bb      	ldr	r3, [r7, #8]
 8000f30:	3301      	adds	r3, #1
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	2b63      	cmp	r3, #99	; 0x63
 8000f38:	ddd8      	ble.n	8000eec <main+0x44>
		  }

		  mediaConversioni = (double)sommaConversioni / (double)1000;
 8000f3a:	4b55      	ldr	r3, [pc, #340]	; (8001090 <main+0x1e8>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fae0 	bl	8000504 <__aeabi_ui2d>
 8000f44:	f04f 0200 	mov.w	r2, #0
 8000f48:	4b52      	ldr	r3, [pc, #328]	; (8001094 <main+0x1ec>)
 8000f4a:	f7ff fc7f 	bl	800084c <__aeabi_ddiv>
 8000f4e:	4602      	mov	r2, r0
 8000f50:	460b      	mov	r3, r1
 8000f52:	4951      	ldr	r1, [pc, #324]	; (8001098 <main+0x1f0>)
 8000f54:	e9c1 2300 	strd	r2, r3, [r1]
		  tensioni[k] = (mediaConversioni * 3.3) / 4095;
 8000f58:	4b4f      	ldr	r3, [pc, #316]	; (8001098 <main+0x1f0>)
 8000f5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f5e:	a344      	add	r3, pc, #272	; (adr r3, 8001070 <main+0x1c8>)
 8000f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f64:	f7ff fb48 	bl	80005f8 <__aeabi_dmul>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	460b      	mov	r3, r1
 8000f6c:	4610      	mov	r0, r2
 8000f6e:	4619      	mov	r1, r3
 8000f70:	a341      	add	r3, pc, #260	; (adr r3, 8001078 <main+0x1d0>)
 8000f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f76:	f7ff fc69 	bl	800084c <__aeabi_ddiv>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	4847      	ldr	r0, [pc, #284]	; (800109c <main+0x1f4>)
 8000f80:	68f9      	ldr	r1, [r7, #12]
 8000f82:	00c9      	lsls	r1, r1, #3
 8000f84:	4401      	add	r1, r0
 8000f86:	e9c1 2300 	strd	r2, r3, [r1]
	  for (int k = 0; k < 7; k++)
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	2b06      	cmp	r3, #6
 8000f94:	dda7      	ble.n	8000ee6 <main+0x3e>
		  }
		  // Converto i valori del vettore tensioni in valori da inserire nel vettore temperature
		  for (int j = 0; j < 7; j++)
 8000f96:	2300      	movs	r3, #0
 8000f98:	607b      	str	r3, [r7, #4]
 8000f9a:	e013      	b.n	8000fc4 <main+0x11c>
		  {
			  temperature[j] = interpolazione(&tensioni[j]);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	00db      	lsls	r3, r3, #3
 8000fa0:	4a3e      	ldr	r2, [pc, #248]	; (800109c <main+0x1f4>)
 8000fa2:	4413      	add	r3, r2
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f000 f8cb 	bl	8001140 <interpolazione>
 8000faa:	eeb0 7a40 	vmov.f32	s14, s0
 8000fae:	eef0 7a60 	vmov.f32	s15, s1
 8000fb2:	4a3b      	ldr	r2, [pc, #236]	; (80010a0 <main+0x1f8>)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	4413      	add	r3, r2
 8000fba:	ed83 7b00 	vstr	d7, [r3]
		  for (int j = 0; j < 7; j++)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	607b      	str	r3, [r7, #4]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2b06      	cmp	r3, #6
 8000fc8:	dde8      	ble.n	8000f9c <main+0xf4>
		  }


		  // IL TIMER E' ROTTO E NON FUNZIONA
		  // Attendo il trascorrere mezzo secondo (freq. tim1 = 8MHz)
		  printf("pre-timer; timer: [ %"PRIu32" ]\r\n", __HAL_TIM_GetCounter(&htim2));
 8000fca:	4b2d      	ldr	r3, [pc, #180]	; (8001080 <main+0x1d8>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4834      	ldr	r0, [pc, #208]	; (80010a4 <main+0x1fc>)
 8000fd4:	f004 fea8 	bl	8005d28 <iprintf>
		  while (__HAL_TIM_GetCounter(&htim2) < 4000000);
 8000fd8:	bf00      	nop
 8000fda:	4b29      	ldr	r3, [pc, #164]	; (8001080 <main+0x1d8>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe0:	4a31      	ldr	r2, [pc, #196]	; (80010a8 <main+0x200>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d9f9      	bls.n	8000fda <main+0x132>
		  __HAL_TIM_SetCounter(&htim2, 0);
 8000fe6:	4b26      	ldr	r3, [pc, #152]	; (8001080 <main+0x1d8>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2200      	movs	r2, #0
 8000fec:	625a      	str	r2, [r3, #36]	; 0x24
		  printf("post-timer\r\n");
 8000fee:	482f      	ldr	r0, [pc, #188]	; (80010ac <main+0x204>)
 8000ff0:	f004 ff20 	bl	8005e34 <puts>


		  // Stampo l'array
		  snprintf((char*)pOutput, sizeof(output), "%f,%f,%f,%f,%f,%f,%f\r\n",
 8000ff4:	4b2e      	ldr	r3, [pc, #184]	; (80010b0 <main+0x208>)
 8000ff6:	681e      	ldr	r6, [r3, #0]
 8000ff8:	4b29      	ldr	r3, [pc, #164]	; (80010a0 <main+0x1f8>)
 8000ffa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ffe:	4b28      	ldr	r3, [pc, #160]	; (80010a0 <main+0x1f8>)
 8001000:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8001004:	4b26      	ldr	r3, [pc, #152]	; (80010a0 <main+0x1f8>)
 8001006:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 800100a:	4b25      	ldr	r3, [pc, #148]	; (80010a0 <main+0x1f8>)
 800100c:	e9d3 ab06 	ldrd	sl, fp, [r3, #24]
 8001010:	4b23      	ldr	r3, [pc, #140]	; (80010a0 <main+0x1f8>)
 8001012:	ed93 7b08 	vldr	d7, [r3, #32]
 8001016:	4b22      	ldr	r3, [pc, #136]	; (80010a0 <main+0x1f8>)
 8001018:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 800101c:	4b20      	ldr	r3, [pc, #128]	; (80010a0 <main+0x1f8>)
 800101e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8001022:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8001026:	ed8d 6b0a 	vstr	d6, [sp, #40]	; 0x28
 800102a:	ed8d 7b08 	vstr	d7, [sp, #32]
 800102e:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8001032:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8001036:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800103a:	e9cd 0100 	strd	r0, r1, [sp]
 800103e:	4a1d      	ldr	r2, [pc, #116]	; (80010b4 <main+0x20c>)
 8001040:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001044:	4630      	mov	r0, r6
 8001046:	f004 fefd 	bl	8005e44 <sniprintf>
				  temperature[0], temperature[1], temperature[2], temperature[3], temperature[4], temperature[5], temperature[6]);

		//	  snprintf((char*)pOutput, sizeof(output), "%f,%f,%f,%f,%f,%f,%f\r\n",
		//	  			  tensioni[0], tensioni[1], tensioni[2], tensioni[3], tensioni[4], tensioni[5], tensioni[6]);
		  HAL_UART_Transmit(&huart2, pOutput,strlen((char*)output), HAL_MAX_DELAY);
 800104a:	4b19      	ldr	r3, [pc, #100]	; (80010b0 <main+0x208>)
 800104c:	681c      	ldr	r4, [r3, #0]
 800104e:	481a      	ldr	r0, [pc, #104]	; (80010b8 <main+0x210>)
 8001050:	f7ff f8be 	bl	80001d0 <strlen>
 8001054:	4603      	mov	r3, r0
 8001056:	b29a      	uxth	r2, r3
 8001058:	f04f 33ff 	mov.w	r3, #4294967295
 800105c:	4621      	mov	r1, r4
 800105e:	4817      	ldr	r0, [pc, #92]	; (80010bc <main+0x214>)
 8001060:	f003 fdf0 	bl	8004c44 <HAL_UART_Transmit>


		  printf("fine while\r\n\n");
 8001064:	4816      	ldr	r0, [pc, #88]	; (80010c0 <main+0x218>)
 8001066:	f004 fee5 	bl	8005e34 <puts>
	  printf("nel while\r\n");
 800106a:	e736      	b.n	8000eda <main+0x32>
 800106c:	f3af 8000 	nop.w
 8001070:	66666666 	.word	0x66666666
 8001074:	400a6666 	.word	0x400a6666
 8001078:	00000000 	.word	0x00000000
 800107c:	40affe00 	.word	0x40affe00
 8001080:	20000744 	.word	0x20000744
 8001084:	080091b0 	.word	0x080091b0
 8001088:	20000000 	.word	0x20000000
 800108c:	20000330 	.word	0x20000330
 8001090:	20000334 	.word	0x20000334
 8001094:	408f4000 	.word	0x408f4000
 8001098:	20000338 	.word	0x20000338
 800109c:	200002c0 	.word	0x200002c0
 80010a0:	200002f8 	.word	0x200002f8
 80010a4:	080091bc 	.word	0x080091bc
 80010a8:	003d08ff 	.word	0x003d08ff
 80010ac:	080091d8 	.word	0x080091d8
 80010b0:	2000001c 	.word	0x2000001c
 80010b4:	080091e4 	.word	0x080091e4
 80010b8:	20000340 	.word	0x20000340
 80010bc:	20000790 	.word	0x20000790
 80010c0:	080091fc 	.word	0x080091fc

080010c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b090      	sub	sp, #64	; 0x40
 80010c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ca:	f107 0318 	add.w	r3, r7, #24
 80010ce:	2228      	movs	r2, #40	; 0x28
 80010d0:	2100      	movs	r1, #0
 80010d2:	4618      	mov	r0, r3
 80010d4:	f004 f9b6 	bl	8005444 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d8:	1d3b      	adds	r3, r7, #4
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]
 80010e2:	60da      	str	r2, [r3, #12]
 80010e4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010e6:	2302      	movs	r3, #2
 80010e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010ea:	2301      	movs	r3, #1
 80010ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010ee:	2310      	movs	r3, #16
 80010f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010f2:	2300      	movs	r3, #0
 80010f4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f6:	f107 0318 	add.w	r3, r7, #24
 80010fa:	4618      	mov	r0, r3
 80010fc:	f001 ffe8 	bl	80030d0 <HAL_RCC_OscConfig>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001106:	f000 f901 	bl	800130c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800110a:	230f      	movs	r3, #15
 800110c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800110e:	2300      	movs	r3, #0
 8001110:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800111a:	2300      	movs	r3, #0
 800111c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	2100      	movs	r1, #0
 8001122:	4618      	mov	r0, r3
 8001124:	f003 f812 	bl	800414c <HAL_RCC_ClockConfig>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800112e:	f000 f8ed 	bl	800130c <Error_Handler>
  }
}
 8001132:	bf00      	nop
 8001134:	3740      	adds	r7, #64	; 0x40
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	0000      	movs	r0, r0
 800113c:	0000      	movs	r0, r0
	...

08001140 <interpolazione>:

/* USER CODE BEGIN 4 */
double interpolazione (const double *v)
{
 8001140:	b5b0      	push	{r4, r5, r7, lr}
 8001142:	b090      	sub	sp, #64	; 0x40
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
	double p1 = -616.9209;
 8001148:	a35b      	add	r3, pc, #364	; (adr r3, 80012b8 <interpolazione+0x178>)
 800114a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114e:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double p2 = 5.8773e+03;
 8001152:	a35b      	add	r3, pc, #364	; (adr r3, 80012c0 <interpolazione+0x180>)
 8001154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001158:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	double p3 = -2.2351e+04;
 800115c:	a35a      	add	r3, pc, #360	; (adr r3, 80012c8 <interpolazione+0x188>)
 800115e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001162:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double p4 = 4.2418e+04;
 8001166:	a35a      	add	r3, pc, #360	; (adr r3, 80012d0 <interpolazione+0x190>)
 8001168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116c:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double p5 = -4.0250e+04;
 8001170:	a359      	add	r3, pc, #356	; (adr r3, 80012d8 <interpolazione+0x198>)
 8001172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001176:	e9c7 2306 	strd	r2, r3, [r7, #24]
	double p6 = 1.5358e+04;
 800117a:	a359      	add	r3, pc, #356	; (adr r3, 80012e0 <interpolazione+0x1a0>)
 800117c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001180:	e9c7 2304 	strd	r2, r3, [r7, #16]

	double temperatura = p1*pow(*v,5)+ p2*pow(*v,4) + p3*pow(*v,3) + p4*pow(*v,2) + p5*(*v) + p6;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	ed93 7b00 	vldr	d7, [r3]
 800118a:	ed9f 1b43 	vldr	d1, [pc, #268]	; 8001298 <interpolazione+0x158>
 800118e:	eeb0 0a47 	vmov.f32	s0, s14
 8001192:	eef0 0a67 	vmov.f32	s1, s15
 8001196:	f007 f8e3 	bl	8008360 <pow>
 800119a:	ec51 0b10 	vmov	r0, r1, d0
 800119e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80011a2:	f7ff fa29 	bl	80005f8 <__aeabi_dmul>
 80011a6:	4602      	mov	r2, r0
 80011a8:	460b      	mov	r3, r1
 80011aa:	4614      	mov	r4, r2
 80011ac:	461d      	mov	r5, r3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	ed93 7b00 	vldr	d7, [r3]
 80011b4:	ed9f 1b3a 	vldr	d1, [pc, #232]	; 80012a0 <interpolazione+0x160>
 80011b8:	eeb0 0a47 	vmov.f32	s0, s14
 80011bc:	eef0 0a67 	vmov.f32	s1, s15
 80011c0:	f007 f8ce 	bl	8008360 <pow>
 80011c4:	ec51 0b10 	vmov	r0, r1, d0
 80011c8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80011cc:	f7ff fa14 	bl	80005f8 <__aeabi_dmul>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	4620      	mov	r0, r4
 80011d6:	4629      	mov	r1, r5
 80011d8:	f7ff f858 	bl	800028c <__adddf3>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	4614      	mov	r4, r2
 80011e2:	461d      	mov	r5, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	ed93 7b00 	vldr	d7, [r3]
 80011ea:	ed9f 1b2f 	vldr	d1, [pc, #188]	; 80012a8 <interpolazione+0x168>
 80011ee:	eeb0 0a47 	vmov.f32	s0, s14
 80011f2:	eef0 0a67 	vmov.f32	s1, s15
 80011f6:	f007 f8b3 	bl	8008360 <pow>
 80011fa:	ec51 0b10 	vmov	r0, r1, d0
 80011fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001202:	f7ff f9f9 	bl	80005f8 <__aeabi_dmul>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	4620      	mov	r0, r4
 800120c:	4629      	mov	r1, r5
 800120e:	f7ff f83d 	bl	800028c <__adddf3>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	4614      	mov	r4, r2
 8001218:	461d      	mov	r5, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	ed93 7b00 	vldr	d7, [r3]
 8001220:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80012b0 <interpolazione+0x170>
 8001224:	eeb0 0a47 	vmov.f32	s0, s14
 8001228:	eef0 0a67 	vmov.f32	s1, s15
 800122c:	f007 f898 	bl	8008360 <pow>
 8001230:	ec51 0b10 	vmov	r0, r1, d0
 8001234:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001238:	f7ff f9de 	bl	80005f8 <__aeabi_dmul>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	4620      	mov	r0, r4
 8001242:	4629      	mov	r1, r5
 8001244:	f7ff f822 	bl	800028c <__adddf3>
 8001248:	4602      	mov	r2, r0
 800124a:	460b      	mov	r3, r1
 800124c:	4614      	mov	r4, r2
 800124e:	461d      	mov	r5, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001256:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800125a:	f7ff f9cd 	bl	80005f8 <__aeabi_dmul>
 800125e:	4602      	mov	r2, r0
 8001260:	460b      	mov	r3, r1
 8001262:	4620      	mov	r0, r4
 8001264:	4629      	mov	r1, r5
 8001266:	f7ff f811 	bl	800028c <__adddf3>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001272:	f7ff f80b 	bl	800028c <__adddf3>
 8001276:	4602      	mov	r2, r0
 8001278:	460b      	mov	r3, r1
 800127a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	return temperatura;
 800127e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001282:	ec43 2b17 	vmov	d7, r2, r3
}
 8001286:	eeb0 0a47 	vmov.f32	s0, s14
 800128a:	eef0 0a67 	vmov.f32	s1, s15
 800128e:	3740      	adds	r7, #64	; 0x40
 8001290:	46bd      	mov	sp, r7
 8001292:	bdb0      	pop	{r4, r5, r7, pc}
 8001294:	f3af 8000 	nop.w
 8001298:	00000000 	.word	0x00000000
 800129c:	40140000 	.word	0x40140000
 80012a0:	00000000 	.word	0x00000000
 80012a4:	40100000 	.word	0x40100000
 80012a8:	00000000 	.word	0x00000000
 80012ac:	40080000 	.word	0x40080000
 80012b0:	00000000 	.word	0x00000000
 80012b4:	40000000 	.word	0x40000000
 80012b8:	00d1b717 	.word	0x00d1b717
 80012bc:	c083475e 	.word	0xc083475e
 80012c0:	cccccccd 	.word	0xcccccccd
 80012c4:	40b6f54c 	.word	0x40b6f54c
 80012c8:	00000000 	.word	0x00000000
 80012cc:	c0d5d3c0 	.word	0xc0d5d3c0
 80012d0:	00000000 	.word	0x00000000
 80012d4:	40e4b640 	.word	0x40e4b640
 80012d8:	00000000 	.word	0x00000000
 80012dc:	c0e3a740 	.word	0xc0e3a740
 80012e0:	00000000 	.word	0x00000000
 80012e4:	40cdff00 	.word	0x40cdff00

080012e8 <__io_putchar>:

PUTCHAR_PROTOTYPE
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80012f0:	1d39      	adds	r1, r7, #4
 80012f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012f6:	2201      	movs	r2, #1
 80012f8:	4803      	ldr	r0, [pc, #12]	; (8001308 <__io_putchar+0x20>)
 80012fa:	f003 fca3 	bl	8004c44 <HAL_UART_Transmit>
  return ch;
 80012fe:	687b      	ldr	r3, [r7, #4]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000790 	.word	0x20000790

0800130c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001310:	b672      	cpsid	i
}
 8001312:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001314:	e7fe      	b.n	8001314 <Error_Handler+0x8>
	...

08001318 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800131e:	4b0f      	ldr	r3, [pc, #60]	; (800135c <HAL_MspInit+0x44>)
 8001320:	699b      	ldr	r3, [r3, #24]
 8001322:	4a0e      	ldr	r2, [pc, #56]	; (800135c <HAL_MspInit+0x44>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	6193      	str	r3, [r2, #24]
 800132a:	4b0c      	ldr	r3, [pc, #48]	; (800135c <HAL_MspInit+0x44>)
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	607b      	str	r3, [r7, #4]
 8001334:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001336:	4b09      	ldr	r3, [pc, #36]	; (800135c <HAL_MspInit+0x44>)
 8001338:	69db      	ldr	r3, [r3, #28]
 800133a:	4a08      	ldr	r2, [pc, #32]	; (800135c <HAL_MspInit+0x44>)
 800133c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001340:	61d3      	str	r3, [r2, #28]
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <HAL_MspInit+0x44>)
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134a:	603b      	str	r3, [r7, #0]
 800134c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	40021000 	.word	0x40021000

08001360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001364:	e7fe      	b.n	8001364 <NMI_Handler+0x4>

08001366 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800136a:	e7fe      	b.n	800136a <HardFault_Handler+0x4>

0800136c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001370:	e7fe      	b.n	8001370 <MemManage_Handler+0x4>

08001372 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001376:	e7fe      	b.n	8001376 <BusFault_Handler+0x4>

08001378 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800137c:	e7fe      	b.n	800137c <UsageFault_Handler+0x4>

0800137e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ac:	f000 fa38 	bl	8001820 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80013b8:	4803      	ldr	r0, [pc, #12]	; (80013c8 <ADC1_2_IRQHandler+0x14>)
 80013ba:	f000 fd93 	bl	8001ee4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80013be:	4803      	ldr	r0, [pc, #12]	; (80013cc <ADC1_2_IRQHandler+0x18>)
 80013c0:	f000 fd90 	bl	8001ee4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80013c4:	bf00      	nop
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	2000021c 	.word	0x2000021c
 80013cc:	2000026c 	.word	0x2000026c

080013d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
	return 1;
 80013d4:	2301      	movs	r3, #1
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <_kill>:

int _kill(int pid, int sig)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80013ea:	f004 f801 	bl	80053f0 <__errno>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2216      	movs	r2, #22
 80013f2:	601a      	str	r2, [r3, #0]
	return -1;
 80013f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <_exit>:

void _exit (int status)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001408:	f04f 31ff 	mov.w	r1, #4294967295
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff ffe7 	bl	80013e0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001412:	e7fe      	b.n	8001412 <_exit+0x12>

08001414 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
 800141a:	60f8      	str	r0, [r7, #12]
 800141c:	60b9      	str	r1, [r7, #8]
 800141e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]
 8001424:	e00a      	b.n	800143c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001426:	f3af 8000 	nop.w
 800142a:	4601      	mov	r1, r0
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	1c5a      	adds	r2, r3, #1
 8001430:	60ba      	str	r2, [r7, #8]
 8001432:	b2ca      	uxtb	r2, r1
 8001434:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	3301      	adds	r3, #1
 800143a:	617b      	str	r3, [r7, #20]
 800143c:	697a      	ldr	r2, [r7, #20]
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	429a      	cmp	r2, r3
 8001442:	dbf0      	blt.n	8001426 <_read+0x12>
	}

return len;
 8001444:	687b      	ldr	r3, [r7, #4]
}
 8001446:	4618      	mov	r0, r3
 8001448:	3718      	adds	r7, #24
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b086      	sub	sp, #24
 8001452:	af00      	add	r7, sp, #0
 8001454:	60f8      	str	r0, [r7, #12]
 8001456:	60b9      	str	r1, [r7, #8]
 8001458:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800145a:	2300      	movs	r3, #0
 800145c:	617b      	str	r3, [r7, #20]
 800145e:	e009      	b.n	8001474 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	1c5a      	adds	r2, r3, #1
 8001464:	60ba      	str	r2, [r7, #8]
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	4618      	mov	r0, r3
 800146a:	f7ff ff3d 	bl	80012e8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	3301      	adds	r3, #1
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	697a      	ldr	r2, [r7, #20]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	429a      	cmp	r2, r3
 800147a:	dbf1      	blt.n	8001460 <_write+0x12>
	}
	return len;
 800147c:	687b      	ldr	r3, [r7, #4]
}
 800147e:	4618      	mov	r0, r3
 8001480:	3718      	adds	r7, #24
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <_close>:

int _close(int file)
{
 8001486:	b480      	push	{r7}
 8001488:	b083      	sub	sp, #12
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
	return -1;
 800148e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001492:	4618      	mov	r0, r3
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800149e:	b480      	push	{r7}
 80014a0:	b083      	sub	sp, #12
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
 80014a6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014ae:	605a      	str	r2, [r3, #4]
	return 0;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <_isatty>:

int _isatty(int file)
{
 80014be:	b480      	push	{r7}
 80014c0:	b083      	sub	sp, #12
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
	return 1;
 80014c6:	2301      	movs	r3, #1
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b085      	sub	sp, #20
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
	return 0;
 80014e0:	2300      	movs	r3, #0
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3714      	adds	r7, #20
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
	...

080014f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b086      	sub	sp, #24
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014f8:	4a14      	ldr	r2, [pc, #80]	; (800154c <_sbrk+0x5c>)
 80014fa:	4b15      	ldr	r3, [pc, #84]	; (8001550 <_sbrk+0x60>)
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001504:	4b13      	ldr	r3, [pc, #76]	; (8001554 <_sbrk+0x64>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d102      	bne.n	8001512 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800150c:	4b11      	ldr	r3, [pc, #68]	; (8001554 <_sbrk+0x64>)
 800150e:	4a12      	ldr	r2, [pc, #72]	; (8001558 <_sbrk+0x68>)
 8001510:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001512:	4b10      	ldr	r3, [pc, #64]	; (8001554 <_sbrk+0x64>)
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4413      	add	r3, r2
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	429a      	cmp	r2, r3
 800151e:	d207      	bcs.n	8001530 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001520:	f003 ff66 	bl	80053f0 <__errno>
 8001524:	4603      	mov	r3, r0
 8001526:	220c      	movs	r2, #12
 8001528:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800152a:	f04f 33ff 	mov.w	r3, #4294967295
 800152e:	e009      	b.n	8001544 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001530:	4b08      	ldr	r3, [pc, #32]	; (8001554 <_sbrk+0x64>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001536:	4b07      	ldr	r3, [pc, #28]	; (8001554 <_sbrk+0x64>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4413      	add	r3, r2
 800153e:	4a05      	ldr	r2, [pc, #20]	; (8001554 <_sbrk+0x64>)
 8001540:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001542:	68fb      	ldr	r3, [r7, #12]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3718      	adds	r7, #24
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20003000 	.word	0x20003000
 8001550:	00000400 	.word	0x00000400
 8001554:	20000740 	.word	0x20000740
 8001558:	20000830 	.word	0x20000830

0800155c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <SystemInit+0x20>)
 8001562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001566:	4a05      	ldr	r2, [pc, #20]	; (800157c <SystemInit+0x20>)
 8001568:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800156c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001570:	bf00      	nop
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b088      	sub	sp, #32
 8001584:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001586:	f107 0310 	add.w	r3, r7, #16
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	609a      	str	r2, [r3, #8]
 8001592:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001594:	1d3b      	adds	r3, r7, #4
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]
 800159c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800159e:	4b1e      	ldr	r3, [pc, #120]	; (8001618 <MX_TIM2_Init+0x98>)
 80015a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80015a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80015a6:	4b1c      	ldr	r3, [pc, #112]	; (8001618 <MX_TIM2_Init+0x98>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ac:	4b1a      	ldr	r3, [pc, #104]	; (8001618 <MX_TIM2_Init+0x98>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80015b2:	4b19      	ldr	r3, [pc, #100]	; (8001618 <MX_TIM2_Init+0x98>)
 80015b4:	f04f 32ff 	mov.w	r2, #4294967295
 80015b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ba:	4b17      	ldr	r3, [pc, #92]	; (8001618 <MX_TIM2_Init+0x98>)
 80015bc:	2200      	movs	r2, #0
 80015be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c0:	4b15      	ldr	r3, [pc, #84]	; (8001618 <MX_TIM2_Init+0x98>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80015c6:	4814      	ldr	r0, [pc, #80]	; (8001618 <MX_TIM2_Init+0x98>)
 80015c8:	f002 fff8 	bl	80045bc <HAL_TIM_Base_Init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80015d2:	f7ff fe9b 	bl	800130c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80015dc:	f107 0310 	add.w	r3, r7, #16
 80015e0:	4619      	mov	r1, r3
 80015e2:	480d      	ldr	r0, [pc, #52]	; (8001618 <MX_TIM2_Init+0x98>)
 80015e4:	f003 f896 	bl	8004714 <HAL_TIM_ConfigClockSource>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80015ee:	f7ff fe8d 	bl	800130c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f2:	2300      	movs	r3, #0
 80015f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015fa:	1d3b      	adds	r3, r7, #4
 80015fc:	4619      	mov	r1, r3
 80015fe:	4806      	ldr	r0, [pc, #24]	; (8001618 <MX_TIM2_Init+0x98>)
 8001600:	f003 fa64 	bl	8004acc <HAL_TIMEx_MasterConfigSynchronization>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800160a:	f7ff fe7f 	bl	800130c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800160e:	bf00      	nop
 8001610:	3720      	adds	r7, #32
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20000744 	.word	0x20000744

0800161c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800162c:	d10b      	bne.n	8001646 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800162e:	4b09      	ldr	r3, [pc, #36]	; (8001654 <HAL_TIM_Base_MspInit+0x38>)
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	4a08      	ldr	r2, [pc, #32]	; (8001654 <HAL_TIM_Base_MspInit+0x38>)
 8001634:	f043 0301 	orr.w	r3, r3, #1
 8001638:	61d3      	str	r3, [r2, #28]
 800163a:	4b06      	ldr	r3, [pc, #24]	; (8001654 <HAL_TIM_Base_MspInit+0x38>)
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001646:	bf00      	nop
 8001648:	3714      	adds	r7, #20
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	40021000 	.word	0x40021000

08001658 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800165c:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <MX_USART2_UART_Init+0x58>)
 800165e:	4a15      	ldr	r2, [pc, #84]	; (80016b4 <MX_USART2_UART_Init+0x5c>)
 8001660:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001662:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <MX_USART2_UART_Init+0x58>)
 8001664:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001668:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800166a:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <MX_USART2_UART_Init+0x58>)
 800166c:	2200      	movs	r2, #0
 800166e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001670:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <MX_USART2_UART_Init+0x58>)
 8001672:	2200      	movs	r2, #0
 8001674:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001676:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <MX_USART2_UART_Init+0x58>)
 8001678:	2200      	movs	r2, #0
 800167a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800167c:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <MX_USART2_UART_Init+0x58>)
 800167e:	220c      	movs	r2, #12
 8001680:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001682:	4b0b      	ldr	r3, [pc, #44]	; (80016b0 <MX_USART2_UART_Init+0x58>)
 8001684:	2200      	movs	r2, #0
 8001686:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001688:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <MX_USART2_UART_Init+0x58>)
 800168a:	2200      	movs	r2, #0
 800168c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800168e:	4b08      	ldr	r3, [pc, #32]	; (80016b0 <MX_USART2_UART_Init+0x58>)
 8001690:	2200      	movs	r2, #0
 8001692:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001694:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <MX_USART2_UART_Init+0x58>)
 8001696:	2200      	movs	r2, #0
 8001698:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800169a:	4805      	ldr	r0, [pc, #20]	; (80016b0 <MX_USART2_UART_Init+0x58>)
 800169c:	f003 fa84 	bl	8004ba8 <HAL_UART_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80016a6:	f7ff fe31 	bl	800130c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000790 	.word	0x20000790
 80016b4:	40004400 	.word	0x40004400

080016b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b08a      	sub	sp, #40	; 0x28
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
 80016ce:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a18      	ldr	r2, [pc, #96]	; (8001738 <HAL_UART_MspInit+0x80>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d129      	bne.n	800172e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016da:	4b18      	ldr	r3, [pc, #96]	; (800173c <HAL_UART_MspInit+0x84>)
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	4a17      	ldr	r2, [pc, #92]	; (800173c <HAL_UART_MspInit+0x84>)
 80016e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e4:	61d3      	str	r3, [r2, #28]
 80016e6:	4b15      	ldr	r3, [pc, #84]	; (800173c <HAL_UART_MspInit+0x84>)
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ee:	613b      	str	r3, [r7, #16]
 80016f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f2:	4b12      	ldr	r3, [pc, #72]	; (800173c <HAL_UART_MspInit+0x84>)
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	4a11      	ldr	r2, [pc, #68]	; (800173c <HAL_UART_MspInit+0x84>)
 80016f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016fc:	6153      	str	r3, [r2, #20]
 80016fe:	4b0f      	ldr	r3, [pc, #60]	; (800173c <HAL_UART_MspInit+0x84>)
 8001700:	695b      	ldr	r3, [r3, #20]
 8001702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800170a:	f248 0304 	movw	r3, #32772	; 0x8004
 800170e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001710:	2302      	movs	r3, #2
 8001712:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001718:	2303      	movs	r3, #3
 800171a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800171c:	2307      	movs	r3, #7
 800171e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	4619      	mov	r1, r3
 8001726:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800172a:	f001 fb5f 	bl	8002dec <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800172e:	bf00      	nop
 8001730:	3728      	adds	r7, #40	; 0x28
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	40004400 	.word	0x40004400
 800173c:	40021000 	.word	0x40021000

08001740 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001740:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001778 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001744:	f7ff ff0a 	bl	800155c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001748:	480c      	ldr	r0, [pc, #48]	; (800177c <LoopForever+0x6>)
  ldr r1, =_edata
 800174a:	490d      	ldr	r1, [pc, #52]	; (8001780 <LoopForever+0xa>)
  ldr r2, =_sidata
 800174c:	4a0d      	ldr	r2, [pc, #52]	; (8001784 <LoopForever+0xe>)
  movs r3, #0
 800174e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001750:	e002      	b.n	8001758 <LoopCopyDataInit>

08001752 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001752:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001754:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001756:	3304      	adds	r3, #4

08001758 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001758:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800175a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800175c:	d3f9      	bcc.n	8001752 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800175e:	4a0a      	ldr	r2, [pc, #40]	; (8001788 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001760:	4c0a      	ldr	r4, [pc, #40]	; (800178c <LoopForever+0x16>)
  movs r3, #0
 8001762:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001764:	e001      	b.n	800176a <LoopFillZerobss>

08001766 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001766:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001768:	3204      	adds	r2, #4

0800176a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800176a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800176c:	d3fb      	bcc.n	8001766 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800176e:	f003 fe45 	bl	80053fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001772:	f7ff fb99 	bl	8000ea8 <main>

08001776 <LoopForever>:

LoopForever:
    b LoopForever
 8001776:	e7fe      	b.n	8001776 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001778:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800177c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001780:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8001784:	08009658 	.word	0x08009658
  ldr r2, =_sbss
 8001788:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 800178c:	2000082c 	.word	0x2000082c

08001790 <CAN_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001790:	e7fe      	b.n	8001790 <CAN_RX0_IRQHandler>
	...

08001794 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001798:	4b08      	ldr	r3, [pc, #32]	; (80017bc <HAL_Init+0x28>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a07      	ldr	r2, [pc, #28]	; (80017bc <HAL_Init+0x28>)
 800179e:	f043 0310 	orr.w	r3, r3, #16
 80017a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a4:	2003      	movs	r0, #3
 80017a6:	f001 fadf 	bl	8002d68 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017aa:	2000      	movs	r0, #0
 80017ac:	f000 f808 	bl	80017c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017b0:	f7ff fdb2 	bl	8001318 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40022000 	.word	0x40022000

080017c0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017c8:	4b12      	ldr	r3, [pc, #72]	; (8001814 <HAL_InitTick+0x54>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4b12      	ldr	r3, [pc, #72]	; (8001818 <HAL_InitTick+0x58>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	4619      	mov	r1, r3
 80017d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017da:	fbb2 f3f3 	udiv	r3, r2, r3
 80017de:	4618      	mov	r0, r3
 80017e0:	f001 faf7 	bl	8002dd2 <HAL_SYSTICK_Config>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e00e      	b.n	800180c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2b0f      	cmp	r3, #15
 80017f2:	d80a      	bhi.n	800180a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017f4:	2200      	movs	r2, #0
 80017f6:	6879      	ldr	r1, [r7, #4]
 80017f8:	f04f 30ff 	mov.w	r0, #4294967295
 80017fc:	f001 fabf 	bl	8002d7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001800:	4a06      	ldr	r2, [pc, #24]	; (800181c <HAL_InitTick+0x5c>)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001806:	2300      	movs	r3, #0
 8001808:	e000      	b.n	800180c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
}
 800180c:	4618      	mov	r0, r3
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20000020 	.word	0x20000020
 8001818:	20000028 	.word	0x20000028
 800181c:	20000024 	.word	0x20000024

08001820 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <HAL_IncTick+0x20>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	461a      	mov	r2, r3
 800182a:	4b06      	ldr	r3, [pc, #24]	; (8001844 <HAL_IncTick+0x24>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4413      	add	r3, r2
 8001830:	4a04      	ldr	r2, [pc, #16]	; (8001844 <HAL_IncTick+0x24>)
 8001832:	6013      	str	r3, [r2, #0]
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	20000028 	.word	0x20000028
 8001844:	20000818 	.word	0x20000818

08001848 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  return uwTick;  
 800184c:	4b03      	ldr	r3, [pc, #12]	; (800185c <HAL_GetTick+0x14>)
 800184e:	681b      	ldr	r3, [r3, #0]
}
 8001850:	4618      	mov	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	20000818 	.word	0x20000818

08001860 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b09a      	sub	sp, #104	; 0x68
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018a4:	2300      	movs	r3, #0
 80018a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80018aa:	2300      	movs	r3, #0
 80018ac:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80018ae:	2300      	movs	r3, #0
 80018b0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d101      	bne.n	80018bc <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e172      	b.n	8001ba2 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	f003 0310 	and.w	r3, r3, #16
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d176      	bne.n	80019bc <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d152      	bne.n	800197c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2200      	movs	r2, #0
 80018da:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f7ff fa27 	bl	8000d44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d13b      	bne.n	800197c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f001 f8f9 	bl	8002afc <ADC_Disable>
 800190a:	4603      	mov	r3, r0
 800190c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001914:	f003 0310 	and.w	r3, r3, #16
 8001918:	2b00      	cmp	r3, #0
 800191a:	d12f      	bne.n	800197c <HAL_ADC_Init+0xe0>
 800191c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001920:	2b00      	cmp	r3, #0
 8001922:	d12b      	bne.n	800197c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001928:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800192c:	f023 0302 	bic.w	r3, r3, #2
 8001930:	f043 0202 	orr.w	r2, r3, #2
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	689a      	ldr	r2, [r3, #8]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001946:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	689a      	ldr	r2, [r3, #8]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001956:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001958:	4b94      	ldr	r3, [pc, #592]	; (8001bac <HAL_ADC_Init+0x310>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a94      	ldr	r2, [pc, #592]	; (8001bb0 <HAL_ADC_Init+0x314>)
 800195e:	fba2 2303 	umull	r2, r3, r2, r3
 8001962:	0c9a      	lsrs	r2, r3, #18
 8001964:	4613      	mov	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800196e:	e002      	b.n	8001976 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	3b01      	subs	r3, #1
 8001974:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d1f9      	bne.n	8001970 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d007      	beq.n	800199a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001994:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001998:	d110      	bne.n	80019bc <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	f023 0312 	bic.w	r3, r3, #18
 80019a2:	f043 0210 	orr.w	r2, r3, #16
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ae:	f043 0201 	orr.w	r2, r3, #1
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c0:	f003 0310 	and.w	r3, r3, #16
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	f040 80df 	bne.w	8001b88 <HAL_ADC_Init+0x2ec>
 80019ca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	f040 80da 	bne.w	8001b88 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80019de:	2b00      	cmp	r3, #0
 80019e0:	f040 80d2 	bne.w	8001b88 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80019ec:	f043 0202 	orr.w	r2, r3, #2
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019f4:	4b6f      	ldr	r3, [pc, #444]	; (8001bb4 <HAL_ADC_Init+0x318>)
 80019f6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a00:	d102      	bne.n	8001a08 <HAL_ADC_Init+0x16c>
 8001a02:	4b6d      	ldr	r3, [pc, #436]	; (8001bb8 <HAL_ADC_Init+0x31c>)
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	e002      	b.n	8001a0e <HAL_ADC_Init+0x172>
 8001a08:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a0c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 0303 	and.w	r3, r3, #3
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d108      	bne.n	8001a2e <HAL_ADC_Init+0x192>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d101      	bne.n	8001a2e <HAL_ADC_Init+0x192>
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e000      	b.n	8001a30 <HAL_ADC_Init+0x194>
 8001a2e:	2300      	movs	r3, #0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d11c      	bne.n	8001a6e <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a34:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d010      	beq.n	8001a5c <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f003 0303 	and.w	r3, r3, #3
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d107      	bne.n	8001a56 <HAL_ADC_Init+0x1ba>
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d101      	bne.n	8001a56 <HAL_ADC_Init+0x1ba>
 8001a52:	2301      	movs	r3, #1
 8001a54:	e000      	b.n	8001a58 <HAL_ADC_Init+0x1bc>
 8001a56:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d108      	bne.n	8001a6e <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001a5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a6c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	7e5b      	ldrb	r3, [r3, #25]
 8001a72:	035b      	lsls	r3, r3, #13
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a78:	2a01      	cmp	r2, #1
 8001a7a:	d002      	beq.n	8001a82 <HAL_ADC_Init+0x1e6>
 8001a7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a80:	e000      	b.n	8001a84 <HAL_ADC_Init+0x1e8>
 8001a82:	2200      	movs	r2, #0
 8001a84:	431a      	orrs	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	431a      	orrs	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a94:	4313      	orrs	r3, r2
 8001a96:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d11b      	bne.n	8001ada <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	7e5b      	ldrb	r3, [r3, #25]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d109      	bne.n	8001abe <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	045a      	lsls	r2, r3, #17
 8001ab2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aba:	663b      	str	r3, [r7, #96]	; 0x60
 8001abc:	e00d      	b.n	8001ada <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001ac6:	f043 0220 	orr.w	r2, r3, #32
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad2:	f043 0201 	orr.w	r2, r3, #1
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d007      	beq.n	8001af2 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aea:	4313      	orrs	r3, r2
 8001aec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001aee:	4313      	orrs	r3, r2
 8001af0:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	f003 030c 	and.w	r3, r3, #12
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d114      	bne.n	8001b2a <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	6812      	ldr	r2, [r2, #0]
 8001b0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b0e:	f023 0302 	bic.w	r3, r3, #2
 8001b12:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	7e1b      	ldrb	r3, [r3, #24]
 8001b18:	039a      	lsls	r2, r3, #14
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	4313      	orrs	r3, r2
 8001b24:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001b26:	4313      	orrs	r3, r2
 8001b28:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	68da      	ldr	r2, [r3, #12]
 8001b30:	4b22      	ldr	r3, [pc, #136]	; (8001bbc <HAL_ADC_Init+0x320>)
 8001b32:	4013      	ands	r3, r2
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	6812      	ldr	r2, [r2, #0]
 8001b38:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001b3a:	430b      	orrs	r3, r1
 8001b3c:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d10c      	bne.n	8001b60 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4c:	f023 010f 	bic.w	r1, r3, #15
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	69db      	ldr	r3, [r3, #28]
 8001b54:	1e5a      	subs	r2, r3, #1
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	631a      	str	r2, [r3, #48]	; 0x30
 8001b5e:	e007      	b.n	8001b70 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f022 020f 	bic.w	r2, r2, #15
 8001b6e:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2200      	movs	r2, #0
 8001b74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7a:	f023 0303 	bic.w	r3, r3, #3
 8001b7e:	f043 0201 	orr.w	r2, r3, #1
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	641a      	str	r2, [r3, #64]	; 0x40
 8001b86:	e00a      	b.n	8001b9e <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8c:	f023 0312 	bic.w	r3, r3, #18
 8001b90:	f043 0210 	orr.w	r2, r3, #16
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001b98:	2301      	movs	r3, #1
 8001b9a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001b9e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3768      	adds	r7, #104	; 0x68
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20000020 	.word	0x20000020
 8001bb0:	431bde83 	.word	0x431bde83
 8001bb4:	50000300 	.word	0x50000300
 8001bb8:	50000100 	.word	0x50000100
 8001bbc:	fff0c007 	.word	0xfff0c007

08001bc0 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f003 0304 	and.w	r3, r3, #4
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f040 809c 	bne.w	8001d14 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d101      	bne.n	8001bea <HAL_ADC_Start+0x2a>
 8001be6:	2302      	movs	r3, #2
 8001be8:	e097      	b.n	8001d1a <HAL_ADC_Start+0x15a>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2201      	movs	r2, #1
 8001bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 ff1e 	bl	8002a34 <ADC_Enable>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001bfc:	7bfb      	ldrb	r3, [r7, #15]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f040 8083 	bne.w	8001d0a <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c0c:	f023 0301 	bic.w	r3, r3, #1
 8001c10:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001c18:	4b42      	ldr	r3, [pc, #264]	; (8001d24 <HAL_ADC_Start+0x164>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f003 031f 	and.w	r3, r3, #31
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d004      	beq.n	8001c2e <HAL_ADC_Start+0x6e>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c2c:	d115      	bne.n	8001c5a <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d027      	beq.n	8001c98 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c50:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001c58:	e01e      	b.n	8001c98 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c6e:	d004      	beq.n	8001c7a <HAL_ADC_Start+0xba>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a2c      	ldr	r2, [pc, #176]	; (8001d28 <HAL_ADC_Start+0x168>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d10e      	bne.n	8001c98 <HAL_ADC_Start+0xd8>
 8001c7a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d007      	beq.n	8001c98 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c90:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ca4:	d106      	bne.n	8001cb4 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001caa:	f023 0206 	bic.w	r2, r3, #6
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	645a      	str	r2, [r3, #68]	; 0x44
 8001cb2:	e002      	b.n	8001cba <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	221c      	movs	r2, #28
 8001cc8:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001cca:	4b16      	ldr	r3, [pc, #88]	; (8001d24 <HAL_ADC_Start+0x164>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f003 031f 	and.w	r3, r3, #31
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d010      	beq.n	8001cf8 <HAL_ADC_Start+0x138>
 8001cd6:	4b13      	ldr	r3, [pc, #76]	; (8001d24 <HAL_ADC_Start+0x164>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 031f 	and.w	r3, r3, #31
 8001cde:	2b05      	cmp	r3, #5
 8001ce0:	d00a      	beq.n	8001cf8 <HAL_ADC_Start+0x138>
 8001ce2:	4b10      	ldr	r3, [pc, #64]	; (8001d24 <HAL_ADC_Start+0x164>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f003 031f 	and.w	r3, r3, #31
 8001cea:	2b09      	cmp	r3, #9
 8001cec:	d004      	beq.n	8001cf8 <HAL_ADC_Start+0x138>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001cf6:	d10f      	bne.n	8001d18 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689a      	ldr	r2, [r3, #8]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f042 0204 	orr.w	r2, r2, #4
 8001d06:	609a      	str	r2, [r3, #8]
 8001d08:	e006      	b.n	8001d18 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001d12:	e001      	b.n	8001d18 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d14:	2302      	movs	r3, #2
 8001d16:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	50000300 	.word	0x50000300
 8001d28:	50000100 	.word	0x50000100

08001d2c <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b086      	sub	sp, #24
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001d36:	2300      	movs	r3, #0
 8001d38:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	2b08      	cmp	r3, #8
 8001d40:	d102      	bne.n	8001d48 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001d42:	2308      	movs	r3, #8
 8001d44:	617b      	str	r3, [r7, #20]
 8001d46:	e02e      	b.n	8001da6 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d48:	4b5e      	ldr	r3, [pc, #376]	; (8001ec4 <HAL_ADC_PollForConversion+0x198>)
 8001d4a:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f003 031f 	and.w	r3, r3, #31
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d112      	bne.n	8001d7e <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	f003 0301 	and.w	r3, r3, #1
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d11d      	bne.n	8001da2 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6a:	f043 0220 	orr.w	r2, r3, #32
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e09d      	b.n	8001eba <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00b      	beq.n	8001da2 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	f043 0220 	orr.w	r2, r3, #32
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e08b      	b.n	8001eba <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001da2:	230c      	movs	r3, #12
 8001da4:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001da6:	4b47      	ldr	r3, [pc, #284]	; (8001ec4 <HAL_ADC_PollForConversion+0x198>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f003 031f 	and.w	r3, r3, #31
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d004      	beq.n	8001dbc <HAL_ADC_PollForConversion+0x90>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001dba:	d104      	bne.n	8001dc6 <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	613b      	str	r3, [r7, #16]
 8001dc4:	e003      	b.n	8001dce <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001dc6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001dce:	f7ff fd3b 	bl	8001848 <HAL_GetTick>
 8001dd2:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001dd4:	e021      	b.n	8001e1a <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ddc:	d01d      	beq.n	8001e1a <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d007      	beq.n	8001df4 <HAL_ADC_PollForConversion+0xc8>
 8001de4:	f7ff fd30 	bl	8001848 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d212      	bcs.n	8001e1a <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d10b      	bne.n	8001e1a <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	f043 0204 	orr.w	r2, r3, #4
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8001e16:	2303      	movs	r3, #3
 8001e18:	e04f      	b.n	8001eba <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	4013      	ands	r3, r2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d0d6      	beq.n	8001dd6 <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d131      	bne.n	8001ea6 <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d12c      	bne.n	8001ea6 <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 0308 	and.w	r3, r3, #8
 8001e56:	2b08      	cmp	r3, #8
 8001e58:	d125      	bne.n	8001ea6 <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 0304 	and.w	r3, r3, #4
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d112      	bne.n	8001e8e <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d112      	bne.n	8001ea6 <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e84:	f043 0201 	orr.w	r2, r3, #1
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	641a      	str	r2, [r3, #64]	; 0x40
 8001e8c:	e00b      	b.n	8001ea6 <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	f043 0220 	orr.w	r2, r3, #32
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9e:	f043 0201 	orr.w	r2, r3, #1
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d103      	bne.n	8001eb8 <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	697a      	ldr	r2, [r7, #20]
 8001eb6:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	50000300 	.word	0x50000300

08001ec8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
	...

08001ee4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b088      	sub	sp, #32
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8001eec:	2300      	movs	r3, #0
 8001eee:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	f003 0304 	and.w	r3, r3, #4
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d004      	beq.n	8001f1c <HAL_ADC_IRQHandler+0x38>
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f003 0304 	and.w	r3, r3, #4
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d109      	bne.n	8001f30 <HAL_ADC_IRQHandler+0x4c>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d076      	beq.n	8002014 <HAL_ADC_IRQHandler+0x130>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f003 0308 	and.w	r3, r3, #8
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d071      	beq.n	8002014 <HAL_ADC_IRQHandler+0x130>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f34:	f003 0310 	and.w	r3, r3, #16
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d105      	bne.n	8001f48 <HAL_ADC_IRQHandler+0x64>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f40:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001f48:	4b82      	ldr	r3, [pc, #520]	; (8002154 <HAL_ADC_IRQHandler+0x270>)
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f003 031f 	and.w	r3, r3, #31
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d010      	beq.n	8001f76 <HAL_ADC_IRQHandler+0x92>
 8001f54:	4b7f      	ldr	r3, [pc, #508]	; (8002154 <HAL_ADC_IRQHandler+0x270>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	f003 031f 	and.w	r3, r3, #31
 8001f5c:	2b05      	cmp	r3, #5
 8001f5e:	d00a      	beq.n	8001f76 <HAL_ADC_IRQHandler+0x92>
 8001f60:	4b7c      	ldr	r3, [pc, #496]	; (8002154 <HAL_ADC_IRQHandler+0x270>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f003 031f 	and.w	r3, r3, #31
 8001f68:	2b09      	cmp	r3, #9
 8001f6a:	d004      	beq.n	8001f76 <HAL_ADC_IRQHandler+0x92>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f74:	d104      	bne.n	8001f80 <HAL_ADC_IRQHandler+0x9c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	61bb      	str	r3, [r7, #24]
 8001f7e:	e003      	b.n	8001f88 <HAL_ADC_IRQHandler+0xa4>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001f80:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d137      	bne.n	8002006 <HAL_ADC_IRQHandler+0x122>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d132      	bne.n	8002006 <HAL_ADC_IRQHandler+0x122>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	f003 0308 	and.w	r3, r3, #8
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d02d      	beq.n	8002006 <HAL_ADC_IRQHandler+0x122>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d11a      	bne.n	8001fee <HAL_ADC_IRQHandler+0x10a>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	685a      	ldr	r2, [r3, #4]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 020c 	bic.w	r2, r2, #12
 8001fc6:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fcc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	641a      	str	r2, [r3, #64]	; 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d112      	bne.n	8002006 <HAL_ADC_IRQHandler+0x122>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe4:	f043 0201 	orr.w	r2, r3, #1
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	641a      	str	r2, [r3, #64]	; 0x40
 8001fec:	e00b      	b.n	8002006 <HAL_ADC_IRQHandler+0x122>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	f043 0210 	orr.w	r2, r3, #16
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	641a      	str	r2, [r3, #64]	; 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffe:	f043 0201 	orr.w	r2, r3, #1
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7ff fc2a 	bl	8001860 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	220c      	movs	r2, #12
 8002012:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	f003 0320 	and.w	r3, r3, #32
 800201a:	2b00      	cmp	r3, #0
 800201c:	d004      	beq.n	8002028 <HAL_ADC_IRQHandler+0x144>
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f003 0320 	and.w	r3, r3, #32
 8002024:	2b00      	cmp	r3, #0
 8002026:	d10b      	bne.n	8002040 <HAL_ADC_IRQHandler+0x15c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800202e:	2b00      	cmp	r3, #0
 8002030:	f000 80a5 	beq.w	800217e <HAL_ADC_IRQHandler+0x29a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800203a:	2b00      	cmp	r3, #0
 800203c:	f000 809f 	beq.w	800217e <HAL_ADC_IRQHandler+0x29a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002044:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	641a      	str	r2, [r3, #64]	; 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800204c:	4b41      	ldr	r3, [pc, #260]	; (8002154 <HAL_ADC_IRQHandler+0x270>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f003 031f 	and.w	r3, r3, #31
 8002054:	2b00      	cmp	r3, #0
 8002056:	d010      	beq.n	800207a <HAL_ADC_IRQHandler+0x196>
 8002058:	4b3e      	ldr	r3, [pc, #248]	; (8002154 <HAL_ADC_IRQHandler+0x270>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f003 031f 	and.w	r3, r3, #31
 8002060:	2b05      	cmp	r3, #5
 8002062:	d00a      	beq.n	800207a <HAL_ADC_IRQHandler+0x196>
 8002064:	4b3b      	ldr	r3, [pc, #236]	; (8002154 <HAL_ADC_IRQHandler+0x270>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f003 031f 	and.w	r3, r3, #31
 800206c:	2b09      	cmp	r3, #9
 800206e:	d004      	beq.n	800207a <HAL_ADC_IRQHandler+0x196>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002078:	d104      	bne.n	8002084 <HAL_ADC_IRQHandler+0x1a0>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	61bb      	str	r3, [r7, #24]
 8002082:	e003      	b.n	800208c <HAL_ADC_IRQHandler+0x1a8>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002084:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002092:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d16a      	bne.n	8002170 <HAL_ADC_IRQHandler+0x28c>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d00b      	beq.n	80020bc <HAL_ADC_IRQHandler+0x1d8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d15e      	bne.n	8002170 <HAL_ADC_IRQHandler+0x28c>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d159      	bne.n	8002170 <HAL_ADC_IRQHandler+0x28c>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d054      	beq.n	8002170 <HAL_ADC_IRQHandler+0x28c>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 80020c6:	4b23      	ldr	r3, [pc, #140]	; (8002154 <HAL_ADC_IRQHandler+0x270>)
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	f003 031f 	and.w	r3, r3, #31
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d010      	beq.n	80020f4 <HAL_ADC_IRQHandler+0x210>
 80020d2:	4b20      	ldr	r3, [pc, #128]	; (8002154 <HAL_ADC_IRQHandler+0x270>)
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f003 031f 	and.w	r3, r3, #31
 80020da:	2b06      	cmp	r3, #6
 80020dc:	d00a      	beq.n	80020f4 <HAL_ADC_IRQHandler+0x210>
 80020de:	4b1d      	ldr	r3, [pc, #116]	; (8002154 <HAL_ADC_IRQHandler+0x270>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f003 031f 	and.w	r3, r3, #31
 80020e6:	2b07      	cmp	r3, #7
 80020e8:	d004      	beq.n	80020f4 <HAL_ADC_IRQHandler+0x210>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020f2:	d104      	bne.n	80020fe <HAL_ADC_IRQHandler+0x21a>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	617b      	str	r3, [r7, #20]
 80020fc:	e003      	b.n	8002106 <HAL_ADC_IRQHandler+0x222>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80020fe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d12f      	bne.n	8002170 <HAL_ADC_IRQHandler+0x28c>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 0308 	and.w	r3, r3, #8
 800211a:	2b00      	cmp	r3, #0
 800211c:	d11c      	bne.n	8002158 <HAL_ADC_IRQHandler+0x274>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	685a      	ldr	r2, [r3, #4]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800212c:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	641a      	str	r2, [r3, #64]	; 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002142:	2b00      	cmp	r3, #0
 8002144:	d114      	bne.n	8002170 <HAL_ADC_IRQHandler+0x28c>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	f043 0201 	orr.w	r2, r3, #1
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	641a      	str	r2, [r3, #64]	; 0x40
 8002152:	e00d      	b.n	8002170 <HAL_ADC_IRQHandler+0x28c>
 8002154:	50000300 	.word	0x50000300
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	f043 0210 	orr.w	r2, r3, #16
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	641a      	str	r2, [r3, #64]	; 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002168:	f043 0201 	orr.w	r2, r3, #1
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	645a      	str	r2, [r3, #68]	; 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f000 f8b1 	bl	80022d8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2260      	movs	r2, #96	; 0x60
 800217c:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002184:	2b00      	cmp	r3, #0
 8002186:	d011      	beq.n	80021ac <HAL_ADC_IRQHandler+0x2c8>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00c      	beq.n	80021ac <HAL_ADC_IRQHandler+0x2c8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7ff fb68 	bl	8001874 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2280      	movs	r2, #128	; 0x80
 80021aa:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d012      	beq.n	80021dc <HAL_ADC_IRQHandler+0x2f8>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d00d      	beq.n	80021dc <HAL_ADC_IRQHandler+0x2f8>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f000 f897 	bl	8002300 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021da:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d012      	beq.n	800220c <HAL_ADC_IRQHandler+0x328>
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00d      	beq.n	800220c <HAL_ADC_IRQHandler+0x328>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f000 f889 	bl	8002314 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f44f 7200 	mov.w	r2, #512	; 0x200
 800220a:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	f003 0310 	and.w	r3, r3, #16
 8002212:	2b00      	cmp	r3, #0
 8002214:	d03b      	beq.n	800228e <HAL_ADC_IRQHandler+0x3aa>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f003 0310 	and.w	r3, r3, #16
 800221c:	2b00      	cmp	r3, #0
 800221e:	d036      	beq.n	800228e <HAL_ADC_IRQHandler+0x3aa>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002224:	2b01      	cmp	r3, #1
 8002226:	d102      	bne.n	800222e <HAL_ADC_IRQHandler+0x34a>
    {
      overrun_error = 1U;
 8002228:	2301      	movs	r3, #1
 800222a:	61fb      	str	r3, [r7, #28]
 800222c:	e019      	b.n	8002262 <HAL_ADC_IRQHandler+0x37e>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800222e:	4b29      	ldr	r3, [pc, #164]	; (80022d4 <HAL_ADC_IRQHandler+0x3f0>)
 8002230:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 031f 	and.w	r3, r3, #31
 800223a:	2b00      	cmp	r3, #0
 800223c:	d109      	bne.n	8002252 <HAL_ADC_IRQHandler+0x36e>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	2b01      	cmp	r3, #1
 800224a:	d10a      	bne.n	8002262 <HAL_ADC_IRQHandler+0x37e>
        {
          overrun_error = 1U;  
 800224c:	2301      	movs	r3, #1
 800224e:	61fb      	str	r3, [r7, #28]
 8002250:	e007      	b.n	8002262 <HAL_ADC_IRQHandler+0x37e>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d001      	beq.n	8002262 <HAL_ADC_IRQHandler+0x37e>
        {
          overrun_error = 1U;  
 800225e:	2301      	movs	r3, #1
 8002260:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d10e      	bne.n	8002286 <HAL_ADC_IRQHandler+0x3a2>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002278:	f043 0202 	orr.w	r2, r3, #2
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f7ff fb01 	bl	8001888 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2210      	movs	r2, #16
 800228c:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002294:	2b00      	cmp	r3, #0
 8002296:	d018      	beq.n	80022ca <HAL_ADC_IRQHandler+0x3e6>
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d013      	beq.n	80022ca <HAL_ADC_IRQHandler+0x3e6>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	641a      	str	r2, [r3, #64]	; 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b2:	f043 0208 	orr.w	r2, r3, #8
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022c2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 f811 	bl	80022ec <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 80022ca:	bf00      	nop
 80022cc:	3720      	adds	r7, #32
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	50000300 	.word	0x50000300

080022d8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr

080022ec <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8002308:	bf00      	nop
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002328:	b480      	push	{r7}
 800232a:	b09b      	sub	sp, #108	; 0x6c
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002332:	2300      	movs	r3, #0
 8002334:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002338:	2300      	movs	r3, #0
 800233a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002342:	2b01      	cmp	r3, #1
 8002344:	d101      	bne.n	800234a <HAL_ADC_ConfigChannel+0x22>
 8002346:	2302      	movs	r3, #2
 8002348:	e2a4      	b.n	8002894 <HAL_ADC_ConfigChannel+0x56c>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f003 0304 	and.w	r3, r3, #4
 800235c:	2b00      	cmp	r3, #0
 800235e:	f040 8288 	bne.w	8002872 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2b04      	cmp	r3, #4
 8002368:	d81c      	bhi.n	80023a4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	4613      	mov	r3, r2
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	4413      	add	r3, r2
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	461a      	mov	r2, r3
 800237e:	231f      	movs	r3, #31
 8002380:	4093      	lsls	r3, r2
 8002382:	43db      	mvns	r3, r3
 8002384:	4019      	ands	r1, r3
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	6818      	ldr	r0, [r3, #0]
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685a      	ldr	r2, [r3, #4]
 800238e:	4613      	mov	r3, r2
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	4413      	add	r3, r2
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	fa00 f203 	lsl.w	r2, r0, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	430a      	orrs	r2, r1
 80023a0:	631a      	str	r2, [r3, #48]	; 0x30
 80023a2:	e063      	b.n	800246c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	2b09      	cmp	r3, #9
 80023aa:	d81e      	bhi.n	80023ea <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685a      	ldr	r2, [r3, #4]
 80023b6:	4613      	mov	r3, r2
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	4413      	add	r3, r2
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	3b1e      	subs	r3, #30
 80023c0:	221f      	movs	r2, #31
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43db      	mvns	r3, r3
 80023c8:	4019      	ands	r1, r3
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	6818      	ldr	r0, [r3, #0]
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	4613      	mov	r3, r2
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	4413      	add	r3, r2
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	3b1e      	subs	r3, #30
 80023dc:	fa00 f203 	lsl.w	r2, r0, r3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	430a      	orrs	r2, r1
 80023e6:	635a      	str	r2, [r3, #52]	; 0x34
 80023e8:	e040      	b.n	800246c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b0e      	cmp	r3, #14
 80023f0:	d81e      	bhi.n	8002430 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685a      	ldr	r2, [r3, #4]
 80023fc:	4613      	mov	r3, r2
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	4413      	add	r3, r2
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	3b3c      	subs	r3, #60	; 0x3c
 8002406:	221f      	movs	r2, #31
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	43db      	mvns	r3, r3
 800240e:	4019      	ands	r1, r3
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	6818      	ldr	r0, [r3, #0]
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	4613      	mov	r3, r2
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	4413      	add	r3, r2
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	3b3c      	subs	r3, #60	; 0x3c
 8002422:	fa00 f203 	lsl.w	r2, r0, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	430a      	orrs	r2, r1
 800242c:	639a      	str	r2, [r3, #56]	; 0x38
 800242e:	e01d      	b.n	800246c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685a      	ldr	r2, [r3, #4]
 800243a:	4613      	mov	r3, r2
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	4413      	add	r3, r2
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	3b5a      	subs	r3, #90	; 0x5a
 8002444:	221f      	movs	r2, #31
 8002446:	fa02 f303 	lsl.w	r3, r2, r3
 800244a:	43db      	mvns	r3, r3
 800244c:	4019      	ands	r1, r3
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	6818      	ldr	r0, [r3, #0]
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	4613      	mov	r3, r2
 8002458:	005b      	lsls	r3, r3, #1
 800245a:	4413      	add	r3, r2
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	3b5a      	subs	r3, #90	; 0x5a
 8002460:	fa00 f203 	lsl.w	r2, r0, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	430a      	orrs	r2, r1
 800246a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 030c 	and.w	r3, r3, #12
 8002476:	2b00      	cmp	r3, #0
 8002478:	f040 80e5 	bne.w	8002646 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2b09      	cmp	r3, #9
 8002482:	d91c      	bls.n	80024be <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6999      	ldr	r1, [r3, #24]
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	4613      	mov	r3, r2
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	4413      	add	r3, r2
 8002494:	3b1e      	subs	r3, #30
 8002496:	2207      	movs	r2, #7
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	43db      	mvns	r3, r3
 800249e:	4019      	ands	r1, r3
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	6898      	ldr	r0, [r3, #8]
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	4613      	mov	r3, r2
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	4413      	add	r3, r2
 80024ae:	3b1e      	subs	r3, #30
 80024b0:	fa00 f203 	lsl.w	r2, r0, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	430a      	orrs	r2, r1
 80024ba:	619a      	str	r2, [r3, #24]
 80024bc:	e019      	b.n	80024f2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6959      	ldr	r1, [r3, #20]
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	4613      	mov	r3, r2
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	4413      	add	r3, r2
 80024ce:	2207      	movs	r2, #7
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	43db      	mvns	r3, r3
 80024d6:	4019      	ands	r1, r3
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	6898      	ldr	r0, [r3, #8]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	4613      	mov	r3, r2
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	4413      	add	r3, r2
 80024e6:	fa00 f203 	lsl.w	r2, r0, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	430a      	orrs	r2, r1
 80024f0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	695a      	ldr	r2, [r3, #20]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	08db      	lsrs	r3, r3, #3
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	005b      	lsls	r3, r3, #1
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	3b01      	subs	r3, #1
 8002510:	2b03      	cmp	r3, #3
 8002512:	d84f      	bhi.n	80025b4 <HAL_ADC_ConfigChannel+0x28c>
 8002514:	a201      	add	r2, pc, #4	; (adr r2, 800251c <HAL_ADC_ConfigChannel+0x1f4>)
 8002516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800251a:	bf00      	nop
 800251c:	0800252d 	.word	0x0800252d
 8002520:	0800254f 	.word	0x0800254f
 8002524:	08002571 	.word	0x08002571
 8002528:	08002593 	.word	0x08002593
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002532:	4b94      	ldr	r3, [pc, #592]	; (8002784 <HAL_ADC_ConfigChannel+0x45c>)
 8002534:	4013      	ands	r3, r2
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	6812      	ldr	r2, [r2, #0]
 800253a:	0691      	lsls	r1, r2, #26
 800253c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800253e:	430a      	orrs	r2, r1
 8002540:	431a      	orrs	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800254a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800254c:	e07e      	b.n	800264c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002554:	4b8b      	ldr	r3, [pc, #556]	; (8002784 <HAL_ADC_ConfigChannel+0x45c>)
 8002556:	4013      	ands	r3, r2
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	6812      	ldr	r2, [r2, #0]
 800255c:	0691      	lsls	r1, r2, #26
 800255e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002560:	430a      	orrs	r2, r1
 8002562:	431a      	orrs	r2, r3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800256c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800256e:	e06d      	b.n	800264c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002576:	4b83      	ldr	r3, [pc, #524]	; (8002784 <HAL_ADC_ConfigChannel+0x45c>)
 8002578:	4013      	ands	r3, r2
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	6812      	ldr	r2, [r2, #0]
 800257e:	0691      	lsls	r1, r2, #26
 8002580:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002582:	430a      	orrs	r2, r1
 8002584:	431a      	orrs	r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800258e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002590:	e05c      	b.n	800264c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002598:	4b7a      	ldr	r3, [pc, #488]	; (8002784 <HAL_ADC_ConfigChannel+0x45c>)
 800259a:	4013      	ands	r3, r2
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	6812      	ldr	r2, [r2, #0]
 80025a0:	0691      	lsls	r1, r2, #26
 80025a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80025a4:	430a      	orrs	r2, r1
 80025a6:	431a      	orrs	r2, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80025b0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80025b2:	e04b      	b.n	800264c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	069b      	lsls	r3, r3, #26
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d107      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80025d6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	069b      	lsls	r3, r3, #26
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d107      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80025fa:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002602:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	069b      	lsls	r3, r3, #26
 800260c:	429a      	cmp	r2, r3
 800260e:	d107      	bne.n	8002620 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800261e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002626:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	069b      	lsls	r3, r3, #26
 8002630:	429a      	cmp	r2, r3
 8002632:	d10a      	bne.n	800264a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002642:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002644:	e001      	b.n	800264a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002646:	bf00      	nop
 8002648:	e000      	b.n	800264c <HAL_ADC_ConfigChannel+0x324>
      break;
 800264a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	f003 0303 	and.w	r3, r3, #3
 8002656:	2b01      	cmp	r3, #1
 8002658:	d108      	bne.n	800266c <HAL_ADC_ConfigChannel+0x344>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	2b01      	cmp	r3, #1
 8002666:	d101      	bne.n	800266c <HAL_ADC_ConfigChannel+0x344>
 8002668:	2301      	movs	r3, #1
 800266a:	e000      	b.n	800266e <HAL_ADC_ConfigChannel+0x346>
 800266c:	2300      	movs	r3, #0
 800266e:	2b00      	cmp	r3, #0
 8002670:	f040 810a 	bne.w	8002888 <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d00f      	beq.n	800269c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2201      	movs	r2, #1
 800268a:	fa02 f303 	lsl.w	r3, r2, r3
 800268e:	43da      	mvns	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	400a      	ands	r2, r1
 8002696:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800269a:	e049      	b.n	8002730 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2201      	movs	r2, #1
 80026aa:	409a      	lsls	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	430a      	orrs	r2, r1
 80026b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2b09      	cmp	r3, #9
 80026bc:	d91c      	bls.n	80026f8 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	6999      	ldr	r1, [r3, #24]
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	4613      	mov	r3, r2
 80026ca:	005b      	lsls	r3, r3, #1
 80026cc:	4413      	add	r3, r2
 80026ce:	3b1b      	subs	r3, #27
 80026d0:	2207      	movs	r2, #7
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43db      	mvns	r3, r3
 80026d8:	4019      	ands	r1, r3
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	6898      	ldr	r0, [r3, #8]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	4613      	mov	r3, r2
 80026e4:	005b      	lsls	r3, r3, #1
 80026e6:	4413      	add	r3, r2
 80026e8:	3b1b      	subs	r3, #27
 80026ea:	fa00 f203 	lsl.w	r2, r0, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	619a      	str	r2, [r3, #24]
 80026f6:	e01b      	b.n	8002730 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6959      	ldr	r1, [r3, #20]
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	1c5a      	adds	r2, r3, #1
 8002704:	4613      	mov	r3, r2
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	4413      	add	r3, r2
 800270a:	2207      	movs	r2, #7
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	43db      	mvns	r3, r3
 8002712:	4019      	ands	r1, r3
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	6898      	ldr	r0, [r3, #8]
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	1c5a      	adds	r2, r3, #1
 800271e:	4613      	mov	r3, r2
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	4413      	add	r3, r2
 8002724:	fa00 f203 	lsl.w	r2, r0, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	430a      	orrs	r2, r1
 800272e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002730:	4b15      	ldr	r3, [pc, #84]	; (8002788 <HAL_ADC_ConfigChannel+0x460>)
 8002732:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2b10      	cmp	r3, #16
 800273a:	d105      	bne.n	8002748 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800273c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002744:	2b00      	cmp	r3, #0
 8002746:	d015      	beq.n	8002774 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800274c:	2b11      	cmp	r3, #17
 800274e:	d105      	bne.n	800275c <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002750:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00b      	beq.n	8002774 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002760:	2b12      	cmp	r3, #18
 8002762:	f040 8091 	bne.w	8002888 <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002766:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800276e:	2b00      	cmp	r3, #0
 8002770:	f040 808a 	bne.w	8002888 <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800277c:	d108      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x468>
 800277e:	4b03      	ldr	r3, [pc, #12]	; (800278c <HAL_ADC_ConfigChannel+0x464>)
 8002780:	60fb      	str	r3, [r7, #12]
 8002782:	e008      	b.n	8002796 <HAL_ADC_ConfigChannel+0x46e>
 8002784:	83fff000 	.word	0x83fff000
 8002788:	50000300 	.word	0x50000300
 800278c:	50000100 	.word	0x50000100
 8002790:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002794:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f003 0303 	and.w	r3, r3, #3
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d108      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x48e>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d101      	bne.n	80027b6 <HAL_ADC_ConfigChannel+0x48e>
 80027b2:	2301      	movs	r3, #1
 80027b4:	e000      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x490>
 80027b6:	2300      	movs	r3, #0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d150      	bne.n	800285e <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80027bc:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d010      	beq.n	80027e4 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f003 0303 	and.w	r3, r3, #3
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d107      	bne.n	80027de <HAL_ADC_ConfigChannel+0x4b6>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d101      	bne.n	80027de <HAL_ADC_ConfigChannel+0x4b6>
 80027da:	2301      	movs	r3, #1
 80027dc:	e000      	b.n	80027e0 <HAL_ADC_ConfigChannel+0x4b8>
 80027de:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d13c      	bne.n	800285e <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2b10      	cmp	r3, #16
 80027ea:	d11d      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x500>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027f4:	d118      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80027f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80027fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002800:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002802:	4b27      	ldr	r3, [pc, #156]	; (80028a0 <HAL_ADC_ConfigChannel+0x578>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a27      	ldr	r2, [pc, #156]	; (80028a4 <HAL_ADC_ConfigChannel+0x57c>)
 8002808:	fba2 2303 	umull	r2, r3, r2, r3
 800280c:	0c9a      	lsrs	r2, r3, #18
 800280e:	4613      	mov	r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	4413      	add	r3, r2
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002818:	e002      	b.n	8002820 <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	3b01      	subs	r3, #1
 800281e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1f9      	bne.n	800281a <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002826:	e02e      	b.n	8002886 <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2b11      	cmp	r3, #17
 800282e:	d10b      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x520>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002838:	d106      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800283a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002842:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002844:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002846:	e01e      	b.n	8002886 <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2b12      	cmp	r3, #18
 800284e:	d11a      	bne.n	8002886 <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002850:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002858:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800285a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800285c:	e013      	b.n	8002886 <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002862:	f043 0220 	orr.w	r2, r3, #32
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002870:	e00a      	b.n	8002888 <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	f043 0220 	orr.w	r2, r3, #32
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002884:	e000      	b.n	8002888 <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002886:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002890:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002894:	4618      	mov	r0, r3
 8002896:	376c      	adds	r7, #108	; 0x6c
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr
 80028a0:	20000020 	.word	0x20000020
 80028a4:	431bde83 	.word	0x431bde83

080028a8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b099      	sub	sp, #100	; 0x64
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028b2:	2300      	movs	r3, #0
 80028b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028c0:	d102      	bne.n	80028c8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80028c2:	4b5a      	ldr	r3, [pc, #360]	; (8002a2c <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 80028c4:	60bb      	str	r3, [r7, #8]
 80028c6:	e002      	b.n	80028ce <HAL_ADCEx_MultiModeConfigChannel+0x26>
 80028c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80028cc:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e0a2      	b.n	8002a1e <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d101      	bne.n	80028e6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80028e2:	2302      	movs	r3, #2
 80028e4:	e09b      	b.n	8002a1e <HAL_ADCEx_MultiModeConfigChannel+0x176>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f003 0304 	and.w	r3, r3, #4
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d17f      	bne.n	80029fc <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	2b00      	cmp	r3, #0
 8002906:	d179      	bne.n	80029fc <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002908:	4b49      	ldr	r3, [pc, #292]	; (8002a30 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 800290a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d040      	beq.n	8002996 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002914:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	6859      	ldr	r1, [r3, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002926:	035b      	lsls	r3, r3, #13
 8002928:	430b      	orrs	r3, r1
 800292a:	431a      	orrs	r2, r3
 800292c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800292e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	2b01      	cmp	r3, #1
 800293c:	d108      	bne.n	8002950 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	2b01      	cmp	r3, #1
 800294a:	d101      	bne.n	8002950 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800294c:	2301      	movs	r3, #1
 800294e:	e000      	b.n	8002952 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002950:	2300      	movs	r3, #0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d15c      	bne.n	8002a10 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f003 0303 	and.w	r3, r3, #3
 800295e:	2b01      	cmp	r3, #1
 8002960:	d107      	bne.n	8002972 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b01      	cmp	r3, #1
 800296c:	d101      	bne.n	8002972 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800296e:	2301      	movs	r3, #1
 8002970:	e000      	b.n	8002974 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8002972:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002974:	2b00      	cmp	r3, #0
 8002976:	d14b      	bne.n	8002a10 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002978:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002980:	f023 030f 	bic.w	r3, r3, #15
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	6811      	ldr	r1, [r2, #0]
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	6892      	ldr	r2, [r2, #8]
 800298c:	430a      	orrs	r2, r1
 800298e:	431a      	orrs	r2, r3
 8002990:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002992:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002994:	e03c      	b.n	8002a10 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002996:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800299e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029a0:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f003 0303 	and.w	r3, r3, #3
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d108      	bne.n	80029c2 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d101      	bne.n	80029c2 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80029be:	2301      	movs	r3, #1
 80029c0:	e000      	b.n	80029c4 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 80029c2:	2300      	movs	r3, #0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d123      	bne.n	8002a10 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	f003 0303 	and.w	r3, r3, #3
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d107      	bne.n	80029e4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d101      	bne.n	80029e4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80029e0:	2301      	movs	r3, #1
 80029e2:	e000      	b.n	80029e6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80029e4:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d112      	bne.n	8002a10 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80029ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029ec:	689b      	ldr	r3, [r3, #8]
 80029ee:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80029f2:	f023 030f 	bic.w	r3, r3, #15
 80029f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029f8:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80029fa:	e009      	b.n	8002a10 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a00:	f043 0220 	orr.w	r2, r3, #32
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002a0e:	e000      	b.n	8002a12 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a10:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002a1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3764      	adds	r7, #100	; 0x64
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	50000100 	.word	0x50000100
 8002a30:	50000300 	.word	0x50000300

08002a34 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 0303 	and.w	r3, r3, #3
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d108      	bne.n	8002a60 <ADC_Enable+0x2c>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d101      	bne.n	8002a60 <ADC_Enable+0x2c>
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e000      	b.n	8002a62 <ADC_Enable+0x2e>
 8002a60:	2300      	movs	r3, #0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d143      	bne.n	8002aee <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	4b22      	ldr	r3, [pc, #136]	; (8002af8 <ADC_Enable+0xc4>)
 8002a6e:	4013      	ands	r3, r2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00d      	beq.n	8002a90 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a78:	f043 0210 	orr.w	r2, r3, #16
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a84:	f043 0201 	orr.w	r2, r3, #1
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e02f      	b.n	8002af0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	689a      	ldr	r2, [r3, #8]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f042 0201 	orr.w	r2, r2, #1
 8002a9e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002aa0:	f7fe fed2 	bl	8001848 <HAL_GetTick>
 8002aa4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002aa6:	e01b      	b.n	8002ae0 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002aa8:	f7fe fece 	bl	8001848 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	d914      	bls.n	8002ae0 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0301 	and.w	r3, r3, #1
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d00d      	beq.n	8002ae0 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac8:	f043 0210 	orr.w	r2, r3, #16
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad4:	f043 0201 	orr.w	r2, r3, #1
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	e007      	b.n	8002af0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d1dc      	bne.n	8002aa8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	8000003f 	.word	0x8000003f

08002afc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b04:	2300      	movs	r3, #0
 8002b06:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 0303 	and.w	r3, r3, #3
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d108      	bne.n	8002b28 <ADC_Disable+0x2c>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d101      	bne.n	8002b28 <ADC_Disable+0x2c>
 8002b24:	2301      	movs	r3, #1
 8002b26:	e000      	b.n	8002b2a <ADC_Disable+0x2e>
 8002b28:	2300      	movs	r3, #0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d047      	beq.n	8002bbe <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f003 030d 	and.w	r3, r3, #13
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d10f      	bne.n	8002b5c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689a      	ldr	r2, [r3, #8]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f042 0202 	orr.w	r2, r2, #2
 8002b4a:	609a      	str	r2, [r3, #8]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2203      	movs	r2, #3
 8002b52:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002b54:	f7fe fe78 	bl	8001848 <HAL_GetTick>
 8002b58:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002b5a:	e029      	b.n	8002bb0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b60:	f043 0210 	orr.w	r2, r3, #16
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6c:	f043 0201 	orr.w	r2, r3, #1
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e023      	b.n	8002bc0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b78:	f7fe fe66 	bl	8001848 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d914      	bls.n	8002bb0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d10d      	bne.n	8002bb0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b98:	f043 0210 	orr.w	r2, r3, #16
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ba4:	f043 0201 	orr.w	r2, r3, #1
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e007      	b.n	8002bc0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d0dc      	beq.n	8002b78 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}

08002bc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f003 0307 	and.w	r3, r3, #7
 8002bd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bd8:	4b0c      	ldr	r3, [pc, #48]	; (8002c0c <__NVIC_SetPriorityGrouping+0x44>)
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bde:	68ba      	ldr	r2, [r7, #8]
 8002be0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002be4:	4013      	ands	r3, r2
 8002be6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bfa:	4a04      	ldr	r2, [pc, #16]	; (8002c0c <__NVIC_SetPriorityGrouping+0x44>)
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	60d3      	str	r3, [r2, #12]
}
 8002c00:	bf00      	nop
 8002c02:	3714      	adds	r7, #20
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr
 8002c0c:	e000ed00 	.word	0xe000ed00

08002c10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c14:	4b04      	ldr	r3, [pc, #16]	; (8002c28 <__NVIC_GetPriorityGrouping+0x18>)
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	0a1b      	lsrs	r3, r3, #8
 8002c1a:	f003 0307 	and.w	r3, r3, #7
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr
 8002c28:	e000ed00 	.word	0xe000ed00

08002c2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	4603      	mov	r3, r0
 8002c34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	db0b      	blt.n	8002c56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c3e:	79fb      	ldrb	r3, [r7, #7]
 8002c40:	f003 021f 	and.w	r2, r3, #31
 8002c44:	4907      	ldr	r1, [pc, #28]	; (8002c64 <__NVIC_EnableIRQ+0x38>)
 8002c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4a:	095b      	lsrs	r3, r3, #5
 8002c4c:	2001      	movs	r0, #1
 8002c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8002c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	e000e100 	.word	0xe000e100

08002c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	4603      	mov	r3, r0
 8002c70:	6039      	str	r1, [r7, #0]
 8002c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	db0a      	blt.n	8002c92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	b2da      	uxtb	r2, r3
 8002c80:	490c      	ldr	r1, [pc, #48]	; (8002cb4 <__NVIC_SetPriority+0x4c>)
 8002c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c86:	0112      	lsls	r2, r2, #4
 8002c88:	b2d2      	uxtb	r2, r2
 8002c8a:	440b      	add	r3, r1
 8002c8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c90:	e00a      	b.n	8002ca8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	b2da      	uxtb	r2, r3
 8002c96:	4908      	ldr	r1, [pc, #32]	; (8002cb8 <__NVIC_SetPriority+0x50>)
 8002c98:	79fb      	ldrb	r3, [r7, #7]
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	3b04      	subs	r3, #4
 8002ca0:	0112      	lsls	r2, r2, #4
 8002ca2:	b2d2      	uxtb	r2, r2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	761a      	strb	r2, [r3, #24]
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	e000e100 	.word	0xe000e100
 8002cb8:	e000ed00 	.word	0xe000ed00

08002cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b089      	sub	sp, #36	; 0x24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f003 0307 	and.w	r3, r3, #7
 8002cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	f1c3 0307 	rsb	r3, r3, #7
 8002cd6:	2b04      	cmp	r3, #4
 8002cd8:	bf28      	it	cs
 8002cda:	2304      	movcs	r3, #4
 8002cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	3304      	adds	r3, #4
 8002ce2:	2b06      	cmp	r3, #6
 8002ce4:	d902      	bls.n	8002cec <NVIC_EncodePriority+0x30>
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	3b03      	subs	r3, #3
 8002cea:	e000      	b.n	8002cee <NVIC_EncodePriority+0x32>
 8002cec:	2300      	movs	r3, #0
 8002cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfa:	43da      	mvns	r2, r3
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	401a      	ands	r2, r3
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d04:	f04f 31ff 	mov.w	r1, #4294967295
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d0e:	43d9      	mvns	r1, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d14:	4313      	orrs	r3, r2
         );
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3724      	adds	r7, #36	; 0x24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
	...

08002d24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	3b01      	subs	r3, #1
 8002d30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d34:	d301      	bcc.n	8002d3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d36:	2301      	movs	r3, #1
 8002d38:	e00f      	b.n	8002d5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d3a:	4a0a      	ldr	r2, [pc, #40]	; (8002d64 <SysTick_Config+0x40>)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d42:	210f      	movs	r1, #15
 8002d44:	f04f 30ff 	mov.w	r0, #4294967295
 8002d48:	f7ff ff8e 	bl	8002c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d4c:	4b05      	ldr	r3, [pc, #20]	; (8002d64 <SysTick_Config+0x40>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d52:	4b04      	ldr	r3, [pc, #16]	; (8002d64 <SysTick_Config+0x40>)
 8002d54:	2207      	movs	r2, #7
 8002d56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	e000e010 	.word	0xe000e010

08002d68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f7ff ff29 	bl	8002bc8 <__NVIC_SetPriorityGrouping>
}
 8002d76:	bf00      	nop
 8002d78:	3708      	adds	r7, #8
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b086      	sub	sp, #24
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	4603      	mov	r3, r0
 8002d86:	60b9      	str	r1, [r7, #8]
 8002d88:	607a      	str	r2, [r7, #4]
 8002d8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d90:	f7ff ff3e 	bl	8002c10 <__NVIC_GetPriorityGrouping>
 8002d94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	68b9      	ldr	r1, [r7, #8]
 8002d9a:	6978      	ldr	r0, [r7, #20]
 8002d9c:	f7ff ff8e 	bl	8002cbc <NVIC_EncodePriority>
 8002da0:	4602      	mov	r2, r0
 8002da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002da6:	4611      	mov	r1, r2
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff ff5d 	bl	8002c68 <__NVIC_SetPriority>
}
 8002dae:	bf00      	nop
 8002db0:	3718      	adds	r7, #24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002db6:	b580      	push	{r7, lr}
 8002db8:	b082      	sub	sp, #8
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff ff31 	bl	8002c2c <__NVIC_EnableIRQ>
}
 8002dca:	bf00      	nop
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b082      	sub	sp, #8
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7ff ffa2 	bl	8002d24 <SysTick_Config>
 8002de0:	4603      	mov	r3, r0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
	...

08002dec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b087      	sub	sp, #28
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002df6:	2300      	movs	r3, #0
 8002df8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dfa:	e14e      	b.n	800309a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681a      	ldr	r2, [r3, #0]
 8002e00:	2101      	movs	r1, #1
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	fa01 f303 	lsl.w	r3, r1, r3
 8002e08:	4013      	ands	r3, r2
 8002e0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f000 8140 	beq.w	8003094 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f003 0303 	and.w	r3, r3, #3
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d005      	beq.n	8002e2c <HAL_GPIO_Init+0x40>
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f003 0303 	and.w	r3, r3, #3
 8002e28:	2b02      	cmp	r3, #2
 8002e2a:	d130      	bne.n	8002e8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	005b      	lsls	r3, r3, #1
 8002e36:	2203      	movs	r2, #3
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	4013      	ands	r3, r2
 8002e42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	68da      	ldr	r2, [r3, #12]
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e62:	2201      	movs	r2, #1
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	43db      	mvns	r3, r3
 8002e6c:	693a      	ldr	r2, [r7, #16]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	091b      	lsrs	r3, r3, #4
 8002e78:	f003 0201 	and.w	r2, r3, #1
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	693a      	ldr	r2, [r7, #16]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f003 0303 	and.w	r3, r3, #3
 8002e96:	2b03      	cmp	r3, #3
 8002e98:	d017      	beq.n	8002eca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	005b      	lsls	r3, r3, #1
 8002ea4:	2203      	movs	r2, #3
 8002ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eaa:	43db      	mvns	r3, r3
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	689a      	ldr	r2, [r3, #8]
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f003 0303 	and.w	r3, r3, #3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d123      	bne.n	8002f1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	08da      	lsrs	r2, r3, #3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	3208      	adds	r2, #8
 8002ede:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	220f      	movs	r2, #15
 8002eee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef2:	43db      	mvns	r3, r3
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	691a      	ldr	r2, [r3, #16]
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	f003 0307 	and.w	r3, r3, #7
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	08da      	lsrs	r2, r3, #3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	3208      	adds	r2, #8
 8002f18:	6939      	ldr	r1, [r7, #16]
 8002f1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	2203      	movs	r2, #3
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	43db      	mvns	r3, r3
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	4013      	ands	r3, r2
 8002f34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f003 0203 	and.w	r2, r3, #3
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	fa02 f303 	lsl.w	r3, r2, r3
 8002f46:	693a      	ldr	r2, [r7, #16]
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	f000 809a 	beq.w	8003094 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f60:	4b55      	ldr	r3, [pc, #340]	; (80030b8 <HAL_GPIO_Init+0x2cc>)
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	4a54      	ldr	r2, [pc, #336]	; (80030b8 <HAL_GPIO_Init+0x2cc>)
 8002f66:	f043 0301 	orr.w	r3, r3, #1
 8002f6a:	6193      	str	r3, [r2, #24]
 8002f6c:	4b52      	ldr	r3, [pc, #328]	; (80030b8 <HAL_GPIO_Init+0x2cc>)
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	60bb      	str	r3, [r7, #8]
 8002f76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f78:	4a50      	ldr	r2, [pc, #320]	; (80030bc <HAL_GPIO_Init+0x2d0>)
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	089b      	lsrs	r3, r3, #2
 8002f7e:	3302      	adds	r3, #2
 8002f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	f003 0303 	and.w	r3, r3, #3
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	220f      	movs	r2, #15
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	43db      	mvns	r3, r3
 8002f96:	693a      	ldr	r2, [r7, #16]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002fa2:	d013      	beq.n	8002fcc <HAL_GPIO_Init+0x1e0>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a46      	ldr	r2, [pc, #280]	; (80030c0 <HAL_GPIO_Init+0x2d4>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d00d      	beq.n	8002fc8 <HAL_GPIO_Init+0x1dc>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a45      	ldr	r2, [pc, #276]	; (80030c4 <HAL_GPIO_Init+0x2d8>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d007      	beq.n	8002fc4 <HAL_GPIO_Init+0x1d8>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a44      	ldr	r2, [pc, #272]	; (80030c8 <HAL_GPIO_Init+0x2dc>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d101      	bne.n	8002fc0 <HAL_GPIO_Init+0x1d4>
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e006      	b.n	8002fce <HAL_GPIO_Init+0x1e2>
 8002fc0:	2305      	movs	r3, #5
 8002fc2:	e004      	b.n	8002fce <HAL_GPIO_Init+0x1e2>
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	e002      	b.n	8002fce <HAL_GPIO_Init+0x1e2>
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e000      	b.n	8002fce <HAL_GPIO_Init+0x1e2>
 8002fcc:	2300      	movs	r3, #0
 8002fce:	697a      	ldr	r2, [r7, #20]
 8002fd0:	f002 0203 	and.w	r2, r2, #3
 8002fd4:	0092      	lsls	r2, r2, #2
 8002fd6:	4093      	lsls	r3, r2
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002fde:	4937      	ldr	r1, [pc, #220]	; (80030bc <HAL_GPIO_Init+0x2d0>)
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	089b      	lsrs	r3, r3, #2
 8002fe4:	3302      	adds	r3, #2
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fec:	4b37      	ldr	r3, [pc, #220]	; (80030cc <HAL_GPIO_Init+0x2e0>)
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d003      	beq.n	8003010 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	4313      	orrs	r3, r2
 800300e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003010:	4a2e      	ldr	r2, [pc, #184]	; (80030cc <HAL_GPIO_Init+0x2e0>)
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003016:	4b2d      	ldr	r3, [pc, #180]	; (80030cc <HAL_GPIO_Init+0x2e0>)
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	43db      	mvns	r3, r3
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	4013      	ands	r3, r2
 8003024:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4313      	orrs	r3, r2
 8003038:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800303a:	4a24      	ldr	r2, [pc, #144]	; (80030cc <HAL_GPIO_Init+0x2e0>)
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003040:	4b22      	ldr	r3, [pc, #136]	; (80030cc <HAL_GPIO_Init+0x2e0>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	43db      	mvns	r3, r3
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	4013      	ands	r3, r2
 800304e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d003      	beq.n	8003064 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 800305c:	693a      	ldr	r2, [r7, #16]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	4313      	orrs	r3, r2
 8003062:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003064:	4a19      	ldr	r2, [pc, #100]	; (80030cc <HAL_GPIO_Init+0x2e0>)
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800306a:	4b18      	ldr	r3, [pc, #96]	; (80030cc <HAL_GPIO_Init+0x2e0>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	43db      	mvns	r3, r3
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	4013      	ands	r3, r2
 8003078:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	4313      	orrs	r3, r2
 800308c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800308e:	4a0f      	ldr	r2, [pc, #60]	; (80030cc <HAL_GPIO_Init+0x2e0>)
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	3301      	adds	r3, #1
 8003098:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	fa22 f303 	lsr.w	r3, r2, r3
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f47f aea9 	bne.w	8002dfc <HAL_GPIO_Init+0x10>
  }
}
 80030aa:	bf00      	nop
 80030ac:	bf00      	nop
 80030ae:	371c      	adds	r7, #28
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	40021000 	.word	0x40021000
 80030bc:	40010000 	.word	0x40010000
 80030c0:	48000400 	.word	0x48000400
 80030c4:	48000800 	.word	0x48000800
 80030c8:	48000c00 	.word	0x48000c00
 80030cc:	40010400 	.word	0x40010400

080030d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030dc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030e0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d102      	bne.n	80030f6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	f001 b823 	b.w	800413c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b00      	cmp	r3, #0
 8003108:	f000 817d 	beq.w	8003406 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800310c:	4bbc      	ldr	r3, [pc, #752]	; (8003400 <HAL_RCC_OscConfig+0x330>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f003 030c 	and.w	r3, r3, #12
 8003114:	2b04      	cmp	r3, #4
 8003116:	d00c      	beq.n	8003132 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003118:	4bb9      	ldr	r3, [pc, #740]	; (8003400 <HAL_RCC_OscConfig+0x330>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f003 030c 	and.w	r3, r3, #12
 8003120:	2b08      	cmp	r3, #8
 8003122:	d15c      	bne.n	80031de <HAL_RCC_OscConfig+0x10e>
 8003124:	4bb6      	ldr	r3, [pc, #728]	; (8003400 <HAL_RCC_OscConfig+0x330>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800312c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003130:	d155      	bne.n	80031de <HAL_RCC_OscConfig+0x10e>
 8003132:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003136:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800313e:	fa93 f3a3 	rbit	r3, r3
 8003142:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003146:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800314a:	fab3 f383 	clz	r3, r3
 800314e:	b2db      	uxtb	r3, r3
 8003150:	095b      	lsrs	r3, r3, #5
 8003152:	b2db      	uxtb	r3, r3
 8003154:	f043 0301 	orr.w	r3, r3, #1
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b01      	cmp	r3, #1
 800315c:	d102      	bne.n	8003164 <HAL_RCC_OscConfig+0x94>
 800315e:	4ba8      	ldr	r3, [pc, #672]	; (8003400 <HAL_RCC_OscConfig+0x330>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	e015      	b.n	8003190 <HAL_RCC_OscConfig+0xc0>
 8003164:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003168:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800316c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003170:	fa93 f3a3 	rbit	r3, r3
 8003174:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003178:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800317c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003180:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003184:	fa93 f3a3 	rbit	r3, r3
 8003188:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800318c:	4b9c      	ldr	r3, [pc, #624]	; (8003400 <HAL_RCC_OscConfig+0x330>)
 800318e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003190:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003194:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003198:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800319c:	fa92 f2a2 	rbit	r2, r2
 80031a0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80031a4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80031a8:	fab2 f282 	clz	r2, r2
 80031ac:	b2d2      	uxtb	r2, r2
 80031ae:	f042 0220 	orr.w	r2, r2, #32
 80031b2:	b2d2      	uxtb	r2, r2
 80031b4:	f002 021f 	and.w	r2, r2, #31
 80031b8:	2101      	movs	r1, #1
 80031ba:	fa01 f202 	lsl.w	r2, r1, r2
 80031be:	4013      	ands	r3, r2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 811f 	beq.w	8003404 <HAL_RCC_OscConfig+0x334>
 80031c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ca:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	f040 8116 	bne.w	8003404 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	f000 bfaf 	b.w	800413c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ee:	d106      	bne.n	80031fe <HAL_RCC_OscConfig+0x12e>
 80031f0:	4b83      	ldr	r3, [pc, #524]	; (8003400 <HAL_RCC_OscConfig+0x330>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a82      	ldr	r2, [pc, #520]	; (8003400 <HAL_RCC_OscConfig+0x330>)
 80031f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031fa:	6013      	str	r3, [r2, #0]
 80031fc:	e036      	b.n	800326c <HAL_RCC_OscConfig+0x19c>
 80031fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003202:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10c      	bne.n	8003228 <HAL_RCC_OscConfig+0x158>
 800320e:	4b7c      	ldr	r3, [pc, #496]	; (8003400 <HAL_RCC_OscConfig+0x330>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a7b      	ldr	r2, [pc, #492]	; (8003400 <HAL_RCC_OscConfig+0x330>)
 8003214:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003218:	6013      	str	r3, [r2, #0]
 800321a:	4b79      	ldr	r3, [pc, #484]	; (8003400 <HAL_RCC_OscConfig+0x330>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a78      	ldr	r2, [pc, #480]	; (8003400 <HAL_RCC_OscConfig+0x330>)
 8003220:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003224:	6013      	str	r3, [r2, #0]
 8003226:	e021      	b.n	800326c <HAL_RCC_OscConfig+0x19c>
 8003228:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800322c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003238:	d10c      	bne.n	8003254 <HAL_RCC_OscConfig+0x184>
 800323a:	4b71      	ldr	r3, [pc, #452]	; (8003400 <HAL_RCC_OscConfig+0x330>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a70      	ldr	r2, [pc, #448]	; (8003400 <HAL_RCC_OscConfig+0x330>)
 8003240:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	4b6e      	ldr	r3, [pc, #440]	; (8003400 <HAL_RCC_OscConfig+0x330>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a6d      	ldr	r2, [pc, #436]	; (8003400 <HAL_RCC_OscConfig+0x330>)
 800324c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003250:	6013      	str	r3, [r2, #0]
 8003252:	e00b      	b.n	800326c <HAL_RCC_OscConfig+0x19c>
 8003254:	4b6a      	ldr	r3, [pc, #424]	; (8003400 <HAL_RCC_OscConfig+0x330>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a69      	ldr	r2, [pc, #420]	; (8003400 <HAL_RCC_OscConfig+0x330>)
 800325a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800325e:	6013      	str	r3, [r2, #0]
 8003260:	4b67      	ldr	r3, [pc, #412]	; (8003400 <HAL_RCC_OscConfig+0x330>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a66      	ldr	r2, [pc, #408]	; (8003400 <HAL_RCC_OscConfig+0x330>)
 8003266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800326a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800326c:	4b64      	ldr	r3, [pc, #400]	; (8003400 <HAL_RCC_OscConfig+0x330>)
 800326e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003270:	f023 020f 	bic.w	r2, r3, #15
 8003274:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003278:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	495f      	ldr	r1, [pc, #380]	; (8003400 <HAL_RCC_OscConfig+0x330>)
 8003282:	4313      	orrs	r3, r2
 8003284:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003286:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800328a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d059      	beq.n	800334a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003296:	f7fe fad7 	bl	8001848 <HAL_GetTick>
 800329a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800329e:	e00a      	b.n	80032b6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032a0:	f7fe fad2 	bl	8001848 <HAL_GetTick>
 80032a4:	4602      	mov	r2, r0
 80032a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b64      	cmp	r3, #100	; 0x64
 80032ae:	d902      	bls.n	80032b6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	f000 bf43 	b.w	800413c <HAL_RCC_OscConfig+0x106c>
 80032b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032ba:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032be:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80032c2:	fa93 f3a3 	rbit	r3, r3
 80032c6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80032ca:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ce:	fab3 f383 	clz	r3, r3
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	095b      	lsrs	r3, r3, #5
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	f043 0301 	orr.w	r3, r3, #1
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d102      	bne.n	80032e8 <HAL_RCC_OscConfig+0x218>
 80032e2:	4b47      	ldr	r3, [pc, #284]	; (8003400 <HAL_RCC_OscConfig+0x330>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	e015      	b.n	8003314 <HAL_RCC_OscConfig+0x244>
 80032e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80032ec:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f0:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80032f4:	fa93 f3a3 	rbit	r3, r3
 80032f8:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80032fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003300:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003304:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003308:	fa93 f3a3 	rbit	r3, r3
 800330c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003310:	4b3b      	ldr	r3, [pc, #236]	; (8003400 <HAL_RCC_OscConfig+0x330>)
 8003312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003314:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003318:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800331c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003320:	fa92 f2a2 	rbit	r2, r2
 8003324:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003328:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800332c:	fab2 f282 	clz	r2, r2
 8003330:	b2d2      	uxtb	r2, r2
 8003332:	f042 0220 	orr.w	r2, r2, #32
 8003336:	b2d2      	uxtb	r2, r2
 8003338:	f002 021f 	and.w	r2, r2, #31
 800333c:	2101      	movs	r1, #1
 800333e:	fa01 f202 	lsl.w	r2, r1, r2
 8003342:	4013      	ands	r3, r2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d0ab      	beq.n	80032a0 <HAL_RCC_OscConfig+0x1d0>
 8003348:	e05d      	b.n	8003406 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800334a:	f7fe fa7d 	bl	8001848 <HAL_GetTick>
 800334e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003352:	e00a      	b.n	800336a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003354:	f7fe fa78 	bl	8001848 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b64      	cmp	r3, #100	; 0x64
 8003362:	d902      	bls.n	800336a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	f000 bee9 	b.w	800413c <HAL_RCC_OscConfig+0x106c>
 800336a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800336e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003372:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003376:	fa93 f3a3 	rbit	r3, r3
 800337a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 800337e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003382:	fab3 f383 	clz	r3, r3
 8003386:	b2db      	uxtb	r3, r3
 8003388:	095b      	lsrs	r3, r3, #5
 800338a:	b2db      	uxtb	r3, r3
 800338c:	f043 0301 	orr.w	r3, r3, #1
 8003390:	b2db      	uxtb	r3, r3
 8003392:	2b01      	cmp	r3, #1
 8003394:	d102      	bne.n	800339c <HAL_RCC_OscConfig+0x2cc>
 8003396:	4b1a      	ldr	r3, [pc, #104]	; (8003400 <HAL_RCC_OscConfig+0x330>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	e015      	b.n	80033c8 <HAL_RCC_OscConfig+0x2f8>
 800339c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033a0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033a4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80033a8:	fa93 f3a3 	rbit	r3, r3
 80033ac:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80033b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033b4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80033b8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80033bc:	fa93 f3a3 	rbit	r3, r3
 80033c0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80033c4:	4b0e      	ldr	r3, [pc, #56]	; (8003400 <HAL_RCC_OscConfig+0x330>)
 80033c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80033cc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80033d0:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80033d4:	fa92 f2a2 	rbit	r2, r2
 80033d8:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80033dc:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80033e0:	fab2 f282 	clz	r2, r2
 80033e4:	b2d2      	uxtb	r2, r2
 80033e6:	f042 0220 	orr.w	r2, r2, #32
 80033ea:	b2d2      	uxtb	r2, r2
 80033ec:	f002 021f 	and.w	r2, r2, #31
 80033f0:	2101      	movs	r1, #1
 80033f2:	fa01 f202 	lsl.w	r2, r1, r2
 80033f6:	4013      	ands	r3, r2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1ab      	bne.n	8003354 <HAL_RCC_OscConfig+0x284>
 80033fc:	e003      	b.n	8003406 <HAL_RCC_OscConfig+0x336>
 80033fe:	bf00      	nop
 8003400:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003404:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003406:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800340a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	f000 817d 	beq.w	8003716 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800341c:	4ba6      	ldr	r3, [pc, #664]	; (80036b8 <HAL_RCC_OscConfig+0x5e8>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f003 030c 	and.w	r3, r3, #12
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00b      	beq.n	8003440 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003428:	4ba3      	ldr	r3, [pc, #652]	; (80036b8 <HAL_RCC_OscConfig+0x5e8>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f003 030c 	and.w	r3, r3, #12
 8003430:	2b08      	cmp	r3, #8
 8003432:	d172      	bne.n	800351a <HAL_RCC_OscConfig+0x44a>
 8003434:	4ba0      	ldr	r3, [pc, #640]	; (80036b8 <HAL_RCC_OscConfig+0x5e8>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d16c      	bne.n	800351a <HAL_RCC_OscConfig+0x44a>
 8003440:	2302      	movs	r3, #2
 8003442:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003446:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800344a:	fa93 f3a3 	rbit	r3, r3
 800344e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003452:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003456:	fab3 f383 	clz	r3, r3
 800345a:	b2db      	uxtb	r3, r3
 800345c:	095b      	lsrs	r3, r3, #5
 800345e:	b2db      	uxtb	r3, r3
 8003460:	f043 0301 	orr.w	r3, r3, #1
 8003464:	b2db      	uxtb	r3, r3
 8003466:	2b01      	cmp	r3, #1
 8003468:	d102      	bne.n	8003470 <HAL_RCC_OscConfig+0x3a0>
 800346a:	4b93      	ldr	r3, [pc, #588]	; (80036b8 <HAL_RCC_OscConfig+0x5e8>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	e013      	b.n	8003498 <HAL_RCC_OscConfig+0x3c8>
 8003470:	2302      	movs	r3, #2
 8003472:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003476:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800347a:	fa93 f3a3 	rbit	r3, r3
 800347e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003482:	2302      	movs	r3, #2
 8003484:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003488:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800348c:	fa93 f3a3 	rbit	r3, r3
 8003490:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003494:	4b88      	ldr	r3, [pc, #544]	; (80036b8 <HAL_RCC_OscConfig+0x5e8>)
 8003496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003498:	2202      	movs	r2, #2
 800349a:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 800349e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80034a2:	fa92 f2a2 	rbit	r2, r2
 80034a6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80034aa:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80034ae:	fab2 f282 	clz	r2, r2
 80034b2:	b2d2      	uxtb	r2, r2
 80034b4:	f042 0220 	orr.w	r2, r2, #32
 80034b8:	b2d2      	uxtb	r2, r2
 80034ba:	f002 021f 	and.w	r2, r2, #31
 80034be:	2101      	movs	r1, #1
 80034c0:	fa01 f202 	lsl.w	r2, r1, r2
 80034c4:	4013      	ands	r3, r2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00a      	beq.n	80034e0 <HAL_RCC_OscConfig+0x410>
 80034ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	691b      	ldr	r3, [r3, #16]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d002      	beq.n	80034e0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	f000 be2e 	b.w	800413c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e0:	4b75      	ldr	r3, [pc, #468]	; (80036b8 <HAL_RCC_OscConfig+0x5e8>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	695b      	ldr	r3, [r3, #20]
 80034f4:	21f8      	movs	r1, #248	; 0xf8
 80034f6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fa:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80034fe:	fa91 f1a1 	rbit	r1, r1
 8003502:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003506:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800350a:	fab1 f181 	clz	r1, r1
 800350e:	b2c9      	uxtb	r1, r1
 8003510:	408b      	lsls	r3, r1
 8003512:	4969      	ldr	r1, [pc, #420]	; (80036b8 <HAL_RCC_OscConfig+0x5e8>)
 8003514:	4313      	orrs	r3, r2
 8003516:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003518:	e0fd      	b.n	8003716 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800351a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800351e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	691b      	ldr	r3, [r3, #16]
 8003526:	2b00      	cmp	r3, #0
 8003528:	f000 8088 	beq.w	800363c <HAL_RCC_OscConfig+0x56c>
 800352c:	2301      	movs	r3, #1
 800352e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003532:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003536:	fa93 f3a3 	rbit	r3, r3
 800353a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800353e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003542:	fab3 f383 	clz	r3, r3
 8003546:	b2db      	uxtb	r3, r3
 8003548:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800354c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	461a      	mov	r2, r3
 8003554:	2301      	movs	r3, #1
 8003556:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003558:	f7fe f976 	bl	8001848 <HAL_GetTick>
 800355c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003560:	e00a      	b.n	8003578 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003562:	f7fe f971 	bl	8001848 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d902      	bls.n	8003578 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	f000 bde2 	b.w	800413c <HAL_RCC_OscConfig+0x106c>
 8003578:	2302      	movs	r3, #2
 800357a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003582:	fa93 f3a3 	rbit	r3, r3
 8003586:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800358a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800358e:	fab3 f383 	clz	r3, r3
 8003592:	b2db      	uxtb	r3, r3
 8003594:	095b      	lsrs	r3, r3, #5
 8003596:	b2db      	uxtb	r3, r3
 8003598:	f043 0301 	orr.w	r3, r3, #1
 800359c:	b2db      	uxtb	r3, r3
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d102      	bne.n	80035a8 <HAL_RCC_OscConfig+0x4d8>
 80035a2:	4b45      	ldr	r3, [pc, #276]	; (80036b8 <HAL_RCC_OscConfig+0x5e8>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	e013      	b.n	80035d0 <HAL_RCC_OscConfig+0x500>
 80035a8:	2302      	movs	r3, #2
 80035aa:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ae:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80035b2:	fa93 f3a3 	rbit	r3, r3
 80035b6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80035ba:	2302      	movs	r3, #2
 80035bc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80035c0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80035c4:	fa93 f3a3 	rbit	r3, r3
 80035c8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80035cc:	4b3a      	ldr	r3, [pc, #232]	; (80036b8 <HAL_RCC_OscConfig+0x5e8>)
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	2202      	movs	r2, #2
 80035d2:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80035d6:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80035da:	fa92 f2a2 	rbit	r2, r2
 80035de:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80035e2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80035e6:	fab2 f282 	clz	r2, r2
 80035ea:	b2d2      	uxtb	r2, r2
 80035ec:	f042 0220 	orr.w	r2, r2, #32
 80035f0:	b2d2      	uxtb	r2, r2
 80035f2:	f002 021f 	and.w	r2, r2, #31
 80035f6:	2101      	movs	r1, #1
 80035f8:	fa01 f202 	lsl.w	r2, r1, r2
 80035fc:	4013      	ands	r3, r2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d0af      	beq.n	8003562 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003602:	4b2d      	ldr	r3, [pc, #180]	; (80036b8 <HAL_RCC_OscConfig+0x5e8>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800360a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800360e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	21f8      	movs	r1, #248	; 0xf8
 8003618:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003620:	fa91 f1a1 	rbit	r1, r1
 8003624:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003628:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800362c:	fab1 f181 	clz	r1, r1
 8003630:	b2c9      	uxtb	r1, r1
 8003632:	408b      	lsls	r3, r1
 8003634:	4920      	ldr	r1, [pc, #128]	; (80036b8 <HAL_RCC_OscConfig+0x5e8>)
 8003636:	4313      	orrs	r3, r2
 8003638:	600b      	str	r3, [r1, #0]
 800363a:	e06c      	b.n	8003716 <HAL_RCC_OscConfig+0x646>
 800363c:	2301      	movs	r3, #1
 800363e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003642:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003646:	fa93 f3a3 	rbit	r3, r3
 800364a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 800364e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003652:	fab3 f383 	clz	r3, r3
 8003656:	b2db      	uxtb	r3, r3
 8003658:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800365c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	461a      	mov	r2, r3
 8003664:	2300      	movs	r3, #0
 8003666:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003668:	f7fe f8ee 	bl	8001848 <HAL_GetTick>
 800366c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003670:	e00a      	b.n	8003688 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003672:	f7fe f8e9 	bl	8001848 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d902      	bls.n	8003688 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	f000 bd5a 	b.w	800413c <HAL_RCC_OscConfig+0x106c>
 8003688:	2302      	movs	r3, #2
 800368a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003692:	fa93 f3a3 	rbit	r3, r3
 8003696:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800369a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800369e:	fab3 f383 	clz	r3, r3
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	095b      	lsrs	r3, r3, #5
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	f043 0301 	orr.w	r3, r3, #1
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d104      	bne.n	80036bc <HAL_RCC_OscConfig+0x5ec>
 80036b2:	4b01      	ldr	r3, [pc, #4]	; (80036b8 <HAL_RCC_OscConfig+0x5e8>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	e015      	b.n	80036e4 <HAL_RCC_OscConfig+0x614>
 80036b8:	40021000 	.word	0x40021000
 80036bc:	2302      	movs	r3, #2
 80036be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80036c6:	fa93 f3a3 	rbit	r3, r3
 80036ca:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80036ce:	2302      	movs	r3, #2
 80036d0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80036d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80036d8:	fa93 f3a3 	rbit	r3, r3
 80036dc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80036e0:	4bc8      	ldr	r3, [pc, #800]	; (8003a04 <HAL_RCC_OscConfig+0x934>)
 80036e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e4:	2202      	movs	r2, #2
 80036e6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80036ea:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80036ee:	fa92 f2a2 	rbit	r2, r2
 80036f2:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80036f6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80036fa:	fab2 f282 	clz	r2, r2
 80036fe:	b2d2      	uxtb	r2, r2
 8003700:	f042 0220 	orr.w	r2, r2, #32
 8003704:	b2d2      	uxtb	r2, r2
 8003706:	f002 021f 	and.w	r2, r2, #31
 800370a:	2101      	movs	r1, #1
 800370c:	fa01 f202 	lsl.w	r2, r1, r2
 8003710:	4013      	ands	r3, r2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1ad      	bne.n	8003672 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003716:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800371a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0308 	and.w	r3, r3, #8
 8003726:	2b00      	cmp	r3, #0
 8003728:	f000 8110 	beq.w	800394c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800372c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003730:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	699b      	ldr	r3, [r3, #24]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d079      	beq.n	8003830 <HAL_RCC_OscConfig+0x760>
 800373c:	2301      	movs	r3, #1
 800373e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003742:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8003746:	fa93 f3a3 	rbit	r3, r3
 800374a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 800374e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003752:	fab3 f383 	clz	r3, r3
 8003756:	b2db      	uxtb	r3, r3
 8003758:	461a      	mov	r2, r3
 800375a:	4bab      	ldr	r3, [pc, #684]	; (8003a08 <HAL_RCC_OscConfig+0x938>)
 800375c:	4413      	add	r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	461a      	mov	r2, r3
 8003762:	2301      	movs	r3, #1
 8003764:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003766:	f7fe f86f 	bl	8001848 <HAL_GetTick>
 800376a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800376e:	e00a      	b.n	8003786 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003770:	f7fe f86a 	bl	8001848 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800377a:	1ad3      	subs	r3, r2, r3
 800377c:	2b02      	cmp	r3, #2
 800377e:	d902      	bls.n	8003786 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	f000 bcdb 	b.w	800413c <HAL_RCC_OscConfig+0x106c>
 8003786:	2302      	movs	r3, #2
 8003788:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800378c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003790:	fa93 f3a3 	rbit	r3, r3
 8003794:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003798:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800379c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80037a0:	2202      	movs	r2, #2
 80037a2:	601a      	str	r2, [r3, #0]
 80037a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037a8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	fa93 f2a3 	rbit	r2, r3
 80037b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80037ba:	601a      	str	r2, [r3, #0]
 80037bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037c4:	2202      	movs	r2, #2
 80037c6:	601a      	str	r2, [r3, #0]
 80037c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	fa93 f2a3 	rbit	r2, r3
 80037d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037da:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80037de:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037e0:	4b88      	ldr	r3, [pc, #544]	; (8003a04 <HAL_RCC_OscConfig+0x934>)
 80037e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037e8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80037ec:	2102      	movs	r1, #2
 80037ee:	6019      	str	r1, [r3, #0]
 80037f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037f4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	fa93 f1a3 	rbit	r1, r3
 80037fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003802:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003806:	6019      	str	r1, [r3, #0]
  return result;
 8003808:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800380c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	fab3 f383 	clz	r3, r3
 8003816:	b2db      	uxtb	r3, r3
 8003818:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800381c:	b2db      	uxtb	r3, r3
 800381e:	f003 031f 	and.w	r3, r3, #31
 8003822:	2101      	movs	r1, #1
 8003824:	fa01 f303 	lsl.w	r3, r1, r3
 8003828:	4013      	ands	r3, r2
 800382a:	2b00      	cmp	r3, #0
 800382c:	d0a0      	beq.n	8003770 <HAL_RCC_OscConfig+0x6a0>
 800382e:	e08d      	b.n	800394c <HAL_RCC_OscConfig+0x87c>
 8003830:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003834:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003838:	2201      	movs	r2, #1
 800383a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003840:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	fa93 f2a3 	rbit	r2, r3
 800384a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800384e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003852:	601a      	str	r2, [r3, #0]
  return result;
 8003854:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003858:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800385c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800385e:	fab3 f383 	clz	r3, r3
 8003862:	b2db      	uxtb	r3, r3
 8003864:	461a      	mov	r2, r3
 8003866:	4b68      	ldr	r3, [pc, #416]	; (8003a08 <HAL_RCC_OscConfig+0x938>)
 8003868:	4413      	add	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	461a      	mov	r2, r3
 800386e:	2300      	movs	r3, #0
 8003870:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003872:	f7fd ffe9 	bl	8001848 <HAL_GetTick>
 8003876:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800387a:	e00a      	b.n	8003892 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800387c:	f7fd ffe4 	bl	8001848 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	2b02      	cmp	r3, #2
 800388a:	d902      	bls.n	8003892 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	f000 bc55 	b.w	800413c <HAL_RCC_OscConfig+0x106c>
 8003892:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003896:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800389a:	2202      	movs	r2, #2
 800389c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800389e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038a2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	fa93 f2a3 	rbit	r2, r3
 80038ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038b0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80038b4:	601a      	str	r2, [r3, #0]
 80038b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ba:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80038be:	2202      	movs	r2, #2
 80038c0:	601a      	str	r2, [r3, #0]
 80038c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	fa93 f2a3 	rbit	r2, r3
 80038d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80038d8:	601a      	str	r2, [r3, #0]
 80038da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80038e2:	2202      	movs	r2, #2
 80038e4:	601a      	str	r2, [r3, #0]
 80038e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	fa93 f2a3 	rbit	r2, r3
 80038f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f8:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80038fc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038fe:	4b41      	ldr	r3, [pc, #260]	; (8003a04 <HAL_RCC_OscConfig+0x934>)
 8003900:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003902:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003906:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800390a:	2102      	movs	r1, #2
 800390c:	6019      	str	r1, [r3, #0]
 800390e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003912:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	fa93 f1a3 	rbit	r1, r3
 800391c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003920:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003924:	6019      	str	r1, [r3, #0]
  return result;
 8003926:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800392a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	fab3 f383 	clz	r3, r3
 8003934:	b2db      	uxtb	r3, r3
 8003936:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800393a:	b2db      	uxtb	r3, r3
 800393c:	f003 031f 	and.w	r3, r3, #31
 8003940:	2101      	movs	r1, #1
 8003942:	fa01 f303 	lsl.w	r3, r1, r3
 8003946:	4013      	ands	r3, r2
 8003948:	2b00      	cmp	r3, #0
 800394a:	d197      	bne.n	800387c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800394c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003950:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0304 	and.w	r3, r3, #4
 800395c:	2b00      	cmp	r3, #0
 800395e:	f000 81a1 	beq.w	8003ca4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003962:	2300      	movs	r3, #0
 8003964:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003968:	4b26      	ldr	r3, [pc, #152]	; (8003a04 <HAL_RCC_OscConfig+0x934>)
 800396a:	69db      	ldr	r3, [r3, #28]
 800396c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003970:	2b00      	cmp	r3, #0
 8003972:	d116      	bne.n	80039a2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003974:	4b23      	ldr	r3, [pc, #140]	; (8003a04 <HAL_RCC_OscConfig+0x934>)
 8003976:	69db      	ldr	r3, [r3, #28]
 8003978:	4a22      	ldr	r2, [pc, #136]	; (8003a04 <HAL_RCC_OscConfig+0x934>)
 800397a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800397e:	61d3      	str	r3, [r2, #28]
 8003980:	4b20      	ldr	r3, [pc, #128]	; (8003a04 <HAL_RCC_OscConfig+0x934>)
 8003982:	69db      	ldr	r3, [r3, #28]
 8003984:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003988:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800398c:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003990:	601a      	str	r2, [r3, #0]
 8003992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003996:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800399a:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800399c:	2301      	movs	r3, #1
 800399e:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a2:	4b1a      	ldr	r3, [pc, #104]	; (8003a0c <HAL_RCC_OscConfig+0x93c>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d11a      	bne.n	80039e4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039ae:	4b17      	ldr	r3, [pc, #92]	; (8003a0c <HAL_RCC_OscConfig+0x93c>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a16      	ldr	r2, [pc, #88]	; (8003a0c <HAL_RCC_OscConfig+0x93c>)
 80039b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039b8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039ba:	f7fd ff45 	bl	8001848 <HAL_GetTick>
 80039be:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c2:	e009      	b.n	80039d8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039c4:	f7fd ff40 	bl	8001848 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	2b64      	cmp	r3, #100	; 0x64
 80039d2:	d901      	bls.n	80039d8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e3b1      	b.n	800413c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039d8:	4b0c      	ldr	r3, [pc, #48]	; (8003a0c <HAL_RCC_OscConfig+0x93c>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d0ef      	beq.n	80039c4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039e8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d10d      	bne.n	8003a10 <HAL_RCC_OscConfig+0x940>
 80039f4:	4b03      	ldr	r3, [pc, #12]	; (8003a04 <HAL_RCC_OscConfig+0x934>)
 80039f6:	6a1b      	ldr	r3, [r3, #32]
 80039f8:	4a02      	ldr	r2, [pc, #8]	; (8003a04 <HAL_RCC_OscConfig+0x934>)
 80039fa:	f043 0301 	orr.w	r3, r3, #1
 80039fe:	6213      	str	r3, [r2, #32]
 8003a00:	e03c      	b.n	8003a7c <HAL_RCC_OscConfig+0x9ac>
 8003a02:	bf00      	nop
 8003a04:	40021000 	.word	0x40021000
 8003a08:	10908120 	.word	0x10908120
 8003a0c:	40007000 	.word	0x40007000
 8003a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a14:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d10c      	bne.n	8003a3a <HAL_RCC_OscConfig+0x96a>
 8003a20:	4bc1      	ldr	r3, [pc, #772]	; (8003d28 <HAL_RCC_OscConfig+0xc58>)
 8003a22:	6a1b      	ldr	r3, [r3, #32]
 8003a24:	4ac0      	ldr	r2, [pc, #768]	; (8003d28 <HAL_RCC_OscConfig+0xc58>)
 8003a26:	f023 0301 	bic.w	r3, r3, #1
 8003a2a:	6213      	str	r3, [r2, #32]
 8003a2c:	4bbe      	ldr	r3, [pc, #760]	; (8003d28 <HAL_RCC_OscConfig+0xc58>)
 8003a2e:	6a1b      	ldr	r3, [r3, #32]
 8003a30:	4abd      	ldr	r2, [pc, #756]	; (8003d28 <HAL_RCC_OscConfig+0xc58>)
 8003a32:	f023 0304 	bic.w	r3, r3, #4
 8003a36:	6213      	str	r3, [r2, #32]
 8003a38:	e020      	b.n	8003a7c <HAL_RCC_OscConfig+0x9ac>
 8003a3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68db      	ldr	r3, [r3, #12]
 8003a46:	2b05      	cmp	r3, #5
 8003a48:	d10c      	bne.n	8003a64 <HAL_RCC_OscConfig+0x994>
 8003a4a:	4bb7      	ldr	r3, [pc, #732]	; (8003d28 <HAL_RCC_OscConfig+0xc58>)
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	4ab6      	ldr	r2, [pc, #728]	; (8003d28 <HAL_RCC_OscConfig+0xc58>)
 8003a50:	f043 0304 	orr.w	r3, r3, #4
 8003a54:	6213      	str	r3, [r2, #32]
 8003a56:	4bb4      	ldr	r3, [pc, #720]	; (8003d28 <HAL_RCC_OscConfig+0xc58>)
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	4ab3      	ldr	r2, [pc, #716]	; (8003d28 <HAL_RCC_OscConfig+0xc58>)
 8003a5c:	f043 0301 	orr.w	r3, r3, #1
 8003a60:	6213      	str	r3, [r2, #32]
 8003a62:	e00b      	b.n	8003a7c <HAL_RCC_OscConfig+0x9ac>
 8003a64:	4bb0      	ldr	r3, [pc, #704]	; (8003d28 <HAL_RCC_OscConfig+0xc58>)
 8003a66:	6a1b      	ldr	r3, [r3, #32]
 8003a68:	4aaf      	ldr	r2, [pc, #700]	; (8003d28 <HAL_RCC_OscConfig+0xc58>)
 8003a6a:	f023 0301 	bic.w	r3, r3, #1
 8003a6e:	6213      	str	r3, [r2, #32]
 8003a70:	4bad      	ldr	r3, [pc, #692]	; (8003d28 <HAL_RCC_OscConfig+0xc58>)
 8003a72:	6a1b      	ldr	r3, [r3, #32]
 8003a74:	4aac      	ldr	r2, [pc, #688]	; (8003d28 <HAL_RCC_OscConfig+0xc58>)
 8003a76:	f023 0304 	bic.w	r3, r3, #4
 8003a7a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f000 8081 	beq.w	8003b90 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a8e:	f7fd fedb 	bl	8001848 <HAL_GetTick>
 8003a92:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a96:	e00b      	b.n	8003ab0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a98:	f7fd fed6 	bl	8001848 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d901      	bls.n	8003ab0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003aac:	2303      	movs	r3, #3
 8003aae:	e345      	b.n	800413c <HAL_RCC_OscConfig+0x106c>
 8003ab0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ab4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003ab8:	2202      	movs	r2, #2
 8003aba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003abc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ac0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	fa93 f2a3 	rbit	r2, r3
 8003aca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ace:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003ad2:	601a      	str	r2, [r3, #0]
 8003ad4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ad8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003adc:	2202      	movs	r2, #2
 8003ade:	601a      	str	r2, [r3, #0]
 8003ae0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ae4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	fa93 f2a3 	rbit	r2, r3
 8003aee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003af2:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003af6:	601a      	str	r2, [r3, #0]
  return result;
 8003af8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003afc:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003b00:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b02:	fab3 f383 	clz	r3, r3
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	095b      	lsrs	r3, r3, #5
 8003b0a:	b2db      	uxtb	r3, r3
 8003b0c:	f043 0302 	orr.w	r3, r3, #2
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d102      	bne.n	8003b1c <HAL_RCC_OscConfig+0xa4c>
 8003b16:	4b84      	ldr	r3, [pc, #528]	; (8003d28 <HAL_RCC_OscConfig+0xc58>)
 8003b18:	6a1b      	ldr	r3, [r3, #32]
 8003b1a:	e013      	b.n	8003b44 <HAL_RCC_OscConfig+0xa74>
 8003b1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b20:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003b24:	2202      	movs	r2, #2
 8003b26:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b2c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	fa93 f2a3 	rbit	r2, r3
 8003b36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b3a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003b3e:	601a      	str	r2, [r3, #0]
 8003b40:	4b79      	ldr	r3, [pc, #484]	; (8003d28 <HAL_RCC_OscConfig+0xc58>)
 8003b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b44:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b48:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003b4c:	2102      	movs	r1, #2
 8003b4e:	6011      	str	r1, [r2, #0]
 8003b50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b54:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003b58:	6812      	ldr	r2, [r2, #0]
 8003b5a:	fa92 f1a2 	rbit	r1, r2
 8003b5e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b62:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003b66:	6011      	str	r1, [r2, #0]
  return result;
 8003b68:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b6c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003b70:	6812      	ldr	r2, [r2, #0]
 8003b72:	fab2 f282 	clz	r2, r2
 8003b76:	b2d2      	uxtb	r2, r2
 8003b78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b7c:	b2d2      	uxtb	r2, r2
 8003b7e:	f002 021f 	and.w	r2, r2, #31
 8003b82:	2101      	movs	r1, #1
 8003b84:	fa01 f202 	lsl.w	r2, r1, r2
 8003b88:	4013      	ands	r3, r2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d084      	beq.n	8003a98 <HAL_RCC_OscConfig+0x9c8>
 8003b8e:	e07f      	b.n	8003c90 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b90:	f7fd fe5a 	bl	8001848 <HAL_GetTick>
 8003b94:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b98:	e00b      	b.n	8003bb2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b9a:	f7fd fe55 	bl	8001848 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e2c4      	b.n	800413c <HAL_RCC_OscConfig+0x106c>
 8003bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bb6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003bba:	2202      	movs	r2, #2
 8003bbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bc2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	fa93 f2a3 	rbit	r2, r3
 8003bcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bd0:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003bd4:	601a      	str	r2, [r3, #0]
 8003bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bda:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003bde:	2202      	movs	r2, #2
 8003be0:	601a      	str	r2, [r3, #0]
 8003be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003be6:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	fa93 f2a3 	rbit	r2, r3
 8003bf0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bf4:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003bf8:	601a      	str	r2, [r3, #0]
  return result;
 8003bfa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bfe:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003c02:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c04:	fab3 f383 	clz	r3, r3
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	095b      	lsrs	r3, r3, #5
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	f043 0302 	orr.w	r3, r3, #2
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	d102      	bne.n	8003c1e <HAL_RCC_OscConfig+0xb4e>
 8003c18:	4b43      	ldr	r3, [pc, #268]	; (8003d28 <HAL_RCC_OscConfig+0xc58>)
 8003c1a:	6a1b      	ldr	r3, [r3, #32]
 8003c1c:	e013      	b.n	8003c46 <HAL_RCC_OscConfig+0xb76>
 8003c1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c22:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003c26:	2202      	movs	r2, #2
 8003c28:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c2e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	fa93 f2a3 	rbit	r2, r3
 8003c38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c3c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	4b39      	ldr	r3, [pc, #228]	; (8003d28 <HAL_RCC_OscConfig+0xc58>)
 8003c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c4a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003c4e:	2102      	movs	r1, #2
 8003c50:	6011      	str	r1, [r2, #0]
 8003c52:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c56:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003c5a:	6812      	ldr	r2, [r2, #0]
 8003c5c:	fa92 f1a2 	rbit	r1, r2
 8003c60:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c64:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003c68:	6011      	str	r1, [r2, #0]
  return result;
 8003c6a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c6e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003c72:	6812      	ldr	r2, [r2, #0]
 8003c74:	fab2 f282 	clz	r2, r2
 8003c78:	b2d2      	uxtb	r2, r2
 8003c7a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c7e:	b2d2      	uxtb	r2, r2
 8003c80:	f002 021f 	and.w	r2, r2, #31
 8003c84:	2101      	movs	r1, #1
 8003c86:	fa01 f202 	lsl.w	r2, r1, r2
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d184      	bne.n	8003b9a <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003c90:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d105      	bne.n	8003ca4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c98:	4b23      	ldr	r3, [pc, #140]	; (8003d28 <HAL_RCC_OscConfig+0xc58>)
 8003c9a:	69db      	ldr	r3, [r3, #28]
 8003c9c:	4a22      	ldr	r2, [pc, #136]	; (8003d28 <HAL_RCC_OscConfig+0xc58>)
 8003c9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ca2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ca4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ca8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	69db      	ldr	r3, [r3, #28]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 8242 	beq.w	800413a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003cb6:	4b1c      	ldr	r3, [pc, #112]	; (8003d28 <HAL_RCC_OscConfig+0xc58>)
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	f003 030c 	and.w	r3, r3, #12
 8003cbe:	2b08      	cmp	r3, #8
 8003cc0:	f000 8213 	beq.w	80040ea <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003cc4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cc8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	69db      	ldr	r3, [r3, #28]
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	f040 8162 	bne.w	8003f9a <HAL_RCC_OscConfig+0xeca>
 8003cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cda:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003cde:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ce2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ce8:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	fa93 f2a3 	rbit	r2, r3
 8003cf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cf6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003cfa:	601a      	str	r2, [r3, #0]
  return result;
 8003cfc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d00:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003d04:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d06:	fab3 f383 	clz	r3, r3
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d10:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	461a      	mov	r2, r3
 8003d18:	2300      	movs	r3, #0
 8003d1a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d1c:	f7fd fd94 	bl	8001848 <HAL_GetTick>
 8003d20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d24:	e00c      	b.n	8003d40 <HAL_RCC_OscConfig+0xc70>
 8003d26:	bf00      	nop
 8003d28:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d2c:	f7fd fd8c 	bl	8001848 <HAL_GetTick>
 8003d30:	4602      	mov	r2, r0
 8003d32:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d901      	bls.n	8003d40 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e1fd      	b.n	800413c <HAL_RCC_OscConfig+0x106c>
 8003d40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d44:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003d48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d52:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	fa93 f2a3 	rbit	r2, r3
 8003d5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d60:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003d64:	601a      	str	r2, [r3, #0]
  return result;
 8003d66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d6a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003d6e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d70:	fab3 f383 	clz	r3, r3
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	095b      	lsrs	r3, r3, #5
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	f043 0301 	orr.w	r3, r3, #1
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d102      	bne.n	8003d8a <HAL_RCC_OscConfig+0xcba>
 8003d84:	4bb0      	ldr	r3, [pc, #704]	; (8004048 <HAL_RCC_OscConfig+0xf78>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	e027      	b.n	8003dda <HAL_RCC_OscConfig+0xd0a>
 8003d8a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d8e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003d92:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d96:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d9c:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	fa93 f2a3 	rbit	r2, r3
 8003da6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003daa:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003dae:	601a      	str	r2, [r3, #0]
 8003db0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003db4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003db8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003dbc:	601a      	str	r2, [r3, #0]
 8003dbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dc2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	fa93 f2a3 	rbit	r2, r3
 8003dcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dd0:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003dd4:	601a      	str	r2, [r3, #0]
 8003dd6:	4b9c      	ldr	r3, [pc, #624]	; (8004048 <HAL_RCC_OscConfig+0xf78>)
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dda:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003dde:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003de2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003de6:	6011      	str	r1, [r2, #0]
 8003de8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003dec:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003df0:	6812      	ldr	r2, [r2, #0]
 8003df2:	fa92 f1a2 	rbit	r1, r2
 8003df6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003dfa:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003dfe:	6011      	str	r1, [r2, #0]
  return result;
 8003e00:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003e04:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003e08:	6812      	ldr	r2, [r2, #0]
 8003e0a:	fab2 f282 	clz	r2, r2
 8003e0e:	b2d2      	uxtb	r2, r2
 8003e10:	f042 0220 	orr.w	r2, r2, #32
 8003e14:	b2d2      	uxtb	r2, r2
 8003e16:	f002 021f 	and.w	r2, r2, #31
 8003e1a:	2101      	movs	r1, #1
 8003e1c:	fa01 f202 	lsl.w	r2, r1, r2
 8003e20:	4013      	ands	r3, r2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d182      	bne.n	8003d2c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e26:	4b88      	ldr	r3, [pc, #544]	; (8004048 <HAL_RCC_OscConfig+0xf78>)
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003e2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003e3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6a1b      	ldr	r3, [r3, #32]
 8003e46:	430b      	orrs	r3, r1
 8003e48:	497f      	ldr	r1, [pc, #508]	; (8004048 <HAL_RCC_OscConfig+0xf78>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	604b      	str	r3, [r1, #4]
 8003e4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e52:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003e56:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003e5a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e60:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	fa93 f2a3 	rbit	r2, r3
 8003e6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e6e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003e72:	601a      	str	r2, [r3, #0]
  return result;
 8003e74:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e78:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003e7c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e7e:	fab3 f383 	clz	r3, r3
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e88:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	461a      	mov	r2, r3
 8003e90:	2301      	movs	r3, #1
 8003e92:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e94:	f7fd fcd8 	bl	8001848 <HAL_GetTick>
 8003e98:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003e9c:	e009      	b.n	8003eb2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e9e:	f7fd fcd3 	bl	8001848 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	d901      	bls.n	8003eb2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e144      	b.n	800413c <HAL_RCC_OscConfig+0x106c>
 8003eb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eb6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003eba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ebe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ec4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	fa93 f2a3 	rbit	r2, r3
 8003ece:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ed2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003ed6:	601a      	str	r2, [r3, #0]
  return result;
 8003ed8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003edc:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003ee0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ee2:	fab3 f383 	clz	r3, r3
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	095b      	lsrs	r3, r3, #5
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	f043 0301 	orr.w	r3, r3, #1
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d102      	bne.n	8003efc <HAL_RCC_OscConfig+0xe2c>
 8003ef6:	4b54      	ldr	r3, [pc, #336]	; (8004048 <HAL_RCC_OscConfig+0xf78>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	e027      	b.n	8003f4c <HAL_RCC_OscConfig+0xe7c>
 8003efc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f00:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003f04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f08:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f0e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	fa93 f2a3 	rbit	r2, r3
 8003f18:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f1c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003f20:	601a      	str	r2, [r3, #0]
 8003f22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f26:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003f2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003f2e:	601a      	str	r2, [r3, #0]
 8003f30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f34:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	fa93 f2a3 	rbit	r2, r3
 8003f3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f42:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003f46:	601a      	str	r2, [r3, #0]
 8003f48:	4b3f      	ldr	r3, [pc, #252]	; (8004048 <HAL_RCC_OscConfig+0xf78>)
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f50:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003f54:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003f58:	6011      	str	r1, [r2, #0]
 8003f5a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f5e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003f62:	6812      	ldr	r2, [r2, #0]
 8003f64:	fa92 f1a2 	rbit	r1, r2
 8003f68:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f6c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003f70:	6011      	str	r1, [r2, #0]
  return result;
 8003f72:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003f76:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003f7a:	6812      	ldr	r2, [r2, #0]
 8003f7c:	fab2 f282 	clz	r2, r2
 8003f80:	b2d2      	uxtb	r2, r2
 8003f82:	f042 0220 	orr.w	r2, r2, #32
 8003f86:	b2d2      	uxtb	r2, r2
 8003f88:	f002 021f 	and.w	r2, r2, #31
 8003f8c:	2101      	movs	r1, #1
 8003f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8003f92:	4013      	ands	r3, r2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d082      	beq.n	8003e9e <HAL_RCC_OscConfig+0xdce>
 8003f98:	e0cf      	b.n	800413a <HAL_RCC_OscConfig+0x106a>
 8003f9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f9e:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003fa2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003fa6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fac:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	fa93 f2a3 	rbit	r2, r3
 8003fb6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fba:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003fbe:	601a      	str	r2, [r3, #0]
  return result;
 8003fc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fc4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003fc8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fca:	fab3 f383 	clz	r3, r3
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003fd4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	461a      	mov	r2, r3
 8003fdc:	2300      	movs	r3, #0
 8003fde:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe0:	f7fd fc32 	bl	8001848 <HAL_GetTick>
 8003fe4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003fe8:	e009      	b.n	8003ffe <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fea:	f7fd fc2d 	bl	8001848 <HAL_GetTick>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e09e      	b.n	800413c <HAL_RCC_OscConfig+0x106c>
 8003ffe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004002:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004006:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800400a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800400c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004010:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	fa93 f2a3 	rbit	r2, r3
 800401a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800401e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004022:	601a      	str	r2, [r3, #0]
  return result;
 8004024:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004028:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800402c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800402e:	fab3 f383 	clz	r3, r3
 8004032:	b2db      	uxtb	r3, r3
 8004034:	095b      	lsrs	r3, r3, #5
 8004036:	b2db      	uxtb	r3, r3
 8004038:	f043 0301 	orr.w	r3, r3, #1
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b01      	cmp	r3, #1
 8004040:	d104      	bne.n	800404c <HAL_RCC_OscConfig+0xf7c>
 8004042:	4b01      	ldr	r3, [pc, #4]	; (8004048 <HAL_RCC_OscConfig+0xf78>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	e029      	b.n	800409c <HAL_RCC_OscConfig+0xfcc>
 8004048:	40021000 	.word	0x40021000
 800404c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004050:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004054:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004058:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800405a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800405e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	fa93 f2a3 	rbit	r2, r3
 8004068:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800406c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004070:	601a      	str	r2, [r3, #0]
 8004072:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004076:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800407a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800407e:	601a      	str	r2, [r3, #0]
 8004080:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004084:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	fa93 f2a3 	rbit	r2, r3
 800408e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004092:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8004096:	601a      	str	r2, [r3, #0]
 8004098:	4b2b      	ldr	r3, [pc, #172]	; (8004148 <HAL_RCC_OscConfig+0x1078>)
 800409a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040a0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80040a4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80040a8:	6011      	str	r1, [r2, #0]
 80040aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040ae:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80040b2:	6812      	ldr	r2, [r2, #0]
 80040b4:	fa92 f1a2 	rbit	r1, r2
 80040b8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040bc:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80040c0:	6011      	str	r1, [r2, #0]
  return result;
 80040c2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80040c6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80040ca:	6812      	ldr	r2, [r2, #0]
 80040cc:	fab2 f282 	clz	r2, r2
 80040d0:	b2d2      	uxtb	r2, r2
 80040d2:	f042 0220 	orr.w	r2, r2, #32
 80040d6:	b2d2      	uxtb	r2, r2
 80040d8:	f002 021f 	and.w	r2, r2, #31
 80040dc:	2101      	movs	r1, #1
 80040de:	fa01 f202 	lsl.w	r2, r1, r2
 80040e2:	4013      	ands	r3, r2
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d180      	bne.n	8003fea <HAL_RCC_OscConfig+0xf1a>
 80040e8:	e027      	b.n	800413a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	69db      	ldr	r3, [r3, #28]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d101      	bne.n	80040fe <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80040fa:	2301      	movs	r3, #1
 80040fc:	e01e      	b.n	800413c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80040fe:	4b12      	ldr	r3, [pc, #72]	; (8004148 <HAL_RCC_OscConfig+0x1078>)
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004106:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800410a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800410e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004112:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	429a      	cmp	r2, r3
 800411c:	d10b      	bne.n	8004136 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800411e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004122:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004126:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800412a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004132:	429a      	cmp	r2, r3
 8004134:	d001      	beq.n	800413a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e000      	b.n	800413c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	40021000 	.word	0x40021000

0800414c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b09e      	sub	sp, #120	; 0x78
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004156:	2300      	movs	r3, #0
 8004158:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d101      	bne.n	8004164 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e162      	b.n	800442a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004164:	4b90      	ldr	r3, [pc, #576]	; (80043a8 <HAL_RCC_ClockConfig+0x25c>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0307 	and.w	r3, r3, #7
 800416c:	683a      	ldr	r2, [r7, #0]
 800416e:	429a      	cmp	r2, r3
 8004170:	d910      	bls.n	8004194 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004172:	4b8d      	ldr	r3, [pc, #564]	; (80043a8 <HAL_RCC_ClockConfig+0x25c>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f023 0207 	bic.w	r2, r3, #7
 800417a:	498b      	ldr	r1, [pc, #556]	; (80043a8 <HAL_RCC_ClockConfig+0x25c>)
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	4313      	orrs	r3, r2
 8004180:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004182:	4b89      	ldr	r3, [pc, #548]	; (80043a8 <HAL_RCC_ClockConfig+0x25c>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f003 0307 	and.w	r3, r3, #7
 800418a:	683a      	ldr	r2, [r7, #0]
 800418c:	429a      	cmp	r2, r3
 800418e:	d001      	beq.n	8004194 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e14a      	b.n	800442a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0302 	and.w	r3, r3, #2
 800419c:	2b00      	cmp	r3, #0
 800419e:	d008      	beq.n	80041b2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80041a0:	4b82      	ldr	r3, [pc, #520]	; (80043ac <HAL_RCC_ClockConfig+0x260>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	497f      	ldr	r1, [pc, #508]	; (80043ac <HAL_RCC_ClockConfig+0x260>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f000 80dc 	beq.w	8004378 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d13c      	bne.n	8004242 <HAL_RCC_ClockConfig+0xf6>
 80041c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041cc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041d0:	fa93 f3a3 	rbit	r3, r3
 80041d4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80041d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041d8:	fab3 f383 	clz	r3, r3
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	095b      	lsrs	r3, r3, #5
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	f043 0301 	orr.w	r3, r3, #1
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d102      	bne.n	80041f2 <HAL_RCC_ClockConfig+0xa6>
 80041ec:	4b6f      	ldr	r3, [pc, #444]	; (80043ac <HAL_RCC_ClockConfig+0x260>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	e00f      	b.n	8004212 <HAL_RCC_ClockConfig+0xc6>
 80041f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80041f6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041fa:	fa93 f3a3 	rbit	r3, r3
 80041fe:	667b      	str	r3, [r7, #100]	; 0x64
 8004200:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004204:	663b      	str	r3, [r7, #96]	; 0x60
 8004206:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004208:	fa93 f3a3 	rbit	r3, r3
 800420c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800420e:	4b67      	ldr	r3, [pc, #412]	; (80043ac <HAL_RCC_ClockConfig+0x260>)
 8004210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004212:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004216:	65ba      	str	r2, [r7, #88]	; 0x58
 8004218:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800421a:	fa92 f2a2 	rbit	r2, r2
 800421e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004220:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004222:	fab2 f282 	clz	r2, r2
 8004226:	b2d2      	uxtb	r2, r2
 8004228:	f042 0220 	orr.w	r2, r2, #32
 800422c:	b2d2      	uxtb	r2, r2
 800422e:	f002 021f 	and.w	r2, r2, #31
 8004232:	2101      	movs	r1, #1
 8004234:	fa01 f202 	lsl.w	r2, r1, r2
 8004238:	4013      	ands	r3, r2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d17b      	bne.n	8004336 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e0f3      	b.n	800442a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	2b02      	cmp	r3, #2
 8004248:	d13c      	bne.n	80042c4 <HAL_RCC_ClockConfig+0x178>
 800424a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800424e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004250:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004252:	fa93 f3a3 	rbit	r3, r3
 8004256:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004258:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800425a:	fab3 f383 	clz	r3, r3
 800425e:	b2db      	uxtb	r3, r3
 8004260:	095b      	lsrs	r3, r3, #5
 8004262:	b2db      	uxtb	r3, r3
 8004264:	f043 0301 	orr.w	r3, r3, #1
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b01      	cmp	r3, #1
 800426c:	d102      	bne.n	8004274 <HAL_RCC_ClockConfig+0x128>
 800426e:	4b4f      	ldr	r3, [pc, #316]	; (80043ac <HAL_RCC_ClockConfig+0x260>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	e00f      	b.n	8004294 <HAL_RCC_ClockConfig+0x148>
 8004274:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004278:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800427a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800427c:	fa93 f3a3 	rbit	r3, r3
 8004280:	647b      	str	r3, [r7, #68]	; 0x44
 8004282:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004286:	643b      	str	r3, [r7, #64]	; 0x40
 8004288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800428a:	fa93 f3a3 	rbit	r3, r3
 800428e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004290:	4b46      	ldr	r3, [pc, #280]	; (80043ac <HAL_RCC_ClockConfig+0x260>)
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004298:	63ba      	str	r2, [r7, #56]	; 0x38
 800429a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800429c:	fa92 f2a2 	rbit	r2, r2
 80042a0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80042a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042a4:	fab2 f282 	clz	r2, r2
 80042a8:	b2d2      	uxtb	r2, r2
 80042aa:	f042 0220 	orr.w	r2, r2, #32
 80042ae:	b2d2      	uxtb	r2, r2
 80042b0:	f002 021f 	and.w	r2, r2, #31
 80042b4:	2101      	movs	r1, #1
 80042b6:	fa01 f202 	lsl.w	r2, r1, r2
 80042ba:	4013      	ands	r3, r2
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d13a      	bne.n	8004336 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e0b2      	b.n	800442a <HAL_RCC_ClockConfig+0x2de>
 80042c4:	2302      	movs	r3, #2
 80042c6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ca:	fa93 f3a3 	rbit	r3, r3
 80042ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80042d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042d2:	fab3 f383 	clz	r3, r3
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	095b      	lsrs	r3, r3, #5
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	f043 0301 	orr.w	r3, r3, #1
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d102      	bne.n	80042ec <HAL_RCC_ClockConfig+0x1a0>
 80042e6:	4b31      	ldr	r3, [pc, #196]	; (80043ac <HAL_RCC_ClockConfig+0x260>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	e00d      	b.n	8004308 <HAL_RCC_ClockConfig+0x1bc>
 80042ec:	2302      	movs	r3, #2
 80042ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f2:	fa93 f3a3 	rbit	r3, r3
 80042f6:	627b      	str	r3, [r7, #36]	; 0x24
 80042f8:	2302      	movs	r3, #2
 80042fa:	623b      	str	r3, [r7, #32]
 80042fc:	6a3b      	ldr	r3, [r7, #32]
 80042fe:	fa93 f3a3 	rbit	r3, r3
 8004302:	61fb      	str	r3, [r7, #28]
 8004304:	4b29      	ldr	r3, [pc, #164]	; (80043ac <HAL_RCC_ClockConfig+0x260>)
 8004306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004308:	2202      	movs	r2, #2
 800430a:	61ba      	str	r2, [r7, #24]
 800430c:	69ba      	ldr	r2, [r7, #24]
 800430e:	fa92 f2a2 	rbit	r2, r2
 8004312:	617a      	str	r2, [r7, #20]
  return result;
 8004314:	697a      	ldr	r2, [r7, #20]
 8004316:	fab2 f282 	clz	r2, r2
 800431a:	b2d2      	uxtb	r2, r2
 800431c:	f042 0220 	orr.w	r2, r2, #32
 8004320:	b2d2      	uxtb	r2, r2
 8004322:	f002 021f 	and.w	r2, r2, #31
 8004326:	2101      	movs	r1, #1
 8004328:	fa01 f202 	lsl.w	r2, r1, r2
 800432c:	4013      	ands	r3, r2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e079      	b.n	800442a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004336:	4b1d      	ldr	r3, [pc, #116]	; (80043ac <HAL_RCC_ClockConfig+0x260>)
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	f023 0203 	bic.w	r2, r3, #3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	491a      	ldr	r1, [pc, #104]	; (80043ac <HAL_RCC_ClockConfig+0x260>)
 8004344:	4313      	orrs	r3, r2
 8004346:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004348:	f7fd fa7e 	bl	8001848 <HAL_GetTick>
 800434c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800434e:	e00a      	b.n	8004366 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004350:	f7fd fa7a 	bl	8001848 <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	f241 3288 	movw	r2, #5000	; 0x1388
 800435e:	4293      	cmp	r3, r2
 8004360:	d901      	bls.n	8004366 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e061      	b.n	800442a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004366:	4b11      	ldr	r3, [pc, #68]	; (80043ac <HAL_RCC_ClockConfig+0x260>)
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	f003 020c 	and.w	r2, r3, #12
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	429a      	cmp	r2, r3
 8004376:	d1eb      	bne.n	8004350 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004378:	4b0b      	ldr	r3, [pc, #44]	; (80043a8 <HAL_RCC_ClockConfig+0x25c>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0307 	and.w	r3, r3, #7
 8004380:	683a      	ldr	r2, [r7, #0]
 8004382:	429a      	cmp	r2, r3
 8004384:	d214      	bcs.n	80043b0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004386:	4b08      	ldr	r3, [pc, #32]	; (80043a8 <HAL_RCC_ClockConfig+0x25c>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f023 0207 	bic.w	r2, r3, #7
 800438e:	4906      	ldr	r1, [pc, #24]	; (80043a8 <HAL_RCC_ClockConfig+0x25c>)
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	4313      	orrs	r3, r2
 8004394:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004396:	4b04      	ldr	r3, [pc, #16]	; (80043a8 <HAL_RCC_ClockConfig+0x25c>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 0307 	and.w	r3, r3, #7
 800439e:	683a      	ldr	r2, [r7, #0]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d005      	beq.n	80043b0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e040      	b.n	800442a <HAL_RCC_ClockConfig+0x2de>
 80043a8:	40022000 	.word	0x40022000
 80043ac:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0304 	and.w	r3, r3, #4
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d008      	beq.n	80043ce <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043bc:	4b1d      	ldr	r3, [pc, #116]	; (8004434 <HAL_RCC_ClockConfig+0x2e8>)
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	491a      	ldr	r1, [pc, #104]	; (8004434 <HAL_RCC_ClockConfig+0x2e8>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0308 	and.w	r3, r3, #8
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d009      	beq.n	80043ee <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043da:	4b16      	ldr	r3, [pc, #88]	; (8004434 <HAL_RCC_ClockConfig+0x2e8>)
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	4912      	ldr	r1, [pc, #72]	; (8004434 <HAL_RCC_ClockConfig+0x2e8>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80043ee:	f000 f829 	bl	8004444 <HAL_RCC_GetSysClockFreq>
 80043f2:	4601      	mov	r1, r0
 80043f4:	4b0f      	ldr	r3, [pc, #60]	; (8004434 <HAL_RCC_ClockConfig+0x2e8>)
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043fc:	22f0      	movs	r2, #240	; 0xf0
 80043fe:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004400:	693a      	ldr	r2, [r7, #16]
 8004402:	fa92 f2a2 	rbit	r2, r2
 8004406:	60fa      	str	r2, [r7, #12]
  return result;
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	fab2 f282 	clz	r2, r2
 800440e:	b2d2      	uxtb	r2, r2
 8004410:	40d3      	lsrs	r3, r2
 8004412:	4a09      	ldr	r2, [pc, #36]	; (8004438 <HAL_RCC_ClockConfig+0x2ec>)
 8004414:	5cd3      	ldrb	r3, [r2, r3]
 8004416:	fa21 f303 	lsr.w	r3, r1, r3
 800441a:	4a08      	ldr	r2, [pc, #32]	; (800443c <HAL_RCC_ClockConfig+0x2f0>)
 800441c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800441e:	4b08      	ldr	r3, [pc, #32]	; (8004440 <HAL_RCC_ClockConfig+0x2f4>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4618      	mov	r0, r3
 8004424:	f7fd f9cc 	bl	80017c0 <HAL_InitTick>
  
  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3778      	adds	r7, #120	; 0x78
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	40021000 	.word	0x40021000
 8004438:	0800920c 	.word	0x0800920c
 800443c:	20000020 	.word	0x20000020
 8004440:	20000024 	.word	0x20000024

08004444 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004444:	b480      	push	{r7}
 8004446:	b08b      	sub	sp, #44	; 0x2c
 8004448:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800444a:	2300      	movs	r3, #0
 800444c:	61fb      	str	r3, [r7, #28]
 800444e:	2300      	movs	r3, #0
 8004450:	61bb      	str	r3, [r7, #24]
 8004452:	2300      	movs	r3, #0
 8004454:	627b      	str	r3, [r7, #36]	; 0x24
 8004456:	2300      	movs	r3, #0
 8004458:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800445a:	2300      	movs	r3, #0
 800445c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800445e:	4b29      	ldr	r3, [pc, #164]	; (8004504 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	f003 030c 	and.w	r3, r3, #12
 800446a:	2b04      	cmp	r3, #4
 800446c:	d002      	beq.n	8004474 <HAL_RCC_GetSysClockFreq+0x30>
 800446e:	2b08      	cmp	r3, #8
 8004470:	d003      	beq.n	800447a <HAL_RCC_GetSysClockFreq+0x36>
 8004472:	e03c      	b.n	80044ee <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004474:	4b24      	ldr	r3, [pc, #144]	; (8004508 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004476:	623b      	str	r3, [r7, #32]
      break;
 8004478:	e03c      	b.n	80044f4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004480:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004484:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	fa92 f2a2 	rbit	r2, r2
 800448c:	607a      	str	r2, [r7, #4]
  return result;
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	fab2 f282 	clz	r2, r2
 8004494:	b2d2      	uxtb	r2, r2
 8004496:	40d3      	lsrs	r3, r2
 8004498:	4a1c      	ldr	r2, [pc, #112]	; (800450c <HAL_RCC_GetSysClockFreq+0xc8>)
 800449a:	5cd3      	ldrb	r3, [r2, r3]
 800449c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800449e:	4b19      	ldr	r3, [pc, #100]	; (8004504 <HAL_RCC_GetSysClockFreq+0xc0>)
 80044a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a2:	f003 030f 	and.w	r3, r3, #15
 80044a6:	220f      	movs	r2, #15
 80044a8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	fa92 f2a2 	rbit	r2, r2
 80044b0:	60fa      	str	r2, [r7, #12]
  return result;
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	fab2 f282 	clz	r2, r2
 80044b8:	b2d2      	uxtb	r2, r2
 80044ba:	40d3      	lsrs	r3, r2
 80044bc:	4a14      	ldr	r2, [pc, #80]	; (8004510 <HAL_RCC_GetSysClockFreq+0xcc>)
 80044be:	5cd3      	ldrb	r3, [r2, r3]
 80044c0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d008      	beq.n	80044de <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80044cc:	4a0e      	ldr	r2, [pc, #56]	; (8004508 <HAL_RCC_GetSysClockFreq+0xc4>)
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	fb02 f303 	mul.w	r3, r2, r3
 80044da:	627b      	str	r3, [r7, #36]	; 0x24
 80044dc:	e004      	b.n	80044e8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	4a0c      	ldr	r2, [pc, #48]	; (8004514 <HAL_RCC_GetSysClockFreq+0xd0>)
 80044e2:	fb02 f303 	mul.w	r3, r2, r3
 80044e6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80044e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ea:	623b      	str	r3, [r7, #32]
      break;
 80044ec:	e002      	b.n	80044f4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80044ee:	4b0a      	ldr	r3, [pc, #40]	; (8004518 <HAL_RCC_GetSysClockFreq+0xd4>)
 80044f0:	623b      	str	r3, [r7, #32]
      break;
 80044f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044f4:	6a3b      	ldr	r3, [r7, #32]
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	372c      	adds	r7, #44	; 0x2c
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	40021000 	.word	0x40021000
 8004508:	01e84800 	.word	0x01e84800
 800450c:	08009224 	.word	0x08009224
 8004510:	08009234 	.word	0x08009234
 8004514:	003d0900 	.word	0x003d0900
 8004518:	007a1200 	.word	0x007a1200

0800451c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800451c:	b480      	push	{r7}
 800451e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004520:	4b03      	ldr	r3, [pc, #12]	; (8004530 <HAL_RCC_GetHCLKFreq+0x14>)
 8004522:	681b      	ldr	r3, [r3, #0]
}
 8004524:	4618      	mov	r0, r3
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	20000020 	.word	0x20000020

08004534 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b082      	sub	sp, #8
 8004538:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800453a:	f7ff ffef 	bl	800451c <HAL_RCC_GetHCLKFreq>
 800453e:	4601      	mov	r1, r0
 8004540:	4b0b      	ldr	r3, [pc, #44]	; (8004570 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004548:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800454c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	fa92 f2a2 	rbit	r2, r2
 8004554:	603a      	str	r2, [r7, #0]
  return result;
 8004556:	683a      	ldr	r2, [r7, #0]
 8004558:	fab2 f282 	clz	r2, r2
 800455c:	b2d2      	uxtb	r2, r2
 800455e:	40d3      	lsrs	r3, r2
 8004560:	4a04      	ldr	r2, [pc, #16]	; (8004574 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004562:	5cd3      	ldrb	r3, [r2, r3]
 8004564:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004568:	4618      	mov	r0, r3
 800456a:	3708      	adds	r7, #8
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}
 8004570:	40021000 	.word	0x40021000
 8004574:	0800921c 	.word	0x0800921c

08004578 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800457e:	f7ff ffcd 	bl	800451c <HAL_RCC_GetHCLKFreq>
 8004582:	4601      	mov	r1, r0
 8004584:	4b0b      	ldr	r3, [pc, #44]	; (80045b4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800458c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004590:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	fa92 f2a2 	rbit	r2, r2
 8004598:	603a      	str	r2, [r7, #0]
  return result;
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	fab2 f282 	clz	r2, r2
 80045a0:	b2d2      	uxtb	r2, r2
 80045a2:	40d3      	lsrs	r3, r2
 80045a4:	4a04      	ldr	r2, [pc, #16]	; (80045b8 <HAL_RCC_GetPCLK2Freq+0x40>)
 80045a6:	5cd3      	ldrb	r3, [r2, r3]
 80045a8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80045ac:	4618      	mov	r0, r3
 80045ae:	3708      	adds	r7, #8
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}
 80045b4:	40021000 	.word	0x40021000
 80045b8:	0800921c 	.word	0x0800921c

080045bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d101      	bne.n	80045ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e049      	b.n	8004662 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d106      	bne.n	80045e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f7fd f81a 	bl	800161c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2202      	movs	r2, #2
 80045ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	3304      	adds	r3, #4
 80045f8:	4619      	mov	r1, r3
 80045fa:	4610      	mov	r0, r2
 80045fc:	f000 f954 	bl	80048a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3708      	adds	r7, #8
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
	...

0800466c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800467a:	b2db      	uxtb	r3, r3
 800467c:	2b01      	cmp	r3, #1
 800467e:	d001      	beq.n	8004684 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	e038      	b.n	80046f6 <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2202      	movs	r2, #2
 8004688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a1c      	ldr	r2, [pc, #112]	; (8004704 <HAL_TIM_Base_Start+0x98>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d00e      	beq.n	80046b4 <HAL_TIM_Base_Start+0x48>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800469e:	d009      	beq.n	80046b4 <HAL_TIM_Base_Start+0x48>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a18      	ldr	r2, [pc, #96]	; (8004708 <HAL_TIM_Base_Start+0x9c>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d004      	beq.n	80046b4 <HAL_TIM_Base_Start+0x48>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a17      	ldr	r2, [pc, #92]	; (800470c <HAL_TIM_Base_Start+0xa0>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d115      	bne.n	80046e0 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	689a      	ldr	r2, [r3, #8]
 80046ba:	4b15      	ldr	r3, [pc, #84]	; (8004710 <HAL_TIM_Base_Start+0xa4>)
 80046bc:	4013      	ands	r3, r2
 80046be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	2b06      	cmp	r3, #6
 80046c4:	d015      	beq.n	80046f2 <HAL_TIM_Base_Start+0x86>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046cc:	d011      	beq.n	80046f2 <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f042 0201 	orr.w	r2, r2, #1
 80046dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046de:	e008      	b.n	80046f2 <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f042 0201 	orr.w	r2, r2, #1
 80046ee:	601a      	str	r2, [r3, #0]
 80046f0:	e000      	b.n	80046f4 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3714      	adds	r7, #20
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	40012c00 	.word	0x40012c00
 8004708:	40000400 	.word	0x40000400
 800470c:	40014000 	.word	0x40014000
 8004710:	00010007 	.word	0x00010007

08004714 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800471e:	2300      	movs	r3, #0
 8004720:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004728:	2b01      	cmp	r3, #1
 800472a:	d101      	bne.n	8004730 <HAL_TIM_ConfigClockSource+0x1c>
 800472c:	2302      	movs	r3, #2
 800472e:	e0b6      	b.n	800489e <HAL_TIM_ConfigClockSource+0x18a>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2202      	movs	r2, #2
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800474e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004752:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800475a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68ba      	ldr	r2, [r7, #8]
 8004762:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800476c:	d03e      	beq.n	80047ec <HAL_TIM_ConfigClockSource+0xd8>
 800476e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004772:	f200 8087 	bhi.w	8004884 <HAL_TIM_ConfigClockSource+0x170>
 8004776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800477a:	f000 8086 	beq.w	800488a <HAL_TIM_ConfigClockSource+0x176>
 800477e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004782:	d87f      	bhi.n	8004884 <HAL_TIM_ConfigClockSource+0x170>
 8004784:	2b70      	cmp	r3, #112	; 0x70
 8004786:	d01a      	beq.n	80047be <HAL_TIM_ConfigClockSource+0xaa>
 8004788:	2b70      	cmp	r3, #112	; 0x70
 800478a:	d87b      	bhi.n	8004884 <HAL_TIM_ConfigClockSource+0x170>
 800478c:	2b60      	cmp	r3, #96	; 0x60
 800478e:	d050      	beq.n	8004832 <HAL_TIM_ConfigClockSource+0x11e>
 8004790:	2b60      	cmp	r3, #96	; 0x60
 8004792:	d877      	bhi.n	8004884 <HAL_TIM_ConfigClockSource+0x170>
 8004794:	2b50      	cmp	r3, #80	; 0x50
 8004796:	d03c      	beq.n	8004812 <HAL_TIM_ConfigClockSource+0xfe>
 8004798:	2b50      	cmp	r3, #80	; 0x50
 800479a:	d873      	bhi.n	8004884 <HAL_TIM_ConfigClockSource+0x170>
 800479c:	2b40      	cmp	r3, #64	; 0x40
 800479e:	d058      	beq.n	8004852 <HAL_TIM_ConfigClockSource+0x13e>
 80047a0:	2b40      	cmp	r3, #64	; 0x40
 80047a2:	d86f      	bhi.n	8004884 <HAL_TIM_ConfigClockSource+0x170>
 80047a4:	2b30      	cmp	r3, #48	; 0x30
 80047a6:	d064      	beq.n	8004872 <HAL_TIM_ConfigClockSource+0x15e>
 80047a8:	2b30      	cmp	r3, #48	; 0x30
 80047aa:	d86b      	bhi.n	8004884 <HAL_TIM_ConfigClockSource+0x170>
 80047ac:	2b20      	cmp	r3, #32
 80047ae:	d060      	beq.n	8004872 <HAL_TIM_ConfigClockSource+0x15e>
 80047b0:	2b20      	cmp	r3, #32
 80047b2:	d867      	bhi.n	8004884 <HAL_TIM_ConfigClockSource+0x170>
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d05c      	beq.n	8004872 <HAL_TIM_ConfigClockSource+0x15e>
 80047b8:	2b10      	cmp	r3, #16
 80047ba:	d05a      	beq.n	8004872 <HAL_TIM_ConfigClockSource+0x15e>
 80047bc:	e062      	b.n	8004884 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6818      	ldr	r0, [r3, #0]
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	6899      	ldr	r1, [r3, #8]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	685a      	ldr	r2, [r3, #4]
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	68db      	ldr	r3, [r3, #12]
 80047ce:	f000 f95d 	bl	8004a8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	68ba      	ldr	r2, [r7, #8]
 80047e8:	609a      	str	r2, [r3, #8]
      break;
 80047ea:	e04f      	b.n	800488c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6818      	ldr	r0, [r3, #0]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	6899      	ldr	r1, [r3, #8]
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685a      	ldr	r2, [r3, #4]
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	f000 f946 	bl	8004a8c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	689a      	ldr	r2, [r3, #8]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800480e:	609a      	str	r2, [r3, #8]
      break;
 8004810:	e03c      	b.n	800488c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6818      	ldr	r0, [r3, #0]
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	6859      	ldr	r1, [r3, #4]
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	461a      	mov	r2, r3
 8004820:	f000 f8ba 	bl	8004998 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2150      	movs	r1, #80	; 0x50
 800482a:	4618      	mov	r0, r3
 800482c:	f000 f913 	bl	8004a56 <TIM_ITRx_SetConfig>
      break;
 8004830:	e02c      	b.n	800488c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6818      	ldr	r0, [r3, #0]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	6859      	ldr	r1, [r3, #4]
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	461a      	mov	r2, r3
 8004840:	f000 f8d9 	bl	80049f6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	2160      	movs	r1, #96	; 0x60
 800484a:	4618      	mov	r0, r3
 800484c:	f000 f903 	bl	8004a56 <TIM_ITRx_SetConfig>
      break;
 8004850:	e01c      	b.n	800488c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6818      	ldr	r0, [r3, #0]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	6859      	ldr	r1, [r3, #4]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	461a      	mov	r2, r3
 8004860:	f000 f89a 	bl	8004998 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2140      	movs	r1, #64	; 0x40
 800486a:	4618      	mov	r0, r3
 800486c:	f000 f8f3 	bl	8004a56 <TIM_ITRx_SetConfig>
      break;
 8004870:	e00c      	b.n	800488c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4619      	mov	r1, r3
 800487c:	4610      	mov	r0, r2
 800487e:	f000 f8ea 	bl	8004a56 <TIM_ITRx_SetConfig>
      break;
 8004882:	e003      	b.n	800488c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	73fb      	strb	r3, [r7, #15]
      break;
 8004888:	e000      	b.n	800488c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800488a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800489c:	7bfb      	ldrb	r3, [r7, #15]
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3710      	adds	r7, #16
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
	...

080048a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	4a32      	ldr	r2, [pc, #200]	; (8004984 <TIM_Base_SetConfig+0xdc>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d007      	beq.n	80048d0 <TIM_Base_SetConfig+0x28>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048c6:	d003      	beq.n	80048d0 <TIM_Base_SetConfig+0x28>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a2f      	ldr	r2, [pc, #188]	; (8004988 <TIM_Base_SetConfig+0xe0>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d108      	bne.n	80048e2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	4313      	orrs	r3, r2
 80048e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a27      	ldr	r2, [pc, #156]	; (8004984 <TIM_Base_SetConfig+0xdc>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d013      	beq.n	8004912 <TIM_Base_SetConfig+0x6a>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048f0:	d00f      	beq.n	8004912 <TIM_Base_SetConfig+0x6a>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a24      	ldr	r2, [pc, #144]	; (8004988 <TIM_Base_SetConfig+0xe0>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d00b      	beq.n	8004912 <TIM_Base_SetConfig+0x6a>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a23      	ldr	r2, [pc, #140]	; (800498c <TIM_Base_SetConfig+0xe4>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d007      	beq.n	8004912 <TIM_Base_SetConfig+0x6a>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a22      	ldr	r2, [pc, #136]	; (8004990 <TIM_Base_SetConfig+0xe8>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d003      	beq.n	8004912 <TIM_Base_SetConfig+0x6a>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a21      	ldr	r2, [pc, #132]	; (8004994 <TIM_Base_SetConfig+0xec>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d108      	bne.n	8004924 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004918:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	4313      	orrs	r3, r2
 8004922:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	4313      	orrs	r3, r2
 8004930:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	689a      	ldr	r2, [r3, #8]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a0e      	ldr	r2, [pc, #56]	; (8004984 <TIM_Base_SetConfig+0xdc>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d00b      	beq.n	8004968 <TIM_Base_SetConfig+0xc0>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a0e      	ldr	r2, [pc, #56]	; (800498c <TIM_Base_SetConfig+0xe4>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d007      	beq.n	8004968 <TIM_Base_SetConfig+0xc0>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a0d      	ldr	r2, [pc, #52]	; (8004990 <TIM_Base_SetConfig+0xe8>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d003      	beq.n	8004968 <TIM_Base_SetConfig+0xc0>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a0c      	ldr	r2, [pc, #48]	; (8004994 <TIM_Base_SetConfig+0xec>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d103      	bne.n	8004970 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	691a      	ldr	r2, [r3, #16]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	615a      	str	r2, [r3, #20]
}
 8004976:	bf00      	nop
 8004978:	3714      	adds	r7, #20
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	40012c00 	.word	0x40012c00
 8004988:	40000400 	.word	0x40000400
 800498c:	40014000 	.word	0x40014000
 8004990:	40014400 	.word	0x40014400
 8004994:	40014800 	.word	0x40014800

08004998 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004998:	b480      	push	{r7}
 800499a:	b087      	sub	sp, #28
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	f023 0201 	bic.w	r2, r3, #1
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80049c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	011b      	lsls	r3, r3, #4
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	4313      	orrs	r3, r2
 80049cc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	f023 030a 	bic.w	r3, r3, #10
 80049d4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	4313      	orrs	r3, r2
 80049dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	621a      	str	r2, [r3, #32]
}
 80049ea:	bf00      	nop
 80049ec:	371c      	adds	r7, #28
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr

080049f6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049f6:	b480      	push	{r7}
 80049f8:	b087      	sub	sp, #28
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	60f8      	str	r0, [r7, #12]
 80049fe:	60b9      	str	r1, [r7, #8]
 8004a00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	f023 0210 	bic.w	r2, r3, #16
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6a1b      	ldr	r3, [r3, #32]
 8004a18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a20:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	031b      	lsls	r3, r3, #12
 8004a26:	697a      	ldr	r2, [r7, #20]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a32:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	011b      	lsls	r3, r3, #4
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	697a      	ldr	r2, [r7, #20]
 8004a42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	621a      	str	r2, [r3, #32]
}
 8004a4a:	bf00      	nop
 8004a4c:	371c      	adds	r7, #28
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr

08004a56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a56:	b480      	push	{r7}
 8004a58:	b085      	sub	sp, #20
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
 8004a5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	f043 0307 	orr.w	r3, r3, #7
 8004a78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	609a      	str	r2, [r3, #8]
}
 8004a80:	bf00      	nop
 8004a82:	3714      	adds	r7, #20
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b087      	sub	sp, #28
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]
 8004a98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004aa6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	021a      	lsls	r2, r3, #8
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	431a      	orrs	r2, r3
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	697a      	ldr	r2, [r7, #20]
 8004abe:	609a      	str	r2, [r3, #8]
}
 8004ac0:	bf00      	nop
 8004ac2:	371c      	adds	r7, #28
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aca:	4770      	bx	lr

08004acc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b085      	sub	sp, #20
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d101      	bne.n	8004ae4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	e054      	b.n	8004b8e <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2202      	movs	r2, #2
 8004af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a24      	ldr	r2, [pc, #144]	; (8004b9c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d108      	bne.n	8004b20 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004b14:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	68fa      	ldr	r2, [r7, #12]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68fa      	ldr	r2, [r7, #12]
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a17      	ldr	r2, [pc, #92]	; (8004b9c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d00e      	beq.n	8004b62 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b4c:	d009      	beq.n	8004b62 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a13      	ldr	r2, [pc, #76]	; (8004ba0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d004      	beq.n	8004b62 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a11      	ldr	r2, [pc, #68]	; (8004ba4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d10c      	bne.n	8004b7c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68ba      	ldr	r2, [r7, #8]
 8004b7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3714      	adds	r7, #20
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr
 8004b9a:	bf00      	nop
 8004b9c:	40012c00 	.word	0x40012c00
 8004ba0:	40000400 	.word	0x40000400
 8004ba4:	40014000 	.word	0x40014000

08004ba8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e040      	b.n	8004c3c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d106      	bne.n	8004bd0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f7fc fd74 	bl	80016b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2224      	movs	r2, #36	; 0x24
 8004bd4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 0201 	bic.w	r2, r2, #1
 8004be4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 f8b6 	bl	8004d58 <UART_SetConfig>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d101      	bne.n	8004bf6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e022      	b.n	8004c3c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d002      	beq.n	8004c04 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 f9e0 	bl	8004fc4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	685a      	ldr	r2, [r3, #4]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	689a      	ldr	r2, [r3, #8]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f042 0201 	orr.w	r2, r2, #1
 8004c32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 fa67 	bl	8005108 <UART_CheckIdleState>
 8004c3a:	4603      	mov	r3, r0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3708      	adds	r7, #8
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b08a      	sub	sp, #40	; 0x28
 8004c48:	af02      	add	r7, sp, #8
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	603b      	str	r3, [r7, #0]
 8004c50:	4613      	mov	r3, r2
 8004c52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c58:	2b20      	cmp	r3, #32
 8004c5a:	d178      	bne.n	8004d4e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d002      	beq.n	8004c68 <HAL_UART_Transmit+0x24>
 8004c62:	88fb      	ldrh	r3, [r7, #6]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d101      	bne.n	8004c6c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e071      	b.n	8004d50 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2221      	movs	r2, #33	; 0x21
 8004c78:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c7a:	f7fc fde5 	bl	8001848 <HAL_GetTick>
 8004c7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	88fa      	ldrh	r2, [r7, #6]
 8004c84:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	88fa      	ldrh	r2, [r7, #6]
 8004c8c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c98:	d108      	bne.n	8004cac <HAL_UART_Transmit+0x68>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d104      	bne.n	8004cac <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	61bb      	str	r3, [r7, #24]
 8004caa:	e003      	b.n	8004cb4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004cb4:	e030      	b.n	8004d18 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	9300      	str	r3, [sp, #0]
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	2180      	movs	r1, #128	; 0x80
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f000 fac9 	bl	8005258 <UART_WaitOnFlagUntilTimeout>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d004      	beq.n	8004cd6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2220      	movs	r2, #32
 8004cd0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e03c      	b.n	8004d50 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d10b      	bne.n	8004cf4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	881a      	ldrh	r2, [r3, #0]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ce8:	b292      	uxth	r2, r2
 8004cea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	3302      	adds	r3, #2
 8004cf0:	61bb      	str	r3, [r7, #24]
 8004cf2:	e008      	b.n	8004d06 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	781a      	ldrb	r2, [r3, #0]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	b292      	uxth	r2, r2
 8004cfe:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	3301      	adds	r3, #1
 8004d04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d0c:	b29b      	uxth	r3, r3
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d1c8      	bne.n	8004cb6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	9300      	str	r3, [sp, #0]
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	2140      	movs	r1, #64	; 0x40
 8004d2e:	68f8      	ldr	r0, [r7, #12]
 8004d30:	f000 fa92 	bl	8005258 <UART_WaitOnFlagUntilTimeout>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d004      	beq.n	8004d44 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2220      	movs	r2, #32
 8004d3e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e005      	b.n	8004d50 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2220      	movs	r2, #32
 8004d48:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	e000      	b.n	8004d50 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8004d4e:	2302      	movs	r3, #2
  }
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3720      	adds	r7, #32
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b088      	sub	sp, #32
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d60:	2300      	movs	r3, #0
 8004d62:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	689a      	ldr	r2, [r3, #8]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	431a      	orrs	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	431a      	orrs	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	69db      	ldr	r3, [r3, #28]
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	4b8a      	ldr	r3, [pc, #552]	; (8004fac <UART_SetConfig+0x254>)
 8004d84:	4013      	ands	r3, r2
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	6812      	ldr	r2, [r2, #0]
 8004d8a:	6979      	ldr	r1, [r7, #20]
 8004d8c:	430b      	orrs	r3, r1
 8004d8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68da      	ldr	r2, [r3, #12]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	430a      	orrs	r2, r1
 8004da4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a1b      	ldr	r3, [r3, #32]
 8004db0:	697a      	ldr	r2, [r7, #20]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a78      	ldr	r2, [pc, #480]	; (8004fb0 <UART_SetConfig+0x258>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d120      	bne.n	8004e16 <UART_SetConfig+0xbe>
 8004dd4:	4b77      	ldr	r3, [pc, #476]	; (8004fb4 <UART_SetConfig+0x25c>)
 8004dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd8:	f003 0303 	and.w	r3, r3, #3
 8004ddc:	2b03      	cmp	r3, #3
 8004dde:	d817      	bhi.n	8004e10 <UART_SetConfig+0xb8>
 8004de0:	a201      	add	r2, pc, #4	; (adr r2, 8004de8 <UART_SetConfig+0x90>)
 8004de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de6:	bf00      	nop
 8004de8:	08004df9 	.word	0x08004df9
 8004dec:	08004e05 	.word	0x08004e05
 8004df0:	08004e0b 	.word	0x08004e0b
 8004df4:	08004dff 	.word	0x08004dff
 8004df8:	2300      	movs	r3, #0
 8004dfa:	77fb      	strb	r3, [r7, #31]
 8004dfc:	e01d      	b.n	8004e3a <UART_SetConfig+0xe2>
 8004dfe:	2302      	movs	r3, #2
 8004e00:	77fb      	strb	r3, [r7, #31]
 8004e02:	e01a      	b.n	8004e3a <UART_SetConfig+0xe2>
 8004e04:	2304      	movs	r3, #4
 8004e06:	77fb      	strb	r3, [r7, #31]
 8004e08:	e017      	b.n	8004e3a <UART_SetConfig+0xe2>
 8004e0a:	2308      	movs	r3, #8
 8004e0c:	77fb      	strb	r3, [r7, #31]
 8004e0e:	e014      	b.n	8004e3a <UART_SetConfig+0xe2>
 8004e10:	2310      	movs	r3, #16
 8004e12:	77fb      	strb	r3, [r7, #31]
 8004e14:	e011      	b.n	8004e3a <UART_SetConfig+0xe2>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a67      	ldr	r2, [pc, #412]	; (8004fb8 <UART_SetConfig+0x260>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d102      	bne.n	8004e26 <UART_SetConfig+0xce>
 8004e20:	2300      	movs	r3, #0
 8004e22:	77fb      	strb	r3, [r7, #31]
 8004e24:	e009      	b.n	8004e3a <UART_SetConfig+0xe2>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	4a64      	ldr	r2, [pc, #400]	; (8004fbc <UART_SetConfig+0x264>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d102      	bne.n	8004e36 <UART_SetConfig+0xde>
 8004e30:	2300      	movs	r3, #0
 8004e32:	77fb      	strb	r3, [r7, #31]
 8004e34:	e001      	b.n	8004e3a <UART_SetConfig+0xe2>
 8004e36:	2310      	movs	r3, #16
 8004e38:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	69db      	ldr	r3, [r3, #28]
 8004e3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e42:	d15a      	bne.n	8004efa <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004e44:	7ffb      	ldrb	r3, [r7, #31]
 8004e46:	2b08      	cmp	r3, #8
 8004e48:	d827      	bhi.n	8004e9a <UART_SetConfig+0x142>
 8004e4a:	a201      	add	r2, pc, #4	; (adr r2, 8004e50 <UART_SetConfig+0xf8>)
 8004e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e50:	08004e75 	.word	0x08004e75
 8004e54:	08004e7d 	.word	0x08004e7d
 8004e58:	08004e85 	.word	0x08004e85
 8004e5c:	08004e9b 	.word	0x08004e9b
 8004e60:	08004e8b 	.word	0x08004e8b
 8004e64:	08004e9b 	.word	0x08004e9b
 8004e68:	08004e9b 	.word	0x08004e9b
 8004e6c:	08004e9b 	.word	0x08004e9b
 8004e70:	08004e93 	.word	0x08004e93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e74:	f7ff fb5e 	bl	8004534 <HAL_RCC_GetPCLK1Freq>
 8004e78:	61b8      	str	r0, [r7, #24]
        break;
 8004e7a:	e013      	b.n	8004ea4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e7c:	f7ff fb7c 	bl	8004578 <HAL_RCC_GetPCLK2Freq>
 8004e80:	61b8      	str	r0, [r7, #24]
        break;
 8004e82:	e00f      	b.n	8004ea4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e84:	4b4e      	ldr	r3, [pc, #312]	; (8004fc0 <UART_SetConfig+0x268>)
 8004e86:	61bb      	str	r3, [r7, #24]
        break;
 8004e88:	e00c      	b.n	8004ea4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e8a:	f7ff fadb 	bl	8004444 <HAL_RCC_GetSysClockFreq>
 8004e8e:	61b8      	str	r0, [r7, #24]
        break;
 8004e90:	e008      	b.n	8004ea4 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e96:	61bb      	str	r3, [r7, #24]
        break;
 8004e98:	e004      	b.n	8004ea4 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	77bb      	strb	r3, [r7, #30]
        break;
 8004ea2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d074      	beq.n	8004f94 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	005a      	lsls	r2, r3, #1
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	085b      	lsrs	r3, r3, #1
 8004eb4:	441a      	add	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ebe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	2b0f      	cmp	r3, #15
 8004ec4:	d916      	bls.n	8004ef4 <UART_SetConfig+0x19c>
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ecc:	d212      	bcs.n	8004ef4 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	f023 030f 	bic.w	r3, r3, #15
 8004ed6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	085b      	lsrs	r3, r3, #1
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	f003 0307 	and.w	r3, r3, #7
 8004ee2:	b29a      	uxth	r2, r3
 8004ee4:	89fb      	ldrh	r3, [r7, #14]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	89fa      	ldrh	r2, [r7, #14]
 8004ef0:	60da      	str	r2, [r3, #12]
 8004ef2:	e04f      	b.n	8004f94 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	77bb      	strb	r3, [r7, #30]
 8004ef8:	e04c      	b.n	8004f94 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004efa:	7ffb      	ldrb	r3, [r7, #31]
 8004efc:	2b08      	cmp	r3, #8
 8004efe:	d828      	bhi.n	8004f52 <UART_SetConfig+0x1fa>
 8004f00:	a201      	add	r2, pc, #4	; (adr r2, 8004f08 <UART_SetConfig+0x1b0>)
 8004f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f06:	bf00      	nop
 8004f08:	08004f2d 	.word	0x08004f2d
 8004f0c:	08004f35 	.word	0x08004f35
 8004f10:	08004f3d 	.word	0x08004f3d
 8004f14:	08004f53 	.word	0x08004f53
 8004f18:	08004f43 	.word	0x08004f43
 8004f1c:	08004f53 	.word	0x08004f53
 8004f20:	08004f53 	.word	0x08004f53
 8004f24:	08004f53 	.word	0x08004f53
 8004f28:	08004f4b 	.word	0x08004f4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f2c:	f7ff fb02 	bl	8004534 <HAL_RCC_GetPCLK1Freq>
 8004f30:	61b8      	str	r0, [r7, #24]
        break;
 8004f32:	e013      	b.n	8004f5c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f34:	f7ff fb20 	bl	8004578 <HAL_RCC_GetPCLK2Freq>
 8004f38:	61b8      	str	r0, [r7, #24]
        break;
 8004f3a:	e00f      	b.n	8004f5c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f3c:	4b20      	ldr	r3, [pc, #128]	; (8004fc0 <UART_SetConfig+0x268>)
 8004f3e:	61bb      	str	r3, [r7, #24]
        break;
 8004f40:	e00c      	b.n	8004f5c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f42:	f7ff fa7f 	bl	8004444 <HAL_RCC_GetSysClockFreq>
 8004f46:	61b8      	str	r0, [r7, #24]
        break;
 8004f48:	e008      	b.n	8004f5c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f4e:	61bb      	str	r3, [r7, #24]
        break;
 8004f50:	e004      	b.n	8004f5c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004f52:	2300      	movs	r3, #0
 8004f54:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	77bb      	strb	r3, [r7, #30]
        break;
 8004f5a:	bf00      	nop
    }

    if (pclk != 0U)
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d018      	beq.n	8004f94 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	085a      	lsrs	r2, r3, #1
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	441a      	add	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f74:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f76:	693b      	ldr	r3, [r7, #16]
 8004f78:	2b0f      	cmp	r3, #15
 8004f7a:	d909      	bls.n	8004f90 <UART_SetConfig+0x238>
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f82:	d205      	bcs.n	8004f90 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	b29a      	uxth	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	60da      	str	r2, [r3, #12]
 8004f8e:	e001      	b.n	8004f94 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004fa0:	7fbb      	ldrb	r3, [r7, #30]
}
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	3720      	adds	r7, #32
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	efff69f3 	.word	0xefff69f3
 8004fb0:	40013800 	.word	0x40013800
 8004fb4:	40021000 	.word	0x40021000
 8004fb8:	40004400 	.word	0x40004400
 8004fbc:	40004800 	.word	0x40004800
 8004fc0:	007a1200 	.word	0x007a1200

08004fc4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd0:	f003 0301 	and.w	r3, r3, #1
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00a      	beq.n	8004fee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	430a      	orrs	r2, r1
 8004fec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff2:	f003 0302 	and.w	r3, r3, #2
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00a      	beq.n	8005010 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	430a      	orrs	r2, r1
 800500e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005014:	f003 0304 	and.w	r3, r3, #4
 8005018:	2b00      	cmp	r3, #0
 800501a:	d00a      	beq.n	8005032 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	430a      	orrs	r2, r1
 8005030:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005036:	f003 0308 	and.w	r3, r3, #8
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00a      	beq.n	8005054 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	430a      	orrs	r2, r1
 8005052:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005058:	f003 0310 	and.w	r3, r3, #16
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00a      	beq.n	8005076 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	430a      	orrs	r2, r1
 8005074:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507a:	f003 0320 	and.w	r3, r3, #32
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00a      	beq.n	8005098 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	430a      	orrs	r2, r1
 8005096:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d01a      	beq.n	80050da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	430a      	orrs	r2, r1
 80050b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050c2:	d10a      	bne.n	80050da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	430a      	orrs	r2, r1
 80050d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00a      	beq.n	80050fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	430a      	orrs	r2, r1
 80050fa:	605a      	str	r2, [r3, #4]
  }
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b098      	sub	sp, #96	; 0x60
 800510c:	af02      	add	r7, sp, #8
 800510e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005118:	f7fc fb96 	bl	8001848 <HAL_GetTick>
 800511c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0308 	and.w	r3, r3, #8
 8005128:	2b08      	cmp	r3, #8
 800512a:	d12e      	bne.n	800518a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800512c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005130:	9300      	str	r3, [sp, #0]
 8005132:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005134:	2200      	movs	r2, #0
 8005136:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 f88c 	bl	8005258 <UART_WaitOnFlagUntilTimeout>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d021      	beq.n	800518a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800514c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800514e:	e853 3f00 	ldrex	r3, [r3]
 8005152:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005156:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800515a:	653b      	str	r3, [r7, #80]	; 0x50
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	461a      	mov	r2, r3
 8005162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005164:	647b      	str	r3, [r7, #68]	; 0x44
 8005166:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005168:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800516a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800516c:	e841 2300 	strex	r3, r2, [r1]
 8005170:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005172:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1e6      	bne.n	8005146 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2220      	movs	r2, #32
 800517c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005186:	2303      	movs	r3, #3
 8005188:	e062      	b.n	8005250 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0304 	and.w	r3, r3, #4
 8005194:	2b04      	cmp	r3, #4
 8005196:	d149      	bne.n	800522c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005198:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800519c:	9300      	str	r3, [sp, #0]
 800519e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051a0:	2200      	movs	r2, #0
 80051a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f856 	bl	8005258 <UART_WaitOnFlagUntilTimeout>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d03c      	beq.n	800522c <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ba:	e853 3f00 	ldrex	r3, [r3]
 80051be:	623b      	str	r3, [r7, #32]
   return(result);
 80051c0:	6a3b      	ldr	r3, [r7, #32]
 80051c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	461a      	mov	r2, r3
 80051ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051d0:	633b      	str	r3, [r7, #48]	; 0x30
 80051d2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051d8:	e841 2300 	strex	r3, r2, [r1]
 80051dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80051de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d1e6      	bne.n	80051b2 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	3308      	adds	r3, #8
 80051ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	e853 3f00 	ldrex	r3, [r3]
 80051f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f023 0301 	bic.w	r3, r3, #1
 80051fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	3308      	adds	r3, #8
 8005202:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005204:	61fa      	str	r2, [r7, #28]
 8005206:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005208:	69b9      	ldr	r1, [r7, #24]
 800520a:	69fa      	ldr	r2, [r7, #28]
 800520c:	e841 2300 	strex	r3, r2, [r1]
 8005210:	617b      	str	r3, [r7, #20]
   return(result);
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d1e5      	bne.n	80051e4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2220      	movs	r2, #32
 800521c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2200      	movs	r2, #0
 8005224:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e011      	b.n	8005250 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2220      	movs	r2, #32
 8005230:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2220      	movs	r2, #32
 8005236:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3758      	adds	r7, #88	; 0x58
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b084      	sub	sp, #16
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	603b      	str	r3, [r7, #0]
 8005264:	4613      	mov	r3, r2
 8005266:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005268:	e049      	b.n	80052fe <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005270:	d045      	beq.n	80052fe <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005272:	f7fc fae9 	bl	8001848 <HAL_GetTick>
 8005276:	4602      	mov	r2, r0
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	69ba      	ldr	r2, [r7, #24]
 800527e:	429a      	cmp	r2, r3
 8005280:	d302      	bcc.n	8005288 <UART_WaitOnFlagUntilTimeout+0x30>
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d101      	bne.n	800528c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	e048      	b.n	800531e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0304 	and.w	r3, r3, #4
 8005296:	2b00      	cmp	r3, #0
 8005298:	d031      	beq.n	80052fe <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	69db      	ldr	r3, [r3, #28]
 80052a0:	f003 0308 	and.w	r3, r3, #8
 80052a4:	2b08      	cmp	r3, #8
 80052a6:	d110      	bne.n	80052ca <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2208      	movs	r2, #8
 80052ae:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f000 f838 	bl	8005326 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2208      	movs	r2, #8
 80052ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	e029      	b.n	800531e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	69db      	ldr	r3, [r3, #28]
 80052d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052d8:	d111      	bne.n	80052fe <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052e4:	68f8      	ldr	r0, [r7, #12]
 80052e6:	f000 f81e 	bl	8005326 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2220      	movs	r2, #32
 80052ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e00f      	b.n	800531e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	69da      	ldr	r2, [r3, #28]
 8005304:	68bb      	ldr	r3, [r7, #8]
 8005306:	4013      	ands	r3, r2
 8005308:	68ba      	ldr	r2, [r7, #8]
 800530a:	429a      	cmp	r2, r3
 800530c:	bf0c      	ite	eq
 800530e:	2301      	moveq	r3, #1
 8005310:	2300      	movne	r3, #0
 8005312:	b2db      	uxtb	r3, r3
 8005314:	461a      	mov	r2, r3
 8005316:	79fb      	ldrb	r3, [r7, #7]
 8005318:	429a      	cmp	r2, r3
 800531a:	d0a6      	beq.n	800526a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800531c:	2300      	movs	r3, #0
}
 800531e:	4618      	mov	r0, r3
 8005320:	3710      	adds	r7, #16
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005326:	b480      	push	{r7}
 8005328:	b095      	sub	sp, #84	; 0x54
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005336:	e853 3f00 	ldrex	r3, [r3]
 800533a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800533c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005342:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	461a      	mov	r2, r3
 800534a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800534c:	643b      	str	r3, [r7, #64]	; 0x40
 800534e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005350:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005352:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005354:	e841 2300 	strex	r3, r2, [r1]
 8005358:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800535a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800535c:	2b00      	cmp	r3, #0
 800535e:	d1e6      	bne.n	800532e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	3308      	adds	r3, #8
 8005366:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005368:	6a3b      	ldr	r3, [r7, #32]
 800536a:	e853 3f00 	ldrex	r3, [r3]
 800536e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	f023 0301 	bic.w	r3, r3, #1
 8005376:	64bb      	str	r3, [r7, #72]	; 0x48
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	3308      	adds	r3, #8
 800537e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005380:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005382:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005384:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005386:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005388:	e841 2300 	strex	r3, r2, [r1]
 800538c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800538e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005390:	2b00      	cmp	r3, #0
 8005392:	d1e5      	bne.n	8005360 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005398:	2b01      	cmp	r3, #1
 800539a:	d118      	bne.n	80053ce <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	e853 3f00 	ldrex	r3, [r3]
 80053a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	f023 0310 	bic.w	r3, r3, #16
 80053b0:	647b      	str	r3, [r7, #68]	; 0x44
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	461a      	mov	r2, r3
 80053b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053ba:	61bb      	str	r3, [r7, #24]
 80053bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053be:	6979      	ldr	r1, [r7, #20]
 80053c0:	69ba      	ldr	r2, [r7, #24]
 80053c2:	e841 2300 	strex	r3, r2, [r1]
 80053c6:	613b      	str	r3, [r7, #16]
   return(result);
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1e6      	bne.n	800539c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2220      	movs	r2, #32
 80053d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80053e2:	bf00      	nop
 80053e4:	3754      	adds	r7, #84	; 0x54
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
	...

080053f0 <__errno>:
 80053f0:	4b01      	ldr	r3, [pc, #4]	; (80053f8 <__errno+0x8>)
 80053f2:	6818      	ldr	r0, [r3, #0]
 80053f4:	4770      	bx	lr
 80053f6:	bf00      	nop
 80053f8:	2000002c 	.word	0x2000002c

080053fc <__libc_init_array>:
 80053fc:	b570      	push	{r4, r5, r6, lr}
 80053fe:	4d0d      	ldr	r5, [pc, #52]	; (8005434 <__libc_init_array+0x38>)
 8005400:	4c0d      	ldr	r4, [pc, #52]	; (8005438 <__libc_init_array+0x3c>)
 8005402:	1b64      	subs	r4, r4, r5
 8005404:	10a4      	asrs	r4, r4, #2
 8005406:	2600      	movs	r6, #0
 8005408:	42a6      	cmp	r6, r4
 800540a:	d109      	bne.n	8005420 <__libc_init_array+0x24>
 800540c:	4d0b      	ldr	r5, [pc, #44]	; (800543c <__libc_init_array+0x40>)
 800540e:	4c0c      	ldr	r4, [pc, #48]	; (8005440 <__libc_init_array+0x44>)
 8005410:	f003 fec0 	bl	8009194 <_init>
 8005414:	1b64      	subs	r4, r4, r5
 8005416:	10a4      	asrs	r4, r4, #2
 8005418:	2600      	movs	r6, #0
 800541a:	42a6      	cmp	r6, r4
 800541c:	d105      	bne.n	800542a <__libc_init_array+0x2e>
 800541e:	bd70      	pop	{r4, r5, r6, pc}
 8005420:	f855 3b04 	ldr.w	r3, [r5], #4
 8005424:	4798      	blx	r3
 8005426:	3601      	adds	r6, #1
 8005428:	e7ee      	b.n	8005408 <__libc_init_array+0xc>
 800542a:	f855 3b04 	ldr.w	r3, [r5], #4
 800542e:	4798      	blx	r3
 8005430:	3601      	adds	r6, #1
 8005432:	e7f2      	b.n	800541a <__libc_init_array+0x1e>
 8005434:	08009650 	.word	0x08009650
 8005438:	08009650 	.word	0x08009650
 800543c:	08009650 	.word	0x08009650
 8005440:	08009654 	.word	0x08009654

08005444 <memset>:
 8005444:	4402      	add	r2, r0
 8005446:	4603      	mov	r3, r0
 8005448:	4293      	cmp	r3, r2
 800544a:	d100      	bne.n	800544e <memset+0xa>
 800544c:	4770      	bx	lr
 800544e:	f803 1b01 	strb.w	r1, [r3], #1
 8005452:	e7f9      	b.n	8005448 <memset+0x4>

08005454 <__cvt>:
 8005454:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005458:	ec55 4b10 	vmov	r4, r5, d0
 800545c:	2d00      	cmp	r5, #0
 800545e:	460e      	mov	r6, r1
 8005460:	4619      	mov	r1, r3
 8005462:	462b      	mov	r3, r5
 8005464:	bfbb      	ittet	lt
 8005466:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800546a:	461d      	movlt	r5, r3
 800546c:	2300      	movge	r3, #0
 800546e:	232d      	movlt	r3, #45	; 0x2d
 8005470:	700b      	strb	r3, [r1, #0]
 8005472:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005474:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005478:	4691      	mov	r9, r2
 800547a:	f023 0820 	bic.w	r8, r3, #32
 800547e:	bfbc      	itt	lt
 8005480:	4622      	movlt	r2, r4
 8005482:	4614      	movlt	r4, r2
 8005484:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005488:	d005      	beq.n	8005496 <__cvt+0x42>
 800548a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800548e:	d100      	bne.n	8005492 <__cvt+0x3e>
 8005490:	3601      	adds	r6, #1
 8005492:	2102      	movs	r1, #2
 8005494:	e000      	b.n	8005498 <__cvt+0x44>
 8005496:	2103      	movs	r1, #3
 8005498:	ab03      	add	r3, sp, #12
 800549a:	9301      	str	r3, [sp, #4]
 800549c:	ab02      	add	r3, sp, #8
 800549e:	9300      	str	r3, [sp, #0]
 80054a0:	ec45 4b10 	vmov	d0, r4, r5
 80054a4:	4653      	mov	r3, sl
 80054a6:	4632      	mov	r2, r6
 80054a8:	f000 fe4e 	bl	8006148 <_dtoa_r>
 80054ac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80054b0:	4607      	mov	r7, r0
 80054b2:	d102      	bne.n	80054ba <__cvt+0x66>
 80054b4:	f019 0f01 	tst.w	r9, #1
 80054b8:	d022      	beq.n	8005500 <__cvt+0xac>
 80054ba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80054be:	eb07 0906 	add.w	r9, r7, r6
 80054c2:	d110      	bne.n	80054e6 <__cvt+0x92>
 80054c4:	783b      	ldrb	r3, [r7, #0]
 80054c6:	2b30      	cmp	r3, #48	; 0x30
 80054c8:	d10a      	bne.n	80054e0 <__cvt+0x8c>
 80054ca:	2200      	movs	r2, #0
 80054cc:	2300      	movs	r3, #0
 80054ce:	4620      	mov	r0, r4
 80054d0:	4629      	mov	r1, r5
 80054d2:	f7fb faf9 	bl	8000ac8 <__aeabi_dcmpeq>
 80054d6:	b918      	cbnz	r0, 80054e0 <__cvt+0x8c>
 80054d8:	f1c6 0601 	rsb	r6, r6, #1
 80054dc:	f8ca 6000 	str.w	r6, [sl]
 80054e0:	f8da 3000 	ldr.w	r3, [sl]
 80054e4:	4499      	add	r9, r3
 80054e6:	2200      	movs	r2, #0
 80054e8:	2300      	movs	r3, #0
 80054ea:	4620      	mov	r0, r4
 80054ec:	4629      	mov	r1, r5
 80054ee:	f7fb faeb 	bl	8000ac8 <__aeabi_dcmpeq>
 80054f2:	b108      	cbz	r0, 80054f8 <__cvt+0xa4>
 80054f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80054f8:	2230      	movs	r2, #48	; 0x30
 80054fa:	9b03      	ldr	r3, [sp, #12]
 80054fc:	454b      	cmp	r3, r9
 80054fe:	d307      	bcc.n	8005510 <__cvt+0xbc>
 8005500:	9b03      	ldr	r3, [sp, #12]
 8005502:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005504:	1bdb      	subs	r3, r3, r7
 8005506:	4638      	mov	r0, r7
 8005508:	6013      	str	r3, [r2, #0]
 800550a:	b004      	add	sp, #16
 800550c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005510:	1c59      	adds	r1, r3, #1
 8005512:	9103      	str	r1, [sp, #12]
 8005514:	701a      	strb	r2, [r3, #0]
 8005516:	e7f0      	b.n	80054fa <__cvt+0xa6>

08005518 <__exponent>:
 8005518:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800551a:	4603      	mov	r3, r0
 800551c:	2900      	cmp	r1, #0
 800551e:	bfb8      	it	lt
 8005520:	4249      	neglt	r1, r1
 8005522:	f803 2b02 	strb.w	r2, [r3], #2
 8005526:	bfb4      	ite	lt
 8005528:	222d      	movlt	r2, #45	; 0x2d
 800552a:	222b      	movge	r2, #43	; 0x2b
 800552c:	2909      	cmp	r1, #9
 800552e:	7042      	strb	r2, [r0, #1]
 8005530:	dd2a      	ble.n	8005588 <__exponent+0x70>
 8005532:	f10d 0407 	add.w	r4, sp, #7
 8005536:	46a4      	mov	ip, r4
 8005538:	270a      	movs	r7, #10
 800553a:	46a6      	mov	lr, r4
 800553c:	460a      	mov	r2, r1
 800553e:	fb91 f6f7 	sdiv	r6, r1, r7
 8005542:	fb07 1516 	mls	r5, r7, r6, r1
 8005546:	3530      	adds	r5, #48	; 0x30
 8005548:	2a63      	cmp	r2, #99	; 0x63
 800554a:	f104 34ff 	add.w	r4, r4, #4294967295
 800554e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8005552:	4631      	mov	r1, r6
 8005554:	dcf1      	bgt.n	800553a <__exponent+0x22>
 8005556:	3130      	adds	r1, #48	; 0x30
 8005558:	f1ae 0502 	sub.w	r5, lr, #2
 800555c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005560:	1c44      	adds	r4, r0, #1
 8005562:	4629      	mov	r1, r5
 8005564:	4561      	cmp	r1, ip
 8005566:	d30a      	bcc.n	800557e <__exponent+0x66>
 8005568:	f10d 0209 	add.w	r2, sp, #9
 800556c:	eba2 020e 	sub.w	r2, r2, lr
 8005570:	4565      	cmp	r5, ip
 8005572:	bf88      	it	hi
 8005574:	2200      	movhi	r2, #0
 8005576:	4413      	add	r3, r2
 8005578:	1a18      	subs	r0, r3, r0
 800557a:	b003      	add	sp, #12
 800557c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800557e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005582:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005586:	e7ed      	b.n	8005564 <__exponent+0x4c>
 8005588:	2330      	movs	r3, #48	; 0x30
 800558a:	3130      	adds	r1, #48	; 0x30
 800558c:	7083      	strb	r3, [r0, #2]
 800558e:	70c1      	strb	r1, [r0, #3]
 8005590:	1d03      	adds	r3, r0, #4
 8005592:	e7f1      	b.n	8005578 <__exponent+0x60>

08005594 <_printf_float>:
 8005594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005598:	ed2d 8b02 	vpush	{d8}
 800559c:	b08d      	sub	sp, #52	; 0x34
 800559e:	460c      	mov	r4, r1
 80055a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80055a4:	4616      	mov	r6, r2
 80055a6:	461f      	mov	r7, r3
 80055a8:	4605      	mov	r5, r0
 80055aa:	f001 fd73 	bl	8007094 <_localeconv_r>
 80055ae:	f8d0 a000 	ldr.w	sl, [r0]
 80055b2:	4650      	mov	r0, sl
 80055b4:	f7fa fe0c 	bl	80001d0 <strlen>
 80055b8:	2300      	movs	r3, #0
 80055ba:	930a      	str	r3, [sp, #40]	; 0x28
 80055bc:	6823      	ldr	r3, [r4, #0]
 80055be:	9305      	str	r3, [sp, #20]
 80055c0:	f8d8 3000 	ldr.w	r3, [r8]
 80055c4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80055c8:	3307      	adds	r3, #7
 80055ca:	f023 0307 	bic.w	r3, r3, #7
 80055ce:	f103 0208 	add.w	r2, r3, #8
 80055d2:	f8c8 2000 	str.w	r2, [r8]
 80055d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055da:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80055de:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80055e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80055e6:	9307      	str	r3, [sp, #28]
 80055e8:	f8cd 8018 	str.w	r8, [sp, #24]
 80055ec:	ee08 0a10 	vmov	s16, r0
 80055f0:	4b9f      	ldr	r3, [pc, #636]	; (8005870 <_printf_float+0x2dc>)
 80055f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055f6:	f04f 32ff 	mov.w	r2, #4294967295
 80055fa:	f7fb fa97 	bl	8000b2c <__aeabi_dcmpun>
 80055fe:	bb88      	cbnz	r0, 8005664 <_printf_float+0xd0>
 8005600:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005604:	4b9a      	ldr	r3, [pc, #616]	; (8005870 <_printf_float+0x2dc>)
 8005606:	f04f 32ff 	mov.w	r2, #4294967295
 800560a:	f7fb fa71 	bl	8000af0 <__aeabi_dcmple>
 800560e:	bb48      	cbnz	r0, 8005664 <_printf_float+0xd0>
 8005610:	2200      	movs	r2, #0
 8005612:	2300      	movs	r3, #0
 8005614:	4640      	mov	r0, r8
 8005616:	4649      	mov	r1, r9
 8005618:	f7fb fa60 	bl	8000adc <__aeabi_dcmplt>
 800561c:	b110      	cbz	r0, 8005624 <_printf_float+0x90>
 800561e:	232d      	movs	r3, #45	; 0x2d
 8005620:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005624:	4b93      	ldr	r3, [pc, #588]	; (8005874 <_printf_float+0x2e0>)
 8005626:	4894      	ldr	r0, [pc, #592]	; (8005878 <_printf_float+0x2e4>)
 8005628:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800562c:	bf94      	ite	ls
 800562e:	4698      	movls	r8, r3
 8005630:	4680      	movhi	r8, r0
 8005632:	2303      	movs	r3, #3
 8005634:	6123      	str	r3, [r4, #16]
 8005636:	9b05      	ldr	r3, [sp, #20]
 8005638:	f023 0204 	bic.w	r2, r3, #4
 800563c:	6022      	str	r2, [r4, #0]
 800563e:	f04f 0900 	mov.w	r9, #0
 8005642:	9700      	str	r7, [sp, #0]
 8005644:	4633      	mov	r3, r6
 8005646:	aa0b      	add	r2, sp, #44	; 0x2c
 8005648:	4621      	mov	r1, r4
 800564a:	4628      	mov	r0, r5
 800564c:	f000 f9d8 	bl	8005a00 <_printf_common>
 8005650:	3001      	adds	r0, #1
 8005652:	f040 8090 	bne.w	8005776 <_printf_float+0x1e2>
 8005656:	f04f 30ff 	mov.w	r0, #4294967295
 800565a:	b00d      	add	sp, #52	; 0x34
 800565c:	ecbd 8b02 	vpop	{d8}
 8005660:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005664:	4642      	mov	r2, r8
 8005666:	464b      	mov	r3, r9
 8005668:	4640      	mov	r0, r8
 800566a:	4649      	mov	r1, r9
 800566c:	f7fb fa5e 	bl	8000b2c <__aeabi_dcmpun>
 8005670:	b140      	cbz	r0, 8005684 <_printf_float+0xf0>
 8005672:	464b      	mov	r3, r9
 8005674:	2b00      	cmp	r3, #0
 8005676:	bfbc      	itt	lt
 8005678:	232d      	movlt	r3, #45	; 0x2d
 800567a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800567e:	487f      	ldr	r0, [pc, #508]	; (800587c <_printf_float+0x2e8>)
 8005680:	4b7f      	ldr	r3, [pc, #508]	; (8005880 <_printf_float+0x2ec>)
 8005682:	e7d1      	b.n	8005628 <_printf_float+0x94>
 8005684:	6863      	ldr	r3, [r4, #4]
 8005686:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800568a:	9206      	str	r2, [sp, #24]
 800568c:	1c5a      	adds	r2, r3, #1
 800568e:	d13f      	bne.n	8005710 <_printf_float+0x17c>
 8005690:	2306      	movs	r3, #6
 8005692:	6063      	str	r3, [r4, #4]
 8005694:	9b05      	ldr	r3, [sp, #20]
 8005696:	6861      	ldr	r1, [r4, #4]
 8005698:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800569c:	2300      	movs	r3, #0
 800569e:	9303      	str	r3, [sp, #12]
 80056a0:	ab0a      	add	r3, sp, #40	; 0x28
 80056a2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80056a6:	ab09      	add	r3, sp, #36	; 0x24
 80056a8:	ec49 8b10 	vmov	d0, r8, r9
 80056ac:	9300      	str	r3, [sp, #0]
 80056ae:	6022      	str	r2, [r4, #0]
 80056b0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80056b4:	4628      	mov	r0, r5
 80056b6:	f7ff fecd 	bl	8005454 <__cvt>
 80056ba:	9b06      	ldr	r3, [sp, #24]
 80056bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80056be:	2b47      	cmp	r3, #71	; 0x47
 80056c0:	4680      	mov	r8, r0
 80056c2:	d108      	bne.n	80056d6 <_printf_float+0x142>
 80056c4:	1cc8      	adds	r0, r1, #3
 80056c6:	db02      	blt.n	80056ce <_printf_float+0x13a>
 80056c8:	6863      	ldr	r3, [r4, #4]
 80056ca:	4299      	cmp	r1, r3
 80056cc:	dd41      	ble.n	8005752 <_printf_float+0x1be>
 80056ce:	f1ab 0b02 	sub.w	fp, fp, #2
 80056d2:	fa5f fb8b 	uxtb.w	fp, fp
 80056d6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80056da:	d820      	bhi.n	800571e <_printf_float+0x18a>
 80056dc:	3901      	subs	r1, #1
 80056de:	465a      	mov	r2, fp
 80056e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80056e4:	9109      	str	r1, [sp, #36]	; 0x24
 80056e6:	f7ff ff17 	bl	8005518 <__exponent>
 80056ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056ec:	1813      	adds	r3, r2, r0
 80056ee:	2a01      	cmp	r2, #1
 80056f0:	4681      	mov	r9, r0
 80056f2:	6123      	str	r3, [r4, #16]
 80056f4:	dc02      	bgt.n	80056fc <_printf_float+0x168>
 80056f6:	6822      	ldr	r2, [r4, #0]
 80056f8:	07d2      	lsls	r2, r2, #31
 80056fa:	d501      	bpl.n	8005700 <_printf_float+0x16c>
 80056fc:	3301      	adds	r3, #1
 80056fe:	6123      	str	r3, [r4, #16]
 8005700:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005704:	2b00      	cmp	r3, #0
 8005706:	d09c      	beq.n	8005642 <_printf_float+0xae>
 8005708:	232d      	movs	r3, #45	; 0x2d
 800570a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800570e:	e798      	b.n	8005642 <_printf_float+0xae>
 8005710:	9a06      	ldr	r2, [sp, #24]
 8005712:	2a47      	cmp	r2, #71	; 0x47
 8005714:	d1be      	bne.n	8005694 <_printf_float+0x100>
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1bc      	bne.n	8005694 <_printf_float+0x100>
 800571a:	2301      	movs	r3, #1
 800571c:	e7b9      	b.n	8005692 <_printf_float+0xfe>
 800571e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005722:	d118      	bne.n	8005756 <_printf_float+0x1c2>
 8005724:	2900      	cmp	r1, #0
 8005726:	6863      	ldr	r3, [r4, #4]
 8005728:	dd0b      	ble.n	8005742 <_printf_float+0x1ae>
 800572a:	6121      	str	r1, [r4, #16]
 800572c:	b913      	cbnz	r3, 8005734 <_printf_float+0x1a0>
 800572e:	6822      	ldr	r2, [r4, #0]
 8005730:	07d0      	lsls	r0, r2, #31
 8005732:	d502      	bpl.n	800573a <_printf_float+0x1a6>
 8005734:	3301      	adds	r3, #1
 8005736:	440b      	add	r3, r1
 8005738:	6123      	str	r3, [r4, #16]
 800573a:	65a1      	str	r1, [r4, #88]	; 0x58
 800573c:	f04f 0900 	mov.w	r9, #0
 8005740:	e7de      	b.n	8005700 <_printf_float+0x16c>
 8005742:	b913      	cbnz	r3, 800574a <_printf_float+0x1b6>
 8005744:	6822      	ldr	r2, [r4, #0]
 8005746:	07d2      	lsls	r2, r2, #31
 8005748:	d501      	bpl.n	800574e <_printf_float+0x1ba>
 800574a:	3302      	adds	r3, #2
 800574c:	e7f4      	b.n	8005738 <_printf_float+0x1a4>
 800574e:	2301      	movs	r3, #1
 8005750:	e7f2      	b.n	8005738 <_printf_float+0x1a4>
 8005752:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005758:	4299      	cmp	r1, r3
 800575a:	db05      	blt.n	8005768 <_printf_float+0x1d4>
 800575c:	6823      	ldr	r3, [r4, #0]
 800575e:	6121      	str	r1, [r4, #16]
 8005760:	07d8      	lsls	r0, r3, #31
 8005762:	d5ea      	bpl.n	800573a <_printf_float+0x1a6>
 8005764:	1c4b      	adds	r3, r1, #1
 8005766:	e7e7      	b.n	8005738 <_printf_float+0x1a4>
 8005768:	2900      	cmp	r1, #0
 800576a:	bfd4      	ite	le
 800576c:	f1c1 0202 	rsble	r2, r1, #2
 8005770:	2201      	movgt	r2, #1
 8005772:	4413      	add	r3, r2
 8005774:	e7e0      	b.n	8005738 <_printf_float+0x1a4>
 8005776:	6823      	ldr	r3, [r4, #0]
 8005778:	055a      	lsls	r2, r3, #21
 800577a:	d407      	bmi.n	800578c <_printf_float+0x1f8>
 800577c:	6923      	ldr	r3, [r4, #16]
 800577e:	4642      	mov	r2, r8
 8005780:	4631      	mov	r1, r6
 8005782:	4628      	mov	r0, r5
 8005784:	47b8      	blx	r7
 8005786:	3001      	adds	r0, #1
 8005788:	d12c      	bne.n	80057e4 <_printf_float+0x250>
 800578a:	e764      	b.n	8005656 <_printf_float+0xc2>
 800578c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005790:	f240 80e0 	bls.w	8005954 <_printf_float+0x3c0>
 8005794:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005798:	2200      	movs	r2, #0
 800579a:	2300      	movs	r3, #0
 800579c:	f7fb f994 	bl	8000ac8 <__aeabi_dcmpeq>
 80057a0:	2800      	cmp	r0, #0
 80057a2:	d034      	beq.n	800580e <_printf_float+0x27a>
 80057a4:	4a37      	ldr	r2, [pc, #220]	; (8005884 <_printf_float+0x2f0>)
 80057a6:	2301      	movs	r3, #1
 80057a8:	4631      	mov	r1, r6
 80057aa:	4628      	mov	r0, r5
 80057ac:	47b8      	blx	r7
 80057ae:	3001      	adds	r0, #1
 80057b0:	f43f af51 	beq.w	8005656 <_printf_float+0xc2>
 80057b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80057b8:	429a      	cmp	r2, r3
 80057ba:	db02      	blt.n	80057c2 <_printf_float+0x22e>
 80057bc:	6823      	ldr	r3, [r4, #0]
 80057be:	07d8      	lsls	r0, r3, #31
 80057c0:	d510      	bpl.n	80057e4 <_printf_float+0x250>
 80057c2:	ee18 3a10 	vmov	r3, s16
 80057c6:	4652      	mov	r2, sl
 80057c8:	4631      	mov	r1, r6
 80057ca:	4628      	mov	r0, r5
 80057cc:	47b8      	blx	r7
 80057ce:	3001      	adds	r0, #1
 80057d0:	f43f af41 	beq.w	8005656 <_printf_float+0xc2>
 80057d4:	f04f 0800 	mov.w	r8, #0
 80057d8:	f104 091a 	add.w	r9, r4, #26
 80057dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057de:	3b01      	subs	r3, #1
 80057e0:	4543      	cmp	r3, r8
 80057e2:	dc09      	bgt.n	80057f8 <_printf_float+0x264>
 80057e4:	6823      	ldr	r3, [r4, #0]
 80057e6:	079b      	lsls	r3, r3, #30
 80057e8:	f100 8105 	bmi.w	80059f6 <_printf_float+0x462>
 80057ec:	68e0      	ldr	r0, [r4, #12]
 80057ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057f0:	4298      	cmp	r0, r3
 80057f2:	bfb8      	it	lt
 80057f4:	4618      	movlt	r0, r3
 80057f6:	e730      	b.n	800565a <_printf_float+0xc6>
 80057f8:	2301      	movs	r3, #1
 80057fa:	464a      	mov	r2, r9
 80057fc:	4631      	mov	r1, r6
 80057fe:	4628      	mov	r0, r5
 8005800:	47b8      	blx	r7
 8005802:	3001      	adds	r0, #1
 8005804:	f43f af27 	beq.w	8005656 <_printf_float+0xc2>
 8005808:	f108 0801 	add.w	r8, r8, #1
 800580c:	e7e6      	b.n	80057dc <_printf_float+0x248>
 800580e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005810:	2b00      	cmp	r3, #0
 8005812:	dc39      	bgt.n	8005888 <_printf_float+0x2f4>
 8005814:	4a1b      	ldr	r2, [pc, #108]	; (8005884 <_printf_float+0x2f0>)
 8005816:	2301      	movs	r3, #1
 8005818:	4631      	mov	r1, r6
 800581a:	4628      	mov	r0, r5
 800581c:	47b8      	blx	r7
 800581e:	3001      	adds	r0, #1
 8005820:	f43f af19 	beq.w	8005656 <_printf_float+0xc2>
 8005824:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005828:	4313      	orrs	r3, r2
 800582a:	d102      	bne.n	8005832 <_printf_float+0x29e>
 800582c:	6823      	ldr	r3, [r4, #0]
 800582e:	07d9      	lsls	r1, r3, #31
 8005830:	d5d8      	bpl.n	80057e4 <_printf_float+0x250>
 8005832:	ee18 3a10 	vmov	r3, s16
 8005836:	4652      	mov	r2, sl
 8005838:	4631      	mov	r1, r6
 800583a:	4628      	mov	r0, r5
 800583c:	47b8      	blx	r7
 800583e:	3001      	adds	r0, #1
 8005840:	f43f af09 	beq.w	8005656 <_printf_float+0xc2>
 8005844:	f04f 0900 	mov.w	r9, #0
 8005848:	f104 0a1a 	add.w	sl, r4, #26
 800584c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800584e:	425b      	negs	r3, r3
 8005850:	454b      	cmp	r3, r9
 8005852:	dc01      	bgt.n	8005858 <_printf_float+0x2c4>
 8005854:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005856:	e792      	b.n	800577e <_printf_float+0x1ea>
 8005858:	2301      	movs	r3, #1
 800585a:	4652      	mov	r2, sl
 800585c:	4631      	mov	r1, r6
 800585e:	4628      	mov	r0, r5
 8005860:	47b8      	blx	r7
 8005862:	3001      	adds	r0, #1
 8005864:	f43f aef7 	beq.w	8005656 <_printf_float+0xc2>
 8005868:	f109 0901 	add.w	r9, r9, #1
 800586c:	e7ee      	b.n	800584c <_printf_float+0x2b8>
 800586e:	bf00      	nop
 8005870:	7fefffff 	.word	0x7fefffff
 8005874:	08009248 	.word	0x08009248
 8005878:	0800924c 	.word	0x0800924c
 800587c:	08009254 	.word	0x08009254
 8005880:	08009250 	.word	0x08009250
 8005884:	08009258 	.word	0x08009258
 8005888:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800588a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800588c:	429a      	cmp	r2, r3
 800588e:	bfa8      	it	ge
 8005890:	461a      	movge	r2, r3
 8005892:	2a00      	cmp	r2, #0
 8005894:	4691      	mov	r9, r2
 8005896:	dc37      	bgt.n	8005908 <_printf_float+0x374>
 8005898:	f04f 0b00 	mov.w	fp, #0
 800589c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058a0:	f104 021a 	add.w	r2, r4, #26
 80058a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80058a6:	9305      	str	r3, [sp, #20]
 80058a8:	eba3 0309 	sub.w	r3, r3, r9
 80058ac:	455b      	cmp	r3, fp
 80058ae:	dc33      	bgt.n	8005918 <_printf_float+0x384>
 80058b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058b4:	429a      	cmp	r2, r3
 80058b6:	db3b      	blt.n	8005930 <_printf_float+0x39c>
 80058b8:	6823      	ldr	r3, [r4, #0]
 80058ba:	07da      	lsls	r2, r3, #31
 80058bc:	d438      	bmi.n	8005930 <_printf_float+0x39c>
 80058be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058c0:	9a05      	ldr	r2, [sp, #20]
 80058c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80058c4:	1a9a      	subs	r2, r3, r2
 80058c6:	eba3 0901 	sub.w	r9, r3, r1
 80058ca:	4591      	cmp	r9, r2
 80058cc:	bfa8      	it	ge
 80058ce:	4691      	movge	r9, r2
 80058d0:	f1b9 0f00 	cmp.w	r9, #0
 80058d4:	dc35      	bgt.n	8005942 <_printf_float+0x3ae>
 80058d6:	f04f 0800 	mov.w	r8, #0
 80058da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80058de:	f104 0a1a 	add.w	sl, r4, #26
 80058e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80058e6:	1a9b      	subs	r3, r3, r2
 80058e8:	eba3 0309 	sub.w	r3, r3, r9
 80058ec:	4543      	cmp	r3, r8
 80058ee:	f77f af79 	ble.w	80057e4 <_printf_float+0x250>
 80058f2:	2301      	movs	r3, #1
 80058f4:	4652      	mov	r2, sl
 80058f6:	4631      	mov	r1, r6
 80058f8:	4628      	mov	r0, r5
 80058fa:	47b8      	blx	r7
 80058fc:	3001      	adds	r0, #1
 80058fe:	f43f aeaa 	beq.w	8005656 <_printf_float+0xc2>
 8005902:	f108 0801 	add.w	r8, r8, #1
 8005906:	e7ec      	b.n	80058e2 <_printf_float+0x34e>
 8005908:	4613      	mov	r3, r2
 800590a:	4631      	mov	r1, r6
 800590c:	4642      	mov	r2, r8
 800590e:	4628      	mov	r0, r5
 8005910:	47b8      	blx	r7
 8005912:	3001      	adds	r0, #1
 8005914:	d1c0      	bne.n	8005898 <_printf_float+0x304>
 8005916:	e69e      	b.n	8005656 <_printf_float+0xc2>
 8005918:	2301      	movs	r3, #1
 800591a:	4631      	mov	r1, r6
 800591c:	4628      	mov	r0, r5
 800591e:	9205      	str	r2, [sp, #20]
 8005920:	47b8      	blx	r7
 8005922:	3001      	adds	r0, #1
 8005924:	f43f ae97 	beq.w	8005656 <_printf_float+0xc2>
 8005928:	9a05      	ldr	r2, [sp, #20]
 800592a:	f10b 0b01 	add.w	fp, fp, #1
 800592e:	e7b9      	b.n	80058a4 <_printf_float+0x310>
 8005930:	ee18 3a10 	vmov	r3, s16
 8005934:	4652      	mov	r2, sl
 8005936:	4631      	mov	r1, r6
 8005938:	4628      	mov	r0, r5
 800593a:	47b8      	blx	r7
 800593c:	3001      	adds	r0, #1
 800593e:	d1be      	bne.n	80058be <_printf_float+0x32a>
 8005940:	e689      	b.n	8005656 <_printf_float+0xc2>
 8005942:	9a05      	ldr	r2, [sp, #20]
 8005944:	464b      	mov	r3, r9
 8005946:	4442      	add	r2, r8
 8005948:	4631      	mov	r1, r6
 800594a:	4628      	mov	r0, r5
 800594c:	47b8      	blx	r7
 800594e:	3001      	adds	r0, #1
 8005950:	d1c1      	bne.n	80058d6 <_printf_float+0x342>
 8005952:	e680      	b.n	8005656 <_printf_float+0xc2>
 8005954:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005956:	2a01      	cmp	r2, #1
 8005958:	dc01      	bgt.n	800595e <_printf_float+0x3ca>
 800595a:	07db      	lsls	r3, r3, #31
 800595c:	d538      	bpl.n	80059d0 <_printf_float+0x43c>
 800595e:	2301      	movs	r3, #1
 8005960:	4642      	mov	r2, r8
 8005962:	4631      	mov	r1, r6
 8005964:	4628      	mov	r0, r5
 8005966:	47b8      	blx	r7
 8005968:	3001      	adds	r0, #1
 800596a:	f43f ae74 	beq.w	8005656 <_printf_float+0xc2>
 800596e:	ee18 3a10 	vmov	r3, s16
 8005972:	4652      	mov	r2, sl
 8005974:	4631      	mov	r1, r6
 8005976:	4628      	mov	r0, r5
 8005978:	47b8      	blx	r7
 800597a:	3001      	adds	r0, #1
 800597c:	f43f ae6b 	beq.w	8005656 <_printf_float+0xc2>
 8005980:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005984:	2200      	movs	r2, #0
 8005986:	2300      	movs	r3, #0
 8005988:	f7fb f89e 	bl	8000ac8 <__aeabi_dcmpeq>
 800598c:	b9d8      	cbnz	r0, 80059c6 <_printf_float+0x432>
 800598e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005990:	f108 0201 	add.w	r2, r8, #1
 8005994:	3b01      	subs	r3, #1
 8005996:	4631      	mov	r1, r6
 8005998:	4628      	mov	r0, r5
 800599a:	47b8      	blx	r7
 800599c:	3001      	adds	r0, #1
 800599e:	d10e      	bne.n	80059be <_printf_float+0x42a>
 80059a0:	e659      	b.n	8005656 <_printf_float+0xc2>
 80059a2:	2301      	movs	r3, #1
 80059a4:	4652      	mov	r2, sl
 80059a6:	4631      	mov	r1, r6
 80059a8:	4628      	mov	r0, r5
 80059aa:	47b8      	blx	r7
 80059ac:	3001      	adds	r0, #1
 80059ae:	f43f ae52 	beq.w	8005656 <_printf_float+0xc2>
 80059b2:	f108 0801 	add.w	r8, r8, #1
 80059b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059b8:	3b01      	subs	r3, #1
 80059ba:	4543      	cmp	r3, r8
 80059bc:	dcf1      	bgt.n	80059a2 <_printf_float+0x40e>
 80059be:	464b      	mov	r3, r9
 80059c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80059c4:	e6dc      	b.n	8005780 <_printf_float+0x1ec>
 80059c6:	f04f 0800 	mov.w	r8, #0
 80059ca:	f104 0a1a 	add.w	sl, r4, #26
 80059ce:	e7f2      	b.n	80059b6 <_printf_float+0x422>
 80059d0:	2301      	movs	r3, #1
 80059d2:	4642      	mov	r2, r8
 80059d4:	e7df      	b.n	8005996 <_printf_float+0x402>
 80059d6:	2301      	movs	r3, #1
 80059d8:	464a      	mov	r2, r9
 80059da:	4631      	mov	r1, r6
 80059dc:	4628      	mov	r0, r5
 80059de:	47b8      	blx	r7
 80059e0:	3001      	adds	r0, #1
 80059e2:	f43f ae38 	beq.w	8005656 <_printf_float+0xc2>
 80059e6:	f108 0801 	add.w	r8, r8, #1
 80059ea:	68e3      	ldr	r3, [r4, #12]
 80059ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80059ee:	1a5b      	subs	r3, r3, r1
 80059f0:	4543      	cmp	r3, r8
 80059f2:	dcf0      	bgt.n	80059d6 <_printf_float+0x442>
 80059f4:	e6fa      	b.n	80057ec <_printf_float+0x258>
 80059f6:	f04f 0800 	mov.w	r8, #0
 80059fa:	f104 0919 	add.w	r9, r4, #25
 80059fe:	e7f4      	b.n	80059ea <_printf_float+0x456>

08005a00 <_printf_common>:
 8005a00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a04:	4616      	mov	r6, r2
 8005a06:	4699      	mov	r9, r3
 8005a08:	688a      	ldr	r2, [r1, #8]
 8005a0a:	690b      	ldr	r3, [r1, #16]
 8005a0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a10:	4293      	cmp	r3, r2
 8005a12:	bfb8      	it	lt
 8005a14:	4613      	movlt	r3, r2
 8005a16:	6033      	str	r3, [r6, #0]
 8005a18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a1c:	4607      	mov	r7, r0
 8005a1e:	460c      	mov	r4, r1
 8005a20:	b10a      	cbz	r2, 8005a26 <_printf_common+0x26>
 8005a22:	3301      	adds	r3, #1
 8005a24:	6033      	str	r3, [r6, #0]
 8005a26:	6823      	ldr	r3, [r4, #0]
 8005a28:	0699      	lsls	r1, r3, #26
 8005a2a:	bf42      	ittt	mi
 8005a2c:	6833      	ldrmi	r3, [r6, #0]
 8005a2e:	3302      	addmi	r3, #2
 8005a30:	6033      	strmi	r3, [r6, #0]
 8005a32:	6825      	ldr	r5, [r4, #0]
 8005a34:	f015 0506 	ands.w	r5, r5, #6
 8005a38:	d106      	bne.n	8005a48 <_printf_common+0x48>
 8005a3a:	f104 0a19 	add.w	sl, r4, #25
 8005a3e:	68e3      	ldr	r3, [r4, #12]
 8005a40:	6832      	ldr	r2, [r6, #0]
 8005a42:	1a9b      	subs	r3, r3, r2
 8005a44:	42ab      	cmp	r3, r5
 8005a46:	dc26      	bgt.n	8005a96 <_printf_common+0x96>
 8005a48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005a4c:	1e13      	subs	r3, r2, #0
 8005a4e:	6822      	ldr	r2, [r4, #0]
 8005a50:	bf18      	it	ne
 8005a52:	2301      	movne	r3, #1
 8005a54:	0692      	lsls	r2, r2, #26
 8005a56:	d42b      	bmi.n	8005ab0 <_printf_common+0xb0>
 8005a58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005a5c:	4649      	mov	r1, r9
 8005a5e:	4638      	mov	r0, r7
 8005a60:	47c0      	blx	r8
 8005a62:	3001      	adds	r0, #1
 8005a64:	d01e      	beq.n	8005aa4 <_printf_common+0xa4>
 8005a66:	6823      	ldr	r3, [r4, #0]
 8005a68:	68e5      	ldr	r5, [r4, #12]
 8005a6a:	6832      	ldr	r2, [r6, #0]
 8005a6c:	f003 0306 	and.w	r3, r3, #6
 8005a70:	2b04      	cmp	r3, #4
 8005a72:	bf08      	it	eq
 8005a74:	1aad      	subeq	r5, r5, r2
 8005a76:	68a3      	ldr	r3, [r4, #8]
 8005a78:	6922      	ldr	r2, [r4, #16]
 8005a7a:	bf0c      	ite	eq
 8005a7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a80:	2500      	movne	r5, #0
 8005a82:	4293      	cmp	r3, r2
 8005a84:	bfc4      	itt	gt
 8005a86:	1a9b      	subgt	r3, r3, r2
 8005a88:	18ed      	addgt	r5, r5, r3
 8005a8a:	2600      	movs	r6, #0
 8005a8c:	341a      	adds	r4, #26
 8005a8e:	42b5      	cmp	r5, r6
 8005a90:	d11a      	bne.n	8005ac8 <_printf_common+0xc8>
 8005a92:	2000      	movs	r0, #0
 8005a94:	e008      	b.n	8005aa8 <_printf_common+0xa8>
 8005a96:	2301      	movs	r3, #1
 8005a98:	4652      	mov	r2, sl
 8005a9a:	4649      	mov	r1, r9
 8005a9c:	4638      	mov	r0, r7
 8005a9e:	47c0      	blx	r8
 8005aa0:	3001      	adds	r0, #1
 8005aa2:	d103      	bne.n	8005aac <_printf_common+0xac>
 8005aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8005aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aac:	3501      	adds	r5, #1
 8005aae:	e7c6      	b.n	8005a3e <_printf_common+0x3e>
 8005ab0:	18e1      	adds	r1, r4, r3
 8005ab2:	1c5a      	adds	r2, r3, #1
 8005ab4:	2030      	movs	r0, #48	; 0x30
 8005ab6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005aba:	4422      	add	r2, r4
 8005abc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005ac0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ac4:	3302      	adds	r3, #2
 8005ac6:	e7c7      	b.n	8005a58 <_printf_common+0x58>
 8005ac8:	2301      	movs	r3, #1
 8005aca:	4622      	mov	r2, r4
 8005acc:	4649      	mov	r1, r9
 8005ace:	4638      	mov	r0, r7
 8005ad0:	47c0      	blx	r8
 8005ad2:	3001      	adds	r0, #1
 8005ad4:	d0e6      	beq.n	8005aa4 <_printf_common+0xa4>
 8005ad6:	3601      	adds	r6, #1
 8005ad8:	e7d9      	b.n	8005a8e <_printf_common+0x8e>
	...

08005adc <_printf_i>:
 8005adc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ae0:	7e0f      	ldrb	r7, [r1, #24]
 8005ae2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ae4:	2f78      	cmp	r7, #120	; 0x78
 8005ae6:	4691      	mov	r9, r2
 8005ae8:	4680      	mov	r8, r0
 8005aea:	460c      	mov	r4, r1
 8005aec:	469a      	mov	sl, r3
 8005aee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005af2:	d807      	bhi.n	8005b04 <_printf_i+0x28>
 8005af4:	2f62      	cmp	r7, #98	; 0x62
 8005af6:	d80a      	bhi.n	8005b0e <_printf_i+0x32>
 8005af8:	2f00      	cmp	r7, #0
 8005afa:	f000 80d8 	beq.w	8005cae <_printf_i+0x1d2>
 8005afe:	2f58      	cmp	r7, #88	; 0x58
 8005b00:	f000 80a3 	beq.w	8005c4a <_printf_i+0x16e>
 8005b04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b0c:	e03a      	b.n	8005b84 <_printf_i+0xa8>
 8005b0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b12:	2b15      	cmp	r3, #21
 8005b14:	d8f6      	bhi.n	8005b04 <_printf_i+0x28>
 8005b16:	a101      	add	r1, pc, #4	; (adr r1, 8005b1c <_printf_i+0x40>)
 8005b18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b1c:	08005b75 	.word	0x08005b75
 8005b20:	08005b89 	.word	0x08005b89
 8005b24:	08005b05 	.word	0x08005b05
 8005b28:	08005b05 	.word	0x08005b05
 8005b2c:	08005b05 	.word	0x08005b05
 8005b30:	08005b05 	.word	0x08005b05
 8005b34:	08005b89 	.word	0x08005b89
 8005b38:	08005b05 	.word	0x08005b05
 8005b3c:	08005b05 	.word	0x08005b05
 8005b40:	08005b05 	.word	0x08005b05
 8005b44:	08005b05 	.word	0x08005b05
 8005b48:	08005c95 	.word	0x08005c95
 8005b4c:	08005bb9 	.word	0x08005bb9
 8005b50:	08005c77 	.word	0x08005c77
 8005b54:	08005b05 	.word	0x08005b05
 8005b58:	08005b05 	.word	0x08005b05
 8005b5c:	08005cb7 	.word	0x08005cb7
 8005b60:	08005b05 	.word	0x08005b05
 8005b64:	08005bb9 	.word	0x08005bb9
 8005b68:	08005b05 	.word	0x08005b05
 8005b6c:	08005b05 	.word	0x08005b05
 8005b70:	08005c7f 	.word	0x08005c7f
 8005b74:	682b      	ldr	r3, [r5, #0]
 8005b76:	1d1a      	adds	r2, r3, #4
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	602a      	str	r2, [r5, #0]
 8005b7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005b80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005b84:	2301      	movs	r3, #1
 8005b86:	e0a3      	b.n	8005cd0 <_printf_i+0x1f4>
 8005b88:	6820      	ldr	r0, [r4, #0]
 8005b8a:	6829      	ldr	r1, [r5, #0]
 8005b8c:	0606      	lsls	r6, r0, #24
 8005b8e:	f101 0304 	add.w	r3, r1, #4
 8005b92:	d50a      	bpl.n	8005baa <_printf_i+0xce>
 8005b94:	680e      	ldr	r6, [r1, #0]
 8005b96:	602b      	str	r3, [r5, #0]
 8005b98:	2e00      	cmp	r6, #0
 8005b9a:	da03      	bge.n	8005ba4 <_printf_i+0xc8>
 8005b9c:	232d      	movs	r3, #45	; 0x2d
 8005b9e:	4276      	negs	r6, r6
 8005ba0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ba4:	485e      	ldr	r0, [pc, #376]	; (8005d20 <_printf_i+0x244>)
 8005ba6:	230a      	movs	r3, #10
 8005ba8:	e019      	b.n	8005bde <_printf_i+0x102>
 8005baa:	680e      	ldr	r6, [r1, #0]
 8005bac:	602b      	str	r3, [r5, #0]
 8005bae:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005bb2:	bf18      	it	ne
 8005bb4:	b236      	sxthne	r6, r6
 8005bb6:	e7ef      	b.n	8005b98 <_printf_i+0xbc>
 8005bb8:	682b      	ldr	r3, [r5, #0]
 8005bba:	6820      	ldr	r0, [r4, #0]
 8005bbc:	1d19      	adds	r1, r3, #4
 8005bbe:	6029      	str	r1, [r5, #0]
 8005bc0:	0601      	lsls	r1, r0, #24
 8005bc2:	d501      	bpl.n	8005bc8 <_printf_i+0xec>
 8005bc4:	681e      	ldr	r6, [r3, #0]
 8005bc6:	e002      	b.n	8005bce <_printf_i+0xf2>
 8005bc8:	0646      	lsls	r6, r0, #25
 8005bca:	d5fb      	bpl.n	8005bc4 <_printf_i+0xe8>
 8005bcc:	881e      	ldrh	r6, [r3, #0]
 8005bce:	4854      	ldr	r0, [pc, #336]	; (8005d20 <_printf_i+0x244>)
 8005bd0:	2f6f      	cmp	r7, #111	; 0x6f
 8005bd2:	bf0c      	ite	eq
 8005bd4:	2308      	moveq	r3, #8
 8005bd6:	230a      	movne	r3, #10
 8005bd8:	2100      	movs	r1, #0
 8005bda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005bde:	6865      	ldr	r5, [r4, #4]
 8005be0:	60a5      	str	r5, [r4, #8]
 8005be2:	2d00      	cmp	r5, #0
 8005be4:	bfa2      	ittt	ge
 8005be6:	6821      	ldrge	r1, [r4, #0]
 8005be8:	f021 0104 	bicge.w	r1, r1, #4
 8005bec:	6021      	strge	r1, [r4, #0]
 8005bee:	b90e      	cbnz	r6, 8005bf4 <_printf_i+0x118>
 8005bf0:	2d00      	cmp	r5, #0
 8005bf2:	d04d      	beq.n	8005c90 <_printf_i+0x1b4>
 8005bf4:	4615      	mov	r5, r2
 8005bf6:	fbb6 f1f3 	udiv	r1, r6, r3
 8005bfa:	fb03 6711 	mls	r7, r3, r1, r6
 8005bfe:	5dc7      	ldrb	r7, [r0, r7]
 8005c00:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005c04:	4637      	mov	r7, r6
 8005c06:	42bb      	cmp	r3, r7
 8005c08:	460e      	mov	r6, r1
 8005c0a:	d9f4      	bls.n	8005bf6 <_printf_i+0x11a>
 8005c0c:	2b08      	cmp	r3, #8
 8005c0e:	d10b      	bne.n	8005c28 <_printf_i+0x14c>
 8005c10:	6823      	ldr	r3, [r4, #0]
 8005c12:	07de      	lsls	r6, r3, #31
 8005c14:	d508      	bpl.n	8005c28 <_printf_i+0x14c>
 8005c16:	6923      	ldr	r3, [r4, #16]
 8005c18:	6861      	ldr	r1, [r4, #4]
 8005c1a:	4299      	cmp	r1, r3
 8005c1c:	bfde      	ittt	le
 8005c1e:	2330      	movle	r3, #48	; 0x30
 8005c20:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005c24:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005c28:	1b52      	subs	r2, r2, r5
 8005c2a:	6122      	str	r2, [r4, #16]
 8005c2c:	f8cd a000 	str.w	sl, [sp]
 8005c30:	464b      	mov	r3, r9
 8005c32:	aa03      	add	r2, sp, #12
 8005c34:	4621      	mov	r1, r4
 8005c36:	4640      	mov	r0, r8
 8005c38:	f7ff fee2 	bl	8005a00 <_printf_common>
 8005c3c:	3001      	adds	r0, #1
 8005c3e:	d14c      	bne.n	8005cda <_printf_i+0x1fe>
 8005c40:	f04f 30ff 	mov.w	r0, #4294967295
 8005c44:	b004      	add	sp, #16
 8005c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c4a:	4835      	ldr	r0, [pc, #212]	; (8005d20 <_printf_i+0x244>)
 8005c4c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005c50:	6829      	ldr	r1, [r5, #0]
 8005c52:	6823      	ldr	r3, [r4, #0]
 8005c54:	f851 6b04 	ldr.w	r6, [r1], #4
 8005c58:	6029      	str	r1, [r5, #0]
 8005c5a:	061d      	lsls	r5, r3, #24
 8005c5c:	d514      	bpl.n	8005c88 <_printf_i+0x1ac>
 8005c5e:	07df      	lsls	r7, r3, #31
 8005c60:	bf44      	itt	mi
 8005c62:	f043 0320 	orrmi.w	r3, r3, #32
 8005c66:	6023      	strmi	r3, [r4, #0]
 8005c68:	b91e      	cbnz	r6, 8005c72 <_printf_i+0x196>
 8005c6a:	6823      	ldr	r3, [r4, #0]
 8005c6c:	f023 0320 	bic.w	r3, r3, #32
 8005c70:	6023      	str	r3, [r4, #0]
 8005c72:	2310      	movs	r3, #16
 8005c74:	e7b0      	b.n	8005bd8 <_printf_i+0xfc>
 8005c76:	6823      	ldr	r3, [r4, #0]
 8005c78:	f043 0320 	orr.w	r3, r3, #32
 8005c7c:	6023      	str	r3, [r4, #0]
 8005c7e:	2378      	movs	r3, #120	; 0x78
 8005c80:	4828      	ldr	r0, [pc, #160]	; (8005d24 <_printf_i+0x248>)
 8005c82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005c86:	e7e3      	b.n	8005c50 <_printf_i+0x174>
 8005c88:	0659      	lsls	r1, r3, #25
 8005c8a:	bf48      	it	mi
 8005c8c:	b2b6      	uxthmi	r6, r6
 8005c8e:	e7e6      	b.n	8005c5e <_printf_i+0x182>
 8005c90:	4615      	mov	r5, r2
 8005c92:	e7bb      	b.n	8005c0c <_printf_i+0x130>
 8005c94:	682b      	ldr	r3, [r5, #0]
 8005c96:	6826      	ldr	r6, [r4, #0]
 8005c98:	6961      	ldr	r1, [r4, #20]
 8005c9a:	1d18      	adds	r0, r3, #4
 8005c9c:	6028      	str	r0, [r5, #0]
 8005c9e:	0635      	lsls	r5, r6, #24
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	d501      	bpl.n	8005ca8 <_printf_i+0x1cc>
 8005ca4:	6019      	str	r1, [r3, #0]
 8005ca6:	e002      	b.n	8005cae <_printf_i+0x1d2>
 8005ca8:	0670      	lsls	r0, r6, #25
 8005caa:	d5fb      	bpl.n	8005ca4 <_printf_i+0x1c8>
 8005cac:	8019      	strh	r1, [r3, #0]
 8005cae:	2300      	movs	r3, #0
 8005cb0:	6123      	str	r3, [r4, #16]
 8005cb2:	4615      	mov	r5, r2
 8005cb4:	e7ba      	b.n	8005c2c <_printf_i+0x150>
 8005cb6:	682b      	ldr	r3, [r5, #0]
 8005cb8:	1d1a      	adds	r2, r3, #4
 8005cba:	602a      	str	r2, [r5, #0]
 8005cbc:	681d      	ldr	r5, [r3, #0]
 8005cbe:	6862      	ldr	r2, [r4, #4]
 8005cc0:	2100      	movs	r1, #0
 8005cc2:	4628      	mov	r0, r5
 8005cc4:	f7fa fa8c 	bl	80001e0 <memchr>
 8005cc8:	b108      	cbz	r0, 8005cce <_printf_i+0x1f2>
 8005cca:	1b40      	subs	r0, r0, r5
 8005ccc:	6060      	str	r0, [r4, #4]
 8005cce:	6863      	ldr	r3, [r4, #4]
 8005cd0:	6123      	str	r3, [r4, #16]
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cd8:	e7a8      	b.n	8005c2c <_printf_i+0x150>
 8005cda:	6923      	ldr	r3, [r4, #16]
 8005cdc:	462a      	mov	r2, r5
 8005cde:	4649      	mov	r1, r9
 8005ce0:	4640      	mov	r0, r8
 8005ce2:	47d0      	blx	sl
 8005ce4:	3001      	adds	r0, #1
 8005ce6:	d0ab      	beq.n	8005c40 <_printf_i+0x164>
 8005ce8:	6823      	ldr	r3, [r4, #0]
 8005cea:	079b      	lsls	r3, r3, #30
 8005cec:	d413      	bmi.n	8005d16 <_printf_i+0x23a>
 8005cee:	68e0      	ldr	r0, [r4, #12]
 8005cf0:	9b03      	ldr	r3, [sp, #12]
 8005cf2:	4298      	cmp	r0, r3
 8005cf4:	bfb8      	it	lt
 8005cf6:	4618      	movlt	r0, r3
 8005cf8:	e7a4      	b.n	8005c44 <_printf_i+0x168>
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	4632      	mov	r2, r6
 8005cfe:	4649      	mov	r1, r9
 8005d00:	4640      	mov	r0, r8
 8005d02:	47d0      	blx	sl
 8005d04:	3001      	adds	r0, #1
 8005d06:	d09b      	beq.n	8005c40 <_printf_i+0x164>
 8005d08:	3501      	adds	r5, #1
 8005d0a:	68e3      	ldr	r3, [r4, #12]
 8005d0c:	9903      	ldr	r1, [sp, #12]
 8005d0e:	1a5b      	subs	r3, r3, r1
 8005d10:	42ab      	cmp	r3, r5
 8005d12:	dcf2      	bgt.n	8005cfa <_printf_i+0x21e>
 8005d14:	e7eb      	b.n	8005cee <_printf_i+0x212>
 8005d16:	2500      	movs	r5, #0
 8005d18:	f104 0619 	add.w	r6, r4, #25
 8005d1c:	e7f5      	b.n	8005d0a <_printf_i+0x22e>
 8005d1e:	bf00      	nop
 8005d20:	0800925a 	.word	0x0800925a
 8005d24:	0800926b 	.word	0x0800926b

08005d28 <iprintf>:
 8005d28:	b40f      	push	{r0, r1, r2, r3}
 8005d2a:	4b0a      	ldr	r3, [pc, #40]	; (8005d54 <iprintf+0x2c>)
 8005d2c:	b513      	push	{r0, r1, r4, lr}
 8005d2e:	681c      	ldr	r4, [r3, #0]
 8005d30:	b124      	cbz	r4, 8005d3c <iprintf+0x14>
 8005d32:	69a3      	ldr	r3, [r4, #24]
 8005d34:	b913      	cbnz	r3, 8005d3c <iprintf+0x14>
 8005d36:	4620      	mov	r0, r4
 8005d38:	f001 f90e 	bl	8006f58 <__sinit>
 8005d3c:	ab05      	add	r3, sp, #20
 8005d3e:	9a04      	ldr	r2, [sp, #16]
 8005d40:	68a1      	ldr	r1, [r4, #8]
 8005d42:	9301      	str	r3, [sp, #4]
 8005d44:	4620      	mov	r0, r4
 8005d46:	f002 f827 	bl	8007d98 <_vfiprintf_r>
 8005d4a:	b002      	add	sp, #8
 8005d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d50:	b004      	add	sp, #16
 8005d52:	4770      	bx	lr
 8005d54:	2000002c 	.word	0x2000002c

08005d58 <_puts_r>:
 8005d58:	b570      	push	{r4, r5, r6, lr}
 8005d5a:	460e      	mov	r6, r1
 8005d5c:	4605      	mov	r5, r0
 8005d5e:	b118      	cbz	r0, 8005d68 <_puts_r+0x10>
 8005d60:	6983      	ldr	r3, [r0, #24]
 8005d62:	b90b      	cbnz	r3, 8005d68 <_puts_r+0x10>
 8005d64:	f001 f8f8 	bl	8006f58 <__sinit>
 8005d68:	69ab      	ldr	r3, [r5, #24]
 8005d6a:	68ac      	ldr	r4, [r5, #8]
 8005d6c:	b913      	cbnz	r3, 8005d74 <_puts_r+0x1c>
 8005d6e:	4628      	mov	r0, r5
 8005d70:	f001 f8f2 	bl	8006f58 <__sinit>
 8005d74:	4b2c      	ldr	r3, [pc, #176]	; (8005e28 <_puts_r+0xd0>)
 8005d76:	429c      	cmp	r4, r3
 8005d78:	d120      	bne.n	8005dbc <_puts_r+0x64>
 8005d7a:	686c      	ldr	r4, [r5, #4]
 8005d7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d7e:	07db      	lsls	r3, r3, #31
 8005d80:	d405      	bmi.n	8005d8e <_puts_r+0x36>
 8005d82:	89a3      	ldrh	r3, [r4, #12]
 8005d84:	0598      	lsls	r0, r3, #22
 8005d86:	d402      	bmi.n	8005d8e <_puts_r+0x36>
 8005d88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d8a:	f001 f988 	bl	800709e <__retarget_lock_acquire_recursive>
 8005d8e:	89a3      	ldrh	r3, [r4, #12]
 8005d90:	0719      	lsls	r1, r3, #28
 8005d92:	d51d      	bpl.n	8005dd0 <_puts_r+0x78>
 8005d94:	6923      	ldr	r3, [r4, #16]
 8005d96:	b1db      	cbz	r3, 8005dd0 <_puts_r+0x78>
 8005d98:	3e01      	subs	r6, #1
 8005d9a:	68a3      	ldr	r3, [r4, #8]
 8005d9c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005da0:	3b01      	subs	r3, #1
 8005da2:	60a3      	str	r3, [r4, #8]
 8005da4:	bb39      	cbnz	r1, 8005df6 <_puts_r+0x9e>
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	da38      	bge.n	8005e1c <_puts_r+0xc4>
 8005daa:	4622      	mov	r2, r4
 8005dac:	210a      	movs	r1, #10
 8005dae:	4628      	mov	r0, r5
 8005db0:	f000 f87c 	bl	8005eac <__swbuf_r>
 8005db4:	3001      	adds	r0, #1
 8005db6:	d011      	beq.n	8005ddc <_puts_r+0x84>
 8005db8:	250a      	movs	r5, #10
 8005dba:	e011      	b.n	8005de0 <_puts_r+0x88>
 8005dbc:	4b1b      	ldr	r3, [pc, #108]	; (8005e2c <_puts_r+0xd4>)
 8005dbe:	429c      	cmp	r4, r3
 8005dc0:	d101      	bne.n	8005dc6 <_puts_r+0x6e>
 8005dc2:	68ac      	ldr	r4, [r5, #8]
 8005dc4:	e7da      	b.n	8005d7c <_puts_r+0x24>
 8005dc6:	4b1a      	ldr	r3, [pc, #104]	; (8005e30 <_puts_r+0xd8>)
 8005dc8:	429c      	cmp	r4, r3
 8005dca:	bf08      	it	eq
 8005dcc:	68ec      	ldreq	r4, [r5, #12]
 8005dce:	e7d5      	b.n	8005d7c <_puts_r+0x24>
 8005dd0:	4621      	mov	r1, r4
 8005dd2:	4628      	mov	r0, r5
 8005dd4:	f000 f8bc 	bl	8005f50 <__swsetup_r>
 8005dd8:	2800      	cmp	r0, #0
 8005dda:	d0dd      	beq.n	8005d98 <_puts_r+0x40>
 8005ddc:	f04f 35ff 	mov.w	r5, #4294967295
 8005de0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005de2:	07da      	lsls	r2, r3, #31
 8005de4:	d405      	bmi.n	8005df2 <_puts_r+0x9a>
 8005de6:	89a3      	ldrh	r3, [r4, #12]
 8005de8:	059b      	lsls	r3, r3, #22
 8005dea:	d402      	bmi.n	8005df2 <_puts_r+0x9a>
 8005dec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005dee:	f001 f957 	bl	80070a0 <__retarget_lock_release_recursive>
 8005df2:	4628      	mov	r0, r5
 8005df4:	bd70      	pop	{r4, r5, r6, pc}
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	da04      	bge.n	8005e04 <_puts_r+0xac>
 8005dfa:	69a2      	ldr	r2, [r4, #24]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	dc06      	bgt.n	8005e0e <_puts_r+0xb6>
 8005e00:	290a      	cmp	r1, #10
 8005e02:	d004      	beq.n	8005e0e <_puts_r+0xb6>
 8005e04:	6823      	ldr	r3, [r4, #0]
 8005e06:	1c5a      	adds	r2, r3, #1
 8005e08:	6022      	str	r2, [r4, #0]
 8005e0a:	7019      	strb	r1, [r3, #0]
 8005e0c:	e7c5      	b.n	8005d9a <_puts_r+0x42>
 8005e0e:	4622      	mov	r2, r4
 8005e10:	4628      	mov	r0, r5
 8005e12:	f000 f84b 	bl	8005eac <__swbuf_r>
 8005e16:	3001      	adds	r0, #1
 8005e18:	d1bf      	bne.n	8005d9a <_puts_r+0x42>
 8005e1a:	e7df      	b.n	8005ddc <_puts_r+0x84>
 8005e1c:	6823      	ldr	r3, [r4, #0]
 8005e1e:	250a      	movs	r5, #10
 8005e20:	1c5a      	adds	r2, r3, #1
 8005e22:	6022      	str	r2, [r4, #0]
 8005e24:	701d      	strb	r5, [r3, #0]
 8005e26:	e7db      	b.n	8005de0 <_puts_r+0x88>
 8005e28:	0800932c 	.word	0x0800932c
 8005e2c:	0800934c 	.word	0x0800934c
 8005e30:	0800930c 	.word	0x0800930c

08005e34 <puts>:
 8005e34:	4b02      	ldr	r3, [pc, #8]	; (8005e40 <puts+0xc>)
 8005e36:	4601      	mov	r1, r0
 8005e38:	6818      	ldr	r0, [r3, #0]
 8005e3a:	f7ff bf8d 	b.w	8005d58 <_puts_r>
 8005e3e:	bf00      	nop
 8005e40:	2000002c 	.word	0x2000002c

08005e44 <sniprintf>:
 8005e44:	b40c      	push	{r2, r3}
 8005e46:	b530      	push	{r4, r5, lr}
 8005e48:	4b17      	ldr	r3, [pc, #92]	; (8005ea8 <sniprintf+0x64>)
 8005e4a:	1e0c      	subs	r4, r1, #0
 8005e4c:	681d      	ldr	r5, [r3, #0]
 8005e4e:	b09d      	sub	sp, #116	; 0x74
 8005e50:	da08      	bge.n	8005e64 <sniprintf+0x20>
 8005e52:	238b      	movs	r3, #139	; 0x8b
 8005e54:	602b      	str	r3, [r5, #0]
 8005e56:	f04f 30ff 	mov.w	r0, #4294967295
 8005e5a:	b01d      	add	sp, #116	; 0x74
 8005e5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e60:	b002      	add	sp, #8
 8005e62:	4770      	bx	lr
 8005e64:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005e68:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005e6c:	bf14      	ite	ne
 8005e6e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005e72:	4623      	moveq	r3, r4
 8005e74:	9304      	str	r3, [sp, #16]
 8005e76:	9307      	str	r3, [sp, #28]
 8005e78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005e7c:	9002      	str	r0, [sp, #8]
 8005e7e:	9006      	str	r0, [sp, #24]
 8005e80:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005e84:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005e86:	ab21      	add	r3, sp, #132	; 0x84
 8005e88:	a902      	add	r1, sp, #8
 8005e8a:	4628      	mov	r0, r5
 8005e8c:	9301      	str	r3, [sp, #4]
 8005e8e:	f001 fe59 	bl	8007b44 <_svfiprintf_r>
 8005e92:	1c43      	adds	r3, r0, #1
 8005e94:	bfbc      	itt	lt
 8005e96:	238b      	movlt	r3, #139	; 0x8b
 8005e98:	602b      	strlt	r3, [r5, #0]
 8005e9a:	2c00      	cmp	r4, #0
 8005e9c:	d0dd      	beq.n	8005e5a <sniprintf+0x16>
 8005e9e:	9b02      	ldr	r3, [sp, #8]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	701a      	strb	r2, [r3, #0]
 8005ea4:	e7d9      	b.n	8005e5a <sniprintf+0x16>
 8005ea6:	bf00      	nop
 8005ea8:	2000002c 	.word	0x2000002c

08005eac <__swbuf_r>:
 8005eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005eae:	460e      	mov	r6, r1
 8005eb0:	4614      	mov	r4, r2
 8005eb2:	4605      	mov	r5, r0
 8005eb4:	b118      	cbz	r0, 8005ebe <__swbuf_r+0x12>
 8005eb6:	6983      	ldr	r3, [r0, #24]
 8005eb8:	b90b      	cbnz	r3, 8005ebe <__swbuf_r+0x12>
 8005eba:	f001 f84d 	bl	8006f58 <__sinit>
 8005ebe:	4b21      	ldr	r3, [pc, #132]	; (8005f44 <__swbuf_r+0x98>)
 8005ec0:	429c      	cmp	r4, r3
 8005ec2:	d12b      	bne.n	8005f1c <__swbuf_r+0x70>
 8005ec4:	686c      	ldr	r4, [r5, #4]
 8005ec6:	69a3      	ldr	r3, [r4, #24]
 8005ec8:	60a3      	str	r3, [r4, #8]
 8005eca:	89a3      	ldrh	r3, [r4, #12]
 8005ecc:	071a      	lsls	r2, r3, #28
 8005ece:	d52f      	bpl.n	8005f30 <__swbuf_r+0x84>
 8005ed0:	6923      	ldr	r3, [r4, #16]
 8005ed2:	b36b      	cbz	r3, 8005f30 <__swbuf_r+0x84>
 8005ed4:	6923      	ldr	r3, [r4, #16]
 8005ed6:	6820      	ldr	r0, [r4, #0]
 8005ed8:	1ac0      	subs	r0, r0, r3
 8005eda:	6963      	ldr	r3, [r4, #20]
 8005edc:	b2f6      	uxtb	r6, r6
 8005ede:	4283      	cmp	r3, r0
 8005ee0:	4637      	mov	r7, r6
 8005ee2:	dc04      	bgt.n	8005eee <__swbuf_r+0x42>
 8005ee4:	4621      	mov	r1, r4
 8005ee6:	4628      	mov	r0, r5
 8005ee8:	f000 ffa2 	bl	8006e30 <_fflush_r>
 8005eec:	bb30      	cbnz	r0, 8005f3c <__swbuf_r+0x90>
 8005eee:	68a3      	ldr	r3, [r4, #8]
 8005ef0:	3b01      	subs	r3, #1
 8005ef2:	60a3      	str	r3, [r4, #8]
 8005ef4:	6823      	ldr	r3, [r4, #0]
 8005ef6:	1c5a      	adds	r2, r3, #1
 8005ef8:	6022      	str	r2, [r4, #0]
 8005efa:	701e      	strb	r6, [r3, #0]
 8005efc:	6963      	ldr	r3, [r4, #20]
 8005efe:	3001      	adds	r0, #1
 8005f00:	4283      	cmp	r3, r0
 8005f02:	d004      	beq.n	8005f0e <__swbuf_r+0x62>
 8005f04:	89a3      	ldrh	r3, [r4, #12]
 8005f06:	07db      	lsls	r3, r3, #31
 8005f08:	d506      	bpl.n	8005f18 <__swbuf_r+0x6c>
 8005f0a:	2e0a      	cmp	r6, #10
 8005f0c:	d104      	bne.n	8005f18 <__swbuf_r+0x6c>
 8005f0e:	4621      	mov	r1, r4
 8005f10:	4628      	mov	r0, r5
 8005f12:	f000 ff8d 	bl	8006e30 <_fflush_r>
 8005f16:	b988      	cbnz	r0, 8005f3c <__swbuf_r+0x90>
 8005f18:	4638      	mov	r0, r7
 8005f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f1c:	4b0a      	ldr	r3, [pc, #40]	; (8005f48 <__swbuf_r+0x9c>)
 8005f1e:	429c      	cmp	r4, r3
 8005f20:	d101      	bne.n	8005f26 <__swbuf_r+0x7a>
 8005f22:	68ac      	ldr	r4, [r5, #8]
 8005f24:	e7cf      	b.n	8005ec6 <__swbuf_r+0x1a>
 8005f26:	4b09      	ldr	r3, [pc, #36]	; (8005f4c <__swbuf_r+0xa0>)
 8005f28:	429c      	cmp	r4, r3
 8005f2a:	bf08      	it	eq
 8005f2c:	68ec      	ldreq	r4, [r5, #12]
 8005f2e:	e7ca      	b.n	8005ec6 <__swbuf_r+0x1a>
 8005f30:	4621      	mov	r1, r4
 8005f32:	4628      	mov	r0, r5
 8005f34:	f000 f80c 	bl	8005f50 <__swsetup_r>
 8005f38:	2800      	cmp	r0, #0
 8005f3a:	d0cb      	beq.n	8005ed4 <__swbuf_r+0x28>
 8005f3c:	f04f 37ff 	mov.w	r7, #4294967295
 8005f40:	e7ea      	b.n	8005f18 <__swbuf_r+0x6c>
 8005f42:	bf00      	nop
 8005f44:	0800932c 	.word	0x0800932c
 8005f48:	0800934c 	.word	0x0800934c
 8005f4c:	0800930c 	.word	0x0800930c

08005f50 <__swsetup_r>:
 8005f50:	4b32      	ldr	r3, [pc, #200]	; (800601c <__swsetup_r+0xcc>)
 8005f52:	b570      	push	{r4, r5, r6, lr}
 8005f54:	681d      	ldr	r5, [r3, #0]
 8005f56:	4606      	mov	r6, r0
 8005f58:	460c      	mov	r4, r1
 8005f5a:	b125      	cbz	r5, 8005f66 <__swsetup_r+0x16>
 8005f5c:	69ab      	ldr	r3, [r5, #24]
 8005f5e:	b913      	cbnz	r3, 8005f66 <__swsetup_r+0x16>
 8005f60:	4628      	mov	r0, r5
 8005f62:	f000 fff9 	bl	8006f58 <__sinit>
 8005f66:	4b2e      	ldr	r3, [pc, #184]	; (8006020 <__swsetup_r+0xd0>)
 8005f68:	429c      	cmp	r4, r3
 8005f6a:	d10f      	bne.n	8005f8c <__swsetup_r+0x3c>
 8005f6c:	686c      	ldr	r4, [r5, #4]
 8005f6e:	89a3      	ldrh	r3, [r4, #12]
 8005f70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f74:	0719      	lsls	r1, r3, #28
 8005f76:	d42c      	bmi.n	8005fd2 <__swsetup_r+0x82>
 8005f78:	06dd      	lsls	r5, r3, #27
 8005f7a:	d411      	bmi.n	8005fa0 <__swsetup_r+0x50>
 8005f7c:	2309      	movs	r3, #9
 8005f7e:	6033      	str	r3, [r6, #0]
 8005f80:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005f84:	81a3      	strh	r3, [r4, #12]
 8005f86:	f04f 30ff 	mov.w	r0, #4294967295
 8005f8a:	e03e      	b.n	800600a <__swsetup_r+0xba>
 8005f8c:	4b25      	ldr	r3, [pc, #148]	; (8006024 <__swsetup_r+0xd4>)
 8005f8e:	429c      	cmp	r4, r3
 8005f90:	d101      	bne.n	8005f96 <__swsetup_r+0x46>
 8005f92:	68ac      	ldr	r4, [r5, #8]
 8005f94:	e7eb      	b.n	8005f6e <__swsetup_r+0x1e>
 8005f96:	4b24      	ldr	r3, [pc, #144]	; (8006028 <__swsetup_r+0xd8>)
 8005f98:	429c      	cmp	r4, r3
 8005f9a:	bf08      	it	eq
 8005f9c:	68ec      	ldreq	r4, [r5, #12]
 8005f9e:	e7e6      	b.n	8005f6e <__swsetup_r+0x1e>
 8005fa0:	0758      	lsls	r0, r3, #29
 8005fa2:	d512      	bpl.n	8005fca <__swsetup_r+0x7a>
 8005fa4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fa6:	b141      	cbz	r1, 8005fba <__swsetup_r+0x6a>
 8005fa8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fac:	4299      	cmp	r1, r3
 8005fae:	d002      	beq.n	8005fb6 <__swsetup_r+0x66>
 8005fb0:	4630      	mov	r0, r6
 8005fb2:	f001 fc8b 	bl	80078cc <_free_r>
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	6363      	str	r3, [r4, #52]	; 0x34
 8005fba:	89a3      	ldrh	r3, [r4, #12]
 8005fbc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005fc0:	81a3      	strh	r3, [r4, #12]
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	6063      	str	r3, [r4, #4]
 8005fc6:	6923      	ldr	r3, [r4, #16]
 8005fc8:	6023      	str	r3, [r4, #0]
 8005fca:	89a3      	ldrh	r3, [r4, #12]
 8005fcc:	f043 0308 	orr.w	r3, r3, #8
 8005fd0:	81a3      	strh	r3, [r4, #12]
 8005fd2:	6923      	ldr	r3, [r4, #16]
 8005fd4:	b94b      	cbnz	r3, 8005fea <__swsetup_r+0x9a>
 8005fd6:	89a3      	ldrh	r3, [r4, #12]
 8005fd8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005fdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fe0:	d003      	beq.n	8005fea <__swsetup_r+0x9a>
 8005fe2:	4621      	mov	r1, r4
 8005fe4:	4630      	mov	r0, r6
 8005fe6:	f001 f881 	bl	80070ec <__smakebuf_r>
 8005fea:	89a0      	ldrh	r0, [r4, #12]
 8005fec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ff0:	f010 0301 	ands.w	r3, r0, #1
 8005ff4:	d00a      	beq.n	800600c <__swsetup_r+0xbc>
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	60a3      	str	r3, [r4, #8]
 8005ffa:	6963      	ldr	r3, [r4, #20]
 8005ffc:	425b      	negs	r3, r3
 8005ffe:	61a3      	str	r3, [r4, #24]
 8006000:	6923      	ldr	r3, [r4, #16]
 8006002:	b943      	cbnz	r3, 8006016 <__swsetup_r+0xc6>
 8006004:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006008:	d1ba      	bne.n	8005f80 <__swsetup_r+0x30>
 800600a:	bd70      	pop	{r4, r5, r6, pc}
 800600c:	0781      	lsls	r1, r0, #30
 800600e:	bf58      	it	pl
 8006010:	6963      	ldrpl	r3, [r4, #20]
 8006012:	60a3      	str	r3, [r4, #8]
 8006014:	e7f4      	b.n	8006000 <__swsetup_r+0xb0>
 8006016:	2000      	movs	r0, #0
 8006018:	e7f7      	b.n	800600a <__swsetup_r+0xba>
 800601a:	bf00      	nop
 800601c:	2000002c 	.word	0x2000002c
 8006020:	0800932c 	.word	0x0800932c
 8006024:	0800934c 	.word	0x0800934c
 8006028:	0800930c 	.word	0x0800930c

0800602c <quorem>:
 800602c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006030:	6903      	ldr	r3, [r0, #16]
 8006032:	690c      	ldr	r4, [r1, #16]
 8006034:	42a3      	cmp	r3, r4
 8006036:	4607      	mov	r7, r0
 8006038:	f2c0 8081 	blt.w	800613e <quorem+0x112>
 800603c:	3c01      	subs	r4, #1
 800603e:	f101 0814 	add.w	r8, r1, #20
 8006042:	f100 0514 	add.w	r5, r0, #20
 8006046:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800604a:	9301      	str	r3, [sp, #4]
 800604c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006050:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006054:	3301      	adds	r3, #1
 8006056:	429a      	cmp	r2, r3
 8006058:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800605c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006060:	fbb2 f6f3 	udiv	r6, r2, r3
 8006064:	d331      	bcc.n	80060ca <quorem+0x9e>
 8006066:	f04f 0e00 	mov.w	lr, #0
 800606a:	4640      	mov	r0, r8
 800606c:	46ac      	mov	ip, r5
 800606e:	46f2      	mov	sl, lr
 8006070:	f850 2b04 	ldr.w	r2, [r0], #4
 8006074:	b293      	uxth	r3, r2
 8006076:	fb06 e303 	mla	r3, r6, r3, lr
 800607a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800607e:	b29b      	uxth	r3, r3
 8006080:	ebaa 0303 	sub.w	r3, sl, r3
 8006084:	f8dc a000 	ldr.w	sl, [ip]
 8006088:	0c12      	lsrs	r2, r2, #16
 800608a:	fa13 f38a 	uxtah	r3, r3, sl
 800608e:	fb06 e202 	mla	r2, r6, r2, lr
 8006092:	9300      	str	r3, [sp, #0]
 8006094:	9b00      	ldr	r3, [sp, #0]
 8006096:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800609a:	b292      	uxth	r2, r2
 800609c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80060a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80060a4:	f8bd 3000 	ldrh.w	r3, [sp]
 80060a8:	4581      	cmp	r9, r0
 80060aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060ae:	f84c 3b04 	str.w	r3, [ip], #4
 80060b2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80060b6:	d2db      	bcs.n	8006070 <quorem+0x44>
 80060b8:	f855 300b 	ldr.w	r3, [r5, fp]
 80060bc:	b92b      	cbnz	r3, 80060ca <quorem+0x9e>
 80060be:	9b01      	ldr	r3, [sp, #4]
 80060c0:	3b04      	subs	r3, #4
 80060c2:	429d      	cmp	r5, r3
 80060c4:	461a      	mov	r2, r3
 80060c6:	d32e      	bcc.n	8006126 <quorem+0xfa>
 80060c8:	613c      	str	r4, [r7, #16]
 80060ca:	4638      	mov	r0, r7
 80060cc:	f001 fae6 	bl	800769c <__mcmp>
 80060d0:	2800      	cmp	r0, #0
 80060d2:	db24      	blt.n	800611e <quorem+0xf2>
 80060d4:	3601      	adds	r6, #1
 80060d6:	4628      	mov	r0, r5
 80060d8:	f04f 0c00 	mov.w	ip, #0
 80060dc:	f858 2b04 	ldr.w	r2, [r8], #4
 80060e0:	f8d0 e000 	ldr.w	lr, [r0]
 80060e4:	b293      	uxth	r3, r2
 80060e6:	ebac 0303 	sub.w	r3, ip, r3
 80060ea:	0c12      	lsrs	r2, r2, #16
 80060ec:	fa13 f38e 	uxtah	r3, r3, lr
 80060f0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80060f4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060fe:	45c1      	cmp	r9, r8
 8006100:	f840 3b04 	str.w	r3, [r0], #4
 8006104:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006108:	d2e8      	bcs.n	80060dc <quorem+0xb0>
 800610a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800610e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006112:	b922      	cbnz	r2, 800611e <quorem+0xf2>
 8006114:	3b04      	subs	r3, #4
 8006116:	429d      	cmp	r5, r3
 8006118:	461a      	mov	r2, r3
 800611a:	d30a      	bcc.n	8006132 <quorem+0x106>
 800611c:	613c      	str	r4, [r7, #16]
 800611e:	4630      	mov	r0, r6
 8006120:	b003      	add	sp, #12
 8006122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006126:	6812      	ldr	r2, [r2, #0]
 8006128:	3b04      	subs	r3, #4
 800612a:	2a00      	cmp	r2, #0
 800612c:	d1cc      	bne.n	80060c8 <quorem+0x9c>
 800612e:	3c01      	subs	r4, #1
 8006130:	e7c7      	b.n	80060c2 <quorem+0x96>
 8006132:	6812      	ldr	r2, [r2, #0]
 8006134:	3b04      	subs	r3, #4
 8006136:	2a00      	cmp	r2, #0
 8006138:	d1f0      	bne.n	800611c <quorem+0xf0>
 800613a:	3c01      	subs	r4, #1
 800613c:	e7eb      	b.n	8006116 <quorem+0xea>
 800613e:	2000      	movs	r0, #0
 8006140:	e7ee      	b.n	8006120 <quorem+0xf4>
 8006142:	0000      	movs	r0, r0
 8006144:	0000      	movs	r0, r0
	...

08006148 <_dtoa_r>:
 8006148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800614c:	ed2d 8b04 	vpush	{d8-d9}
 8006150:	ec57 6b10 	vmov	r6, r7, d0
 8006154:	b093      	sub	sp, #76	; 0x4c
 8006156:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006158:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800615c:	9106      	str	r1, [sp, #24]
 800615e:	ee10 aa10 	vmov	sl, s0
 8006162:	4604      	mov	r4, r0
 8006164:	9209      	str	r2, [sp, #36]	; 0x24
 8006166:	930c      	str	r3, [sp, #48]	; 0x30
 8006168:	46bb      	mov	fp, r7
 800616a:	b975      	cbnz	r5, 800618a <_dtoa_r+0x42>
 800616c:	2010      	movs	r0, #16
 800616e:	f000 fffd 	bl	800716c <malloc>
 8006172:	4602      	mov	r2, r0
 8006174:	6260      	str	r0, [r4, #36]	; 0x24
 8006176:	b920      	cbnz	r0, 8006182 <_dtoa_r+0x3a>
 8006178:	4ba7      	ldr	r3, [pc, #668]	; (8006418 <_dtoa_r+0x2d0>)
 800617a:	21ea      	movs	r1, #234	; 0xea
 800617c:	48a7      	ldr	r0, [pc, #668]	; (800641c <_dtoa_r+0x2d4>)
 800617e:	f001 ffa1 	bl	80080c4 <__assert_func>
 8006182:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006186:	6005      	str	r5, [r0, #0]
 8006188:	60c5      	str	r5, [r0, #12]
 800618a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800618c:	6819      	ldr	r1, [r3, #0]
 800618e:	b151      	cbz	r1, 80061a6 <_dtoa_r+0x5e>
 8006190:	685a      	ldr	r2, [r3, #4]
 8006192:	604a      	str	r2, [r1, #4]
 8006194:	2301      	movs	r3, #1
 8006196:	4093      	lsls	r3, r2
 8006198:	608b      	str	r3, [r1, #8]
 800619a:	4620      	mov	r0, r4
 800619c:	f001 f83c 	bl	8007218 <_Bfree>
 80061a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80061a2:	2200      	movs	r2, #0
 80061a4:	601a      	str	r2, [r3, #0]
 80061a6:	1e3b      	subs	r3, r7, #0
 80061a8:	bfaa      	itet	ge
 80061aa:	2300      	movge	r3, #0
 80061ac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80061b0:	f8c8 3000 	strge.w	r3, [r8]
 80061b4:	4b9a      	ldr	r3, [pc, #616]	; (8006420 <_dtoa_r+0x2d8>)
 80061b6:	bfbc      	itt	lt
 80061b8:	2201      	movlt	r2, #1
 80061ba:	f8c8 2000 	strlt.w	r2, [r8]
 80061be:	ea33 030b 	bics.w	r3, r3, fp
 80061c2:	d11b      	bne.n	80061fc <_dtoa_r+0xb4>
 80061c4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80061c6:	f242 730f 	movw	r3, #9999	; 0x270f
 80061ca:	6013      	str	r3, [r2, #0]
 80061cc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80061d0:	4333      	orrs	r3, r6
 80061d2:	f000 8592 	beq.w	8006cfa <_dtoa_r+0xbb2>
 80061d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061d8:	b963      	cbnz	r3, 80061f4 <_dtoa_r+0xac>
 80061da:	4b92      	ldr	r3, [pc, #584]	; (8006424 <_dtoa_r+0x2dc>)
 80061dc:	e022      	b.n	8006224 <_dtoa_r+0xdc>
 80061de:	4b92      	ldr	r3, [pc, #584]	; (8006428 <_dtoa_r+0x2e0>)
 80061e0:	9301      	str	r3, [sp, #4]
 80061e2:	3308      	adds	r3, #8
 80061e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80061e6:	6013      	str	r3, [r2, #0]
 80061e8:	9801      	ldr	r0, [sp, #4]
 80061ea:	b013      	add	sp, #76	; 0x4c
 80061ec:	ecbd 8b04 	vpop	{d8-d9}
 80061f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061f4:	4b8b      	ldr	r3, [pc, #556]	; (8006424 <_dtoa_r+0x2dc>)
 80061f6:	9301      	str	r3, [sp, #4]
 80061f8:	3303      	adds	r3, #3
 80061fa:	e7f3      	b.n	80061e4 <_dtoa_r+0x9c>
 80061fc:	2200      	movs	r2, #0
 80061fe:	2300      	movs	r3, #0
 8006200:	4650      	mov	r0, sl
 8006202:	4659      	mov	r1, fp
 8006204:	f7fa fc60 	bl	8000ac8 <__aeabi_dcmpeq>
 8006208:	ec4b ab19 	vmov	d9, sl, fp
 800620c:	4680      	mov	r8, r0
 800620e:	b158      	cbz	r0, 8006228 <_dtoa_r+0xe0>
 8006210:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006212:	2301      	movs	r3, #1
 8006214:	6013      	str	r3, [r2, #0]
 8006216:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006218:	2b00      	cmp	r3, #0
 800621a:	f000 856b 	beq.w	8006cf4 <_dtoa_r+0xbac>
 800621e:	4883      	ldr	r0, [pc, #524]	; (800642c <_dtoa_r+0x2e4>)
 8006220:	6018      	str	r0, [r3, #0]
 8006222:	1e43      	subs	r3, r0, #1
 8006224:	9301      	str	r3, [sp, #4]
 8006226:	e7df      	b.n	80061e8 <_dtoa_r+0xa0>
 8006228:	ec4b ab10 	vmov	d0, sl, fp
 800622c:	aa10      	add	r2, sp, #64	; 0x40
 800622e:	a911      	add	r1, sp, #68	; 0x44
 8006230:	4620      	mov	r0, r4
 8006232:	f001 fad9 	bl	80077e8 <__d2b>
 8006236:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800623a:	ee08 0a10 	vmov	s16, r0
 800623e:	2d00      	cmp	r5, #0
 8006240:	f000 8084 	beq.w	800634c <_dtoa_r+0x204>
 8006244:	ee19 3a90 	vmov	r3, s19
 8006248:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800624c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006250:	4656      	mov	r6, sl
 8006252:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006256:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800625a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800625e:	4b74      	ldr	r3, [pc, #464]	; (8006430 <_dtoa_r+0x2e8>)
 8006260:	2200      	movs	r2, #0
 8006262:	4630      	mov	r0, r6
 8006264:	4639      	mov	r1, r7
 8006266:	f7fa f80f 	bl	8000288 <__aeabi_dsub>
 800626a:	a365      	add	r3, pc, #404	; (adr r3, 8006400 <_dtoa_r+0x2b8>)
 800626c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006270:	f7fa f9c2 	bl	80005f8 <__aeabi_dmul>
 8006274:	a364      	add	r3, pc, #400	; (adr r3, 8006408 <_dtoa_r+0x2c0>)
 8006276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627a:	f7fa f807 	bl	800028c <__adddf3>
 800627e:	4606      	mov	r6, r0
 8006280:	4628      	mov	r0, r5
 8006282:	460f      	mov	r7, r1
 8006284:	f7fa f94e 	bl	8000524 <__aeabi_i2d>
 8006288:	a361      	add	r3, pc, #388	; (adr r3, 8006410 <_dtoa_r+0x2c8>)
 800628a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628e:	f7fa f9b3 	bl	80005f8 <__aeabi_dmul>
 8006292:	4602      	mov	r2, r0
 8006294:	460b      	mov	r3, r1
 8006296:	4630      	mov	r0, r6
 8006298:	4639      	mov	r1, r7
 800629a:	f7f9 fff7 	bl	800028c <__adddf3>
 800629e:	4606      	mov	r6, r0
 80062a0:	460f      	mov	r7, r1
 80062a2:	f7fa fc59 	bl	8000b58 <__aeabi_d2iz>
 80062a6:	2200      	movs	r2, #0
 80062a8:	9000      	str	r0, [sp, #0]
 80062aa:	2300      	movs	r3, #0
 80062ac:	4630      	mov	r0, r6
 80062ae:	4639      	mov	r1, r7
 80062b0:	f7fa fc14 	bl	8000adc <__aeabi_dcmplt>
 80062b4:	b150      	cbz	r0, 80062cc <_dtoa_r+0x184>
 80062b6:	9800      	ldr	r0, [sp, #0]
 80062b8:	f7fa f934 	bl	8000524 <__aeabi_i2d>
 80062bc:	4632      	mov	r2, r6
 80062be:	463b      	mov	r3, r7
 80062c0:	f7fa fc02 	bl	8000ac8 <__aeabi_dcmpeq>
 80062c4:	b910      	cbnz	r0, 80062cc <_dtoa_r+0x184>
 80062c6:	9b00      	ldr	r3, [sp, #0]
 80062c8:	3b01      	subs	r3, #1
 80062ca:	9300      	str	r3, [sp, #0]
 80062cc:	9b00      	ldr	r3, [sp, #0]
 80062ce:	2b16      	cmp	r3, #22
 80062d0:	d85a      	bhi.n	8006388 <_dtoa_r+0x240>
 80062d2:	9a00      	ldr	r2, [sp, #0]
 80062d4:	4b57      	ldr	r3, [pc, #348]	; (8006434 <_dtoa_r+0x2ec>)
 80062d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062de:	ec51 0b19 	vmov	r0, r1, d9
 80062e2:	f7fa fbfb 	bl	8000adc <__aeabi_dcmplt>
 80062e6:	2800      	cmp	r0, #0
 80062e8:	d050      	beq.n	800638c <_dtoa_r+0x244>
 80062ea:	9b00      	ldr	r3, [sp, #0]
 80062ec:	3b01      	subs	r3, #1
 80062ee:	9300      	str	r3, [sp, #0]
 80062f0:	2300      	movs	r3, #0
 80062f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80062f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80062f6:	1b5d      	subs	r5, r3, r5
 80062f8:	1e6b      	subs	r3, r5, #1
 80062fa:	9305      	str	r3, [sp, #20]
 80062fc:	bf45      	ittet	mi
 80062fe:	f1c5 0301 	rsbmi	r3, r5, #1
 8006302:	9304      	strmi	r3, [sp, #16]
 8006304:	2300      	movpl	r3, #0
 8006306:	2300      	movmi	r3, #0
 8006308:	bf4c      	ite	mi
 800630a:	9305      	strmi	r3, [sp, #20]
 800630c:	9304      	strpl	r3, [sp, #16]
 800630e:	9b00      	ldr	r3, [sp, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	db3d      	blt.n	8006390 <_dtoa_r+0x248>
 8006314:	9b05      	ldr	r3, [sp, #20]
 8006316:	9a00      	ldr	r2, [sp, #0]
 8006318:	920a      	str	r2, [sp, #40]	; 0x28
 800631a:	4413      	add	r3, r2
 800631c:	9305      	str	r3, [sp, #20]
 800631e:	2300      	movs	r3, #0
 8006320:	9307      	str	r3, [sp, #28]
 8006322:	9b06      	ldr	r3, [sp, #24]
 8006324:	2b09      	cmp	r3, #9
 8006326:	f200 8089 	bhi.w	800643c <_dtoa_r+0x2f4>
 800632a:	2b05      	cmp	r3, #5
 800632c:	bfc4      	itt	gt
 800632e:	3b04      	subgt	r3, #4
 8006330:	9306      	strgt	r3, [sp, #24]
 8006332:	9b06      	ldr	r3, [sp, #24]
 8006334:	f1a3 0302 	sub.w	r3, r3, #2
 8006338:	bfcc      	ite	gt
 800633a:	2500      	movgt	r5, #0
 800633c:	2501      	movle	r5, #1
 800633e:	2b03      	cmp	r3, #3
 8006340:	f200 8087 	bhi.w	8006452 <_dtoa_r+0x30a>
 8006344:	e8df f003 	tbb	[pc, r3]
 8006348:	59383a2d 	.word	0x59383a2d
 800634c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006350:	441d      	add	r5, r3
 8006352:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006356:	2b20      	cmp	r3, #32
 8006358:	bfc1      	itttt	gt
 800635a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800635e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006362:	fa0b f303 	lslgt.w	r3, fp, r3
 8006366:	fa26 f000 	lsrgt.w	r0, r6, r0
 800636a:	bfda      	itte	le
 800636c:	f1c3 0320 	rsble	r3, r3, #32
 8006370:	fa06 f003 	lslle.w	r0, r6, r3
 8006374:	4318      	orrgt	r0, r3
 8006376:	f7fa f8c5 	bl	8000504 <__aeabi_ui2d>
 800637a:	2301      	movs	r3, #1
 800637c:	4606      	mov	r6, r0
 800637e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006382:	3d01      	subs	r5, #1
 8006384:	930e      	str	r3, [sp, #56]	; 0x38
 8006386:	e76a      	b.n	800625e <_dtoa_r+0x116>
 8006388:	2301      	movs	r3, #1
 800638a:	e7b2      	b.n	80062f2 <_dtoa_r+0x1aa>
 800638c:	900b      	str	r0, [sp, #44]	; 0x2c
 800638e:	e7b1      	b.n	80062f4 <_dtoa_r+0x1ac>
 8006390:	9b04      	ldr	r3, [sp, #16]
 8006392:	9a00      	ldr	r2, [sp, #0]
 8006394:	1a9b      	subs	r3, r3, r2
 8006396:	9304      	str	r3, [sp, #16]
 8006398:	4253      	negs	r3, r2
 800639a:	9307      	str	r3, [sp, #28]
 800639c:	2300      	movs	r3, #0
 800639e:	930a      	str	r3, [sp, #40]	; 0x28
 80063a0:	e7bf      	b.n	8006322 <_dtoa_r+0x1da>
 80063a2:	2300      	movs	r3, #0
 80063a4:	9308      	str	r3, [sp, #32]
 80063a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	dc55      	bgt.n	8006458 <_dtoa_r+0x310>
 80063ac:	2301      	movs	r3, #1
 80063ae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80063b2:	461a      	mov	r2, r3
 80063b4:	9209      	str	r2, [sp, #36]	; 0x24
 80063b6:	e00c      	b.n	80063d2 <_dtoa_r+0x28a>
 80063b8:	2301      	movs	r3, #1
 80063ba:	e7f3      	b.n	80063a4 <_dtoa_r+0x25c>
 80063bc:	2300      	movs	r3, #0
 80063be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063c0:	9308      	str	r3, [sp, #32]
 80063c2:	9b00      	ldr	r3, [sp, #0]
 80063c4:	4413      	add	r3, r2
 80063c6:	9302      	str	r3, [sp, #8]
 80063c8:	3301      	adds	r3, #1
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	9303      	str	r3, [sp, #12]
 80063ce:	bfb8      	it	lt
 80063d0:	2301      	movlt	r3, #1
 80063d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80063d4:	2200      	movs	r2, #0
 80063d6:	6042      	str	r2, [r0, #4]
 80063d8:	2204      	movs	r2, #4
 80063da:	f102 0614 	add.w	r6, r2, #20
 80063de:	429e      	cmp	r6, r3
 80063e0:	6841      	ldr	r1, [r0, #4]
 80063e2:	d93d      	bls.n	8006460 <_dtoa_r+0x318>
 80063e4:	4620      	mov	r0, r4
 80063e6:	f000 fed7 	bl	8007198 <_Balloc>
 80063ea:	9001      	str	r0, [sp, #4]
 80063ec:	2800      	cmp	r0, #0
 80063ee:	d13b      	bne.n	8006468 <_dtoa_r+0x320>
 80063f0:	4b11      	ldr	r3, [pc, #68]	; (8006438 <_dtoa_r+0x2f0>)
 80063f2:	4602      	mov	r2, r0
 80063f4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80063f8:	e6c0      	b.n	800617c <_dtoa_r+0x34>
 80063fa:	2301      	movs	r3, #1
 80063fc:	e7df      	b.n	80063be <_dtoa_r+0x276>
 80063fe:	bf00      	nop
 8006400:	636f4361 	.word	0x636f4361
 8006404:	3fd287a7 	.word	0x3fd287a7
 8006408:	8b60c8b3 	.word	0x8b60c8b3
 800640c:	3fc68a28 	.word	0x3fc68a28
 8006410:	509f79fb 	.word	0x509f79fb
 8006414:	3fd34413 	.word	0x3fd34413
 8006418:	08009289 	.word	0x08009289
 800641c:	080092a0 	.word	0x080092a0
 8006420:	7ff00000 	.word	0x7ff00000
 8006424:	08009285 	.word	0x08009285
 8006428:	0800927c 	.word	0x0800927c
 800642c:	08009259 	.word	0x08009259
 8006430:	3ff80000 	.word	0x3ff80000
 8006434:	080093f0 	.word	0x080093f0
 8006438:	080092fb 	.word	0x080092fb
 800643c:	2501      	movs	r5, #1
 800643e:	2300      	movs	r3, #0
 8006440:	9306      	str	r3, [sp, #24]
 8006442:	9508      	str	r5, [sp, #32]
 8006444:	f04f 33ff 	mov.w	r3, #4294967295
 8006448:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800644c:	2200      	movs	r2, #0
 800644e:	2312      	movs	r3, #18
 8006450:	e7b0      	b.n	80063b4 <_dtoa_r+0x26c>
 8006452:	2301      	movs	r3, #1
 8006454:	9308      	str	r3, [sp, #32]
 8006456:	e7f5      	b.n	8006444 <_dtoa_r+0x2fc>
 8006458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800645a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800645e:	e7b8      	b.n	80063d2 <_dtoa_r+0x28a>
 8006460:	3101      	adds	r1, #1
 8006462:	6041      	str	r1, [r0, #4]
 8006464:	0052      	lsls	r2, r2, #1
 8006466:	e7b8      	b.n	80063da <_dtoa_r+0x292>
 8006468:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800646a:	9a01      	ldr	r2, [sp, #4]
 800646c:	601a      	str	r2, [r3, #0]
 800646e:	9b03      	ldr	r3, [sp, #12]
 8006470:	2b0e      	cmp	r3, #14
 8006472:	f200 809d 	bhi.w	80065b0 <_dtoa_r+0x468>
 8006476:	2d00      	cmp	r5, #0
 8006478:	f000 809a 	beq.w	80065b0 <_dtoa_r+0x468>
 800647c:	9b00      	ldr	r3, [sp, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	dd32      	ble.n	80064e8 <_dtoa_r+0x3a0>
 8006482:	4ab7      	ldr	r2, [pc, #732]	; (8006760 <_dtoa_r+0x618>)
 8006484:	f003 030f 	and.w	r3, r3, #15
 8006488:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800648c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006490:	9b00      	ldr	r3, [sp, #0]
 8006492:	05d8      	lsls	r0, r3, #23
 8006494:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006498:	d516      	bpl.n	80064c8 <_dtoa_r+0x380>
 800649a:	4bb2      	ldr	r3, [pc, #712]	; (8006764 <_dtoa_r+0x61c>)
 800649c:	ec51 0b19 	vmov	r0, r1, d9
 80064a0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80064a4:	f7fa f9d2 	bl	800084c <__aeabi_ddiv>
 80064a8:	f007 070f 	and.w	r7, r7, #15
 80064ac:	4682      	mov	sl, r0
 80064ae:	468b      	mov	fp, r1
 80064b0:	2503      	movs	r5, #3
 80064b2:	4eac      	ldr	r6, [pc, #688]	; (8006764 <_dtoa_r+0x61c>)
 80064b4:	b957      	cbnz	r7, 80064cc <_dtoa_r+0x384>
 80064b6:	4642      	mov	r2, r8
 80064b8:	464b      	mov	r3, r9
 80064ba:	4650      	mov	r0, sl
 80064bc:	4659      	mov	r1, fp
 80064be:	f7fa f9c5 	bl	800084c <__aeabi_ddiv>
 80064c2:	4682      	mov	sl, r0
 80064c4:	468b      	mov	fp, r1
 80064c6:	e028      	b.n	800651a <_dtoa_r+0x3d2>
 80064c8:	2502      	movs	r5, #2
 80064ca:	e7f2      	b.n	80064b2 <_dtoa_r+0x36a>
 80064cc:	07f9      	lsls	r1, r7, #31
 80064ce:	d508      	bpl.n	80064e2 <_dtoa_r+0x39a>
 80064d0:	4640      	mov	r0, r8
 80064d2:	4649      	mov	r1, r9
 80064d4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80064d8:	f7fa f88e 	bl	80005f8 <__aeabi_dmul>
 80064dc:	3501      	adds	r5, #1
 80064de:	4680      	mov	r8, r0
 80064e0:	4689      	mov	r9, r1
 80064e2:	107f      	asrs	r7, r7, #1
 80064e4:	3608      	adds	r6, #8
 80064e6:	e7e5      	b.n	80064b4 <_dtoa_r+0x36c>
 80064e8:	f000 809b 	beq.w	8006622 <_dtoa_r+0x4da>
 80064ec:	9b00      	ldr	r3, [sp, #0]
 80064ee:	4f9d      	ldr	r7, [pc, #628]	; (8006764 <_dtoa_r+0x61c>)
 80064f0:	425e      	negs	r6, r3
 80064f2:	4b9b      	ldr	r3, [pc, #620]	; (8006760 <_dtoa_r+0x618>)
 80064f4:	f006 020f 	and.w	r2, r6, #15
 80064f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006500:	ec51 0b19 	vmov	r0, r1, d9
 8006504:	f7fa f878 	bl	80005f8 <__aeabi_dmul>
 8006508:	1136      	asrs	r6, r6, #4
 800650a:	4682      	mov	sl, r0
 800650c:	468b      	mov	fp, r1
 800650e:	2300      	movs	r3, #0
 8006510:	2502      	movs	r5, #2
 8006512:	2e00      	cmp	r6, #0
 8006514:	d17a      	bne.n	800660c <_dtoa_r+0x4c4>
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1d3      	bne.n	80064c2 <_dtoa_r+0x37a>
 800651a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800651c:	2b00      	cmp	r3, #0
 800651e:	f000 8082 	beq.w	8006626 <_dtoa_r+0x4de>
 8006522:	4b91      	ldr	r3, [pc, #580]	; (8006768 <_dtoa_r+0x620>)
 8006524:	2200      	movs	r2, #0
 8006526:	4650      	mov	r0, sl
 8006528:	4659      	mov	r1, fp
 800652a:	f7fa fad7 	bl	8000adc <__aeabi_dcmplt>
 800652e:	2800      	cmp	r0, #0
 8006530:	d079      	beq.n	8006626 <_dtoa_r+0x4de>
 8006532:	9b03      	ldr	r3, [sp, #12]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d076      	beq.n	8006626 <_dtoa_r+0x4de>
 8006538:	9b02      	ldr	r3, [sp, #8]
 800653a:	2b00      	cmp	r3, #0
 800653c:	dd36      	ble.n	80065ac <_dtoa_r+0x464>
 800653e:	9b00      	ldr	r3, [sp, #0]
 8006540:	4650      	mov	r0, sl
 8006542:	4659      	mov	r1, fp
 8006544:	1e5f      	subs	r7, r3, #1
 8006546:	2200      	movs	r2, #0
 8006548:	4b88      	ldr	r3, [pc, #544]	; (800676c <_dtoa_r+0x624>)
 800654a:	f7fa f855 	bl	80005f8 <__aeabi_dmul>
 800654e:	9e02      	ldr	r6, [sp, #8]
 8006550:	4682      	mov	sl, r0
 8006552:	468b      	mov	fp, r1
 8006554:	3501      	adds	r5, #1
 8006556:	4628      	mov	r0, r5
 8006558:	f7f9 ffe4 	bl	8000524 <__aeabi_i2d>
 800655c:	4652      	mov	r2, sl
 800655e:	465b      	mov	r3, fp
 8006560:	f7fa f84a 	bl	80005f8 <__aeabi_dmul>
 8006564:	4b82      	ldr	r3, [pc, #520]	; (8006770 <_dtoa_r+0x628>)
 8006566:	2200      	movs	r2, #0
 8006568:	f7f9 fe90 	bl	800028c <__adddf3>
 800656c:	46d0      	mov	r8, sl
 800656e:	46d9      	mov	r9, fp
 8006570:	4682      	mov	sl, r0
 8006572:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006576:	2e00      	cmp	r6, #0
 8006578:	d158      	bne.n	800662c <_dtoa_r+0x4e4>
 800657a:	4b7e      	ldr	r3, [pc, #504]	; (8006774 <_dtoa_r+0x62c>)
 800657c:	2200      	movs	r2, #0
 800657e:	4640      	mov	r0, r8
 8006580:	4649      	mov	r1, r9
 8006582:	f7f9 fe81 	bl	8000288 <__aeabi_dsub>
 8006586:	4652      	mov	r2, sl
 8006588:	465b      	mov	r3, fp
 800658a:	4680      	mov	r8, r0
 800658c:	4689      	mov	r9, r1
 800658e:	f7fa fac3 	bl	8000b18 <__aeabi_dcmpgt>
 8006592:	2800      	cmp	r0, #0
 8006594:	f040 8295 	bne.w	8006ac2 <_dtoa_r+0x97a>
 8006598:	4652      	mov	r2, sl
 800659a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800659e:	4640      	mov	r0, r8
 80065a0:	4649      	mov	r1, r9
 80065a2:	f7fa fa9b 	bl	8000adc <__aeabi_dcmplt>
 80065a6:	2800      	cmp	r0, #0
 80065a8:	f040 8289 	bne.w	8006abe <_dtoa_r+0x976>
 80065ac:	ec5b ab19 	vmov	sl, fp, d9
 80065b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	f2c0 8148 	blt.w	8006848 <_dtoa_r+0x700>
 80065b8:	9a00      	ldr	r2, [sp, #0]
 80065ba:	2a0e      	cmp	r2, #14
 80065bc:	f300 8144 	bgt.w	8006848 <_dtoa_r+0x700>
 80065c0:	4b67      	ldr	r3, [pc, #412]	; (8006760 <_dtoa_r+0x618>)
 80065c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80065c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80065ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	f280 80d5 	bge.w	800677c <_dtoa_r+0x634>
 80065d2:	9b03      	ldr	r3, [sp, #12]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f300 80d1 	bgt.w	800677c <_dtoa_r+0x634>
 80065da:	f040 826f 	bne.w	8006abc <_dtoa_r+0x974>
 80065de:	4b65      	ldr	r3, [pc, #404]	; (8006774 <_dtoa_r+0x62c>)
 80065e0:	2200      	movs	r2, #0
 80065e2:	4640      	mov	r0, r8
 80065e4:	4649      	mov	r1, r9
 80065e6:	f7fa f807 	bl	80005f8 <__aeabi_dmul>
 80065ea:	4652      	mov	r2, sl
 80065ec:	465b      	mov	r3, fp
 80065ee:	f7fa fa89 	bl	8000b04 <__aeabi_dcmpge>
 80065f2:	9e03      	ldr	r6, [sp, #12]
 80065f4:	4637      	mov	r7, r6
 80065f6:	2800      	cmp	r0, #0
 80065f8:	f040 8245 	bne.w	8006a86 <_dtoa_r+0x93e>
 80065fc:	9d01      	ldr	r5, [sp, #4]
 80065fe:	2331      	movs	r3, #49	; 0x31
 8006600:	f805 3b01 	strb.w	r3, [r5], #1
 8006604:	9b00      	ldr	r3, [sp, #0]
 8006606:	3301      	adds	r3, #1
 8006608:	9300      	str	r3, [sp, #0]
 800660a:	e240      	b.n	8006a8e <_dtoa_r+0x946>
 800660c:	07f2      	lsls	r2, r6, #31
 800660e:	d505      	bpl.n	800661c <_dtoa_r+0x4d4>
 8006610:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006614:	f7f9 fff0 	bl	80005f8 <__aeabi_dmul>
 8006618:	3501      	adds	r5, #1
 800661a:	2301      	movs	r3, #1
 800661c:	1076      	asrs	r6, r6, #1
 800661e:	3708      	adds	r7, #8
 8006620:	e777      	b.n	8006512 <_dtoa_r+0x3ca>
 8006622:	2502      	movs	r5, #2
 8006624:	e779      	b.n	800651a <_dtoa_r+0x3d2>
 8006626:	9f00      	ldr	r7, [sp, #0]
 8006628:	9e03      	ldr	r6, [sp, #12]
 800662a:	e794      	b.n	8006556 <_dtoa_r+0x40e>
 800662c:	9901      	ldr	r1, [sp, #4]
 800662e:	4b4c      	ldr	r3, [pc, #304]	; (8006760 <_dtoa_r+0x618>)
 8006630:	4431      	add	r1, r6
 8006632:	910d      	str	r1, [sp, #52]	; 0x34
 8006634:	9908      	ldr	r1, [sp, #32]
 8006636:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800663a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800663e:	2900      	cmp	r1, #0
 8006640:	d043      	beq.n	80066ca <_dtoa_r+0x582>
 8006642:	494d      	ldr	r1, [pc, #308]	; (8006778 <_dtoa_r+0x630>)
 8006644:	2000      	movs	r0, #0
 8006646:	f7fa f901 	bl	800084c <__aeabi_ddiv>
 800664a:	4652      	mov	r2, sl
 800664c:	465b      	mov	r3, fp
 800664e:	f7f9 fe1b 	bl	8000288 <__aeabi_dsub>
 8006652:	9d01      	ldr	r5, [sp, #4]
 8006654:	4682      	mov	sl, r0
 8006656:	468b      	mov	fp, r1
 8006658:	4649      	mov	r1, r9
 800665a:	4640      	mov	r0, r8
 800665c:	f7fa fa7c 	bl	8000b58 <__aeabi_d2iz>
 8006660:	4606      	mov	r6, r0
 8006662:	f7f9 ff5f 	bl	8000524 <__aeabi_i2d>
 8006666:	4602      	mov	r2, r0
 8006668:	460b      	mov	r3, r1
 800666a:	4640      	mov	r0, r8
 800666c:	4649      	mov	r1, r9
 800666e:	f7f9 fe0b 	bl	8000288 <__aeabi_dsub>
 8006672:	3630      	adds	r6, #48	; 0x30
 8006674:	f805 6b01 	strb.w	r6, [r5], #1
 8006678:	4652      	mov	r2, sl
 800667a:	465b      	mov	r3, fp
 800667c:	4680      	mov	r8, r0
 800667e:	4689      	mov	r9, r1
 8006680:	f7fa fa2c 	bl	8000adc <__aeabi_dcmplt>
 8006684:	2800      	cmp	r0, #0
 8006686:	d163      	bne.n	8006750 <_dtoa_r+0x608>
 8006688:	4642      	mov	r2, r8
 800668a:	464b      	mov	r3, r9
 800668c:	4936      	ldr	r1, [pc, #216]	; (8006768 <_dtoa_r+0x620>)
 800668e:	2000      	movs	r0, #0
 8006690:	f7f9 fdfa 	bl	8000288 <__aeabi_dsub>
 8006694:	4652      	mov	r2, sl
 8006696:	465b      	mov	r3, fp
 8006698:	f7fa fa20 	bl	8000adc <__aeabi_dcmplt>
 800669c:	2800      	cmp	r0, #0
 800669e:	f040 80b5 	bne.w	800680c <_dtoa_r+0x6c4>
 80066a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066a4:	429d      	cmp	r5, r3
 80066a6:	d081      	beq.n	80065ac <_dtoa_r+0x464>
 80066a8:	4b30      	ldr	r3, [pc, #192]	; (800676c <_dtoa_r+0x624>)
 80066aa:	2200      	movs	r2, #0
 80066ac:	4650      	mov	r0, sl
 80066ae:	4659      	mov	r1, fp
 80066b0:	f7f9 ffa2 	bl	80005f8 <__aeabi_dmul>
 80066b4:	4b2d      	ldr	r3, [pc, #180]	; (800676c <_dtoa_r+0x624>)
 80066b6:	4682      	mov	sl, r0
 80066b8:	468b      	mov	fp, r1
 80066ba:	4640      	mov	r0, r8
 80066bc:	4649      	mov	r1, r9
 80066be:	2200      	movs	r2, #0
 80066c0:	f7f9 ff9a 	bl	80005f8 <__aeabi_dmul>
 80066c4:	4680      	mov	r8, r0
 80066c6:	4689      	mov	r9, r1
 80066c8:	e7c6      	b.n	8006658 <_dtoa_r+0x510>
 80066ca:	4650      	mov	r0, sl
 80066cc:	4659      	mov	r1, fp
 80066ce:	f7f9 ff93 	bl	80005f8 <__aeabi_dmul>
 80066d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066d4:	9d01      	ldr	r5, [sp, #4]
 80066d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80066d8:	4682      	mov	sl, r0
 80066da:	468b      	mov	fp, r1
 80066dc:	4649      	mov	r1, r9
 80066de:	4640      	mov	r0, r8
 80066e0:	f7fa fa3a 	bl	8000b58 <__aeabi_d2iz>
 80066e4:	4606      	mov	r6, r0
 80066e6:	f7f9 ff1d 	bl	8000524 <__aeabi_i2d>
 80066ea:	3630      	adds	r6, #48	; 0x30
 80066ec:	4602      	mov	r2, r0
 80066ee:	460b      	mov	r3, r1
 80066f0:	4640      	mov	r0, r8
 80066f2:	4649      	mov	r1, r9
 80066f4:	f7f9 fdc8 	bl	8000288 <__aeabi_dsub>
 80066f8:	f805 6b01 	strb.w	r6, [r5], #1
 80066fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80066fe:	429d      	cmp	r5, r3
 8006700:	4680      	mov	r8, r0
 8006702:	4689      	mov	r9, r1
 8006704:	f04f 0200 	mov.w	r2, #0
 8006708:	d124      	bne.n	8006754 <_dtoa_r+0x60c>
 800670a:	4b1b      	ldr	r3, [pc, #108]	; (8006778 <_dtoa_r+0x630>)
 800670c:	4650      	mov	r0, sl
 800670e:	4659      	mov	r1, fp
 8006710:	f7f9 fdbc 	bl	800028c <__adddf3>
 8006714:	4602      	mov	r2, r0
 8006716:	460b      	mov	r3, r1
 8006718:	4640      	mov	r0, r8
 800671a:	4649      	mov	r1, r9
 800671c:	f7fa f9fc 	bl	8000b18 <__aeabi_dcmpgt>
 8006720:	2800      	cmp	r0, #0
 8006722:	d173      	bne.n	800680c <_dtoa_r+0x6c4>
 8006724:	4652      	mov	r2, sl
 8006726:	465b      	mov	r3, fp
 8006728:	4913      	ldr	r1, [pc, #76]	; (8006778 <_dtoa_r+0x630>)
 800672a:	2000      	movs	r0, #0
 800672c:	f7f9 fdac 	bl	8000288 <__aeabi_dsub>
 8006730:	4602      	mov	r2, r0
 8006732:	460b      	mov	r3, r1
 8006734:	4640      	mov	r0, r8
 8006736:	4649      	mov	r1, r9
 8006738:	f7fa f9d0 	bl	8000adc <__aeabi_dcmplt>
 800673c:	2800      	cmp	r0, #0
 800673e:	f43f af35 	beq.w	80065ac <_dtoa_r+0x464>
 8006742:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006744:	1e6b      	subs	r3, r5, #1
 8006746:	930f      	str	r3, [sp, #60]	; 0x3c
 8006748:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800674c:	2b30      	cmp	r3, #48	; 0x30
 800674e:	d0f8      	beq.n	8006742 <_dtoa_r+0x5fa>
 8006750:	9700      	str	r7, [sp, #0]
 8006752:	e049      	b.n	80067e8 <_dtoa_r+0x6a0>
 8006754:	4b05      	ldr	r3, [pc, #20]	; (800676c <_dtoa_r+0x624>)
 8006756:	f7f9 ff4f 	bl	80005f8 <__aeabi_dmul>
 800675a:	4680      	mov	r8, r0
 800675c:	4689      	mov	r9, r1
 800675e:	e7bd      	b.n	80066dc <_dtoa_r+0x594>
 8006760:	080093f0 	.word	0x080093f0
 8006764:	080093c8 	.word	0x080093c8
 8006768:	3ff00000 	.word	0x3ff00000
 800676c:	40240000 	.word	0x40240000
 8006770:	401c0000 	.word	0x401c0000
 8006774:	40140000 	.word	0x40140000
 8006778:	3fe00000 	.word	0x3fe00000
 800677c:	9d01      	ldr	r5, [sp, #4]
 800677e:	4656      	mov	r6, sl
 8006780:	465f      	mov	r7, fp
 8006782:	4642      	mov	r2, r8
 8006784:	464b      	mov	r3, r9
 8006786:	4630      	mov	r0, r6
 8006788:	4639      	mov	r1, r7
 800678a:	f7fa f85f 	bl	800084c <__aeabi_ddiv>
 800678e:	f7fa f9e3 	bl	8000b58 <__aeabi_d2iz>
 8006792:	4682      	mov	sl, r0
 8006794:	f7f9 fec6 	bl	8000524 <__aeabi_i2d>
 8006798:	4642      	mov	r2, r8
 800679a:	464b      	mov	r3, r9
 800679c:	f7f9 ff2c 	bl	80005f8 <__aeabi_dmul>
 80067a0:	4602      	mov	r2, r0
 80067a2:	460b      	mov	r3, r1
 80067a4:	4630      	mov	r0, r6
 80067a6:	4639      	mov	r1, r7
 80067a8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80067ac:	f7f9 fd6c 	bl	8000288 <__aeabi_dsub>
 80067b0:	f805 6b01 	strb.w	r6, [r5], #1
 80067b4:	9e01      	ldr	r6, [sp, #4]
 80067b6:	9f03      	ldr	r7, [sp, #12]
 80067b8:	1bae      	subs	r6, r5, r6
 80067ba:	42b7      	cmp	r7, r6
 80067bc:	4602      	mov	r2, r0
 80067be:	460b      	mov	r3, r1
 80067c0:	d135      	bne.n	800682e <_dtoa_r+0x6e6>
 80067c2:	f7f9 fd63 	bl	800028c <__adddf3>
 80067c6:	4642      	mov	r2, r8
 80067c8:	464b      	mov	r3, r9
 80067ca:	4606      	mov	r6, r0
 80067cc:	460f      	mov	r7, r1
 80067ce:	f7fa f9a3 	bl	8000b18 <__aeabi_dcmpgt>
 80067d2:	b9d0      	cbnz	r0, 800680a <_dtoa_r+0x6c2>
 80067d4:	4642      	mov	r2, r8
 80067d6:	464b      	mov	r3, r9
 80067d8:	4630      	mov	r0, r6
 80067da:	4639      	mov	r1, r7
 80067dc:	f7fa f974 	bl	8000ac8 <__aeabi_dcmpeq>
 80067e0:	b110      	cbz	r0, 80067e8 <_dtoa_r+0x6a0>
 80067e2:	f01a 0f01 	tst.w	sl, #1
 80067e6:	d110      	bne.n	800680a <_dtoa_r+0x6c2>
 80067e8:	4620      	mov	r0, r4
 80067ea:	ee18 1a10 	vmov	r1, s16
 80067ee:	f000 fd13 	bl	8007218 <_Bfree>
 80067f2:	2300      	movs	r3, #0
 80067f4:	9800      	ldr	r0, [sp, #0]
 80067f6:	702b      	strb	r3, [r5, #0]
 80067f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80067fa:	3001      	adds	r0, #1
 80067fc:	6018      	str	r0, [r3, #0]
 80067fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006800:	2b00      	cmp	r3, #0
 8006802:	f43f acf1 	beq.w	80061e8 <_dtoa_r+0xa0>
 8006806:	601d      	str	r5, [r3, #0]
 8006808:	e4ee      	b.n	80061e8 <_dtoa_r+0xa0>
 800680a:	9f00      	ldr	r7, [sp, #0]
 800680c:	462b      	mov	r3, r5
 800680e:	461d      	mov	r5, r3
 8006810:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006814:	2a39      	cmp	r2, #57	; 0x39
 8006816:	d106      	bne.n	8006826 <_dtoa_r+0x6de>
 8006818:	9a01      	ldr	r2, [sp, #4]
 800681a:	429a      	cmp	r2, r3
 800681c:	d1f7      	bne.n	800680e <_dtoa_r+0x6c6>
 800681e:	9901      	ldr	r1, [sp, #4]
 8006820:	2230      	movs	r2, #48	; 0x30
 8006822:	3701      	adds	r7, #1
 8006824:	700a      	strb	r2, [r1, #0]
 8006826:	781a      	ldrb	r2, [r3, #0]
 8006828:	3201      	adds	r2, #1
 800682a:	701a      	strb	r2, [r3, #0]
 800682c:	e790      	b.n	8006750 <_dtoa_r+0x608>
 800682e:	4ba6      	ldr	r3, [pc, #664]	; (8006ac8 <_dtoa_r+0x980>)
 8006830:	2200      	movs	r2, #0
 8006832:	f7f9 fee1 	bl	80005f8 <__aeabi_dmul>
 8006836:	2200      	movs	r2, #0
 8006838:	2300      	movs	r3, #0
 800683a:	4606      	mov	r6, r0
 800683c:	460f      	mov	r7, r1
 800683e:	f7fa f943 	bl	8000ac8 <__aeabi_dcmpeq>
 8006842:	2800      	cmp	r0, #0
 8006844:	d09d      	beq.n	8006782 <_dtoa_r+0x63a>
 8006846:	e7cf      	b.n	80067e8 <_dtoa_r+0x6a0>
 8006848:	9a08      	ldr	r2, [sp, #32]
 800684a:	2a00      	cmp	r2, #0
 800684c:	f000 80d7 	beq.w	80069fe <_dtoa_r+0x8b6>
 8006850:	9a06      	ldr	r2, [sp, #24]
 8006852:	2a01      	cmp	r2, #1
 8006854:	f300 80ba 	bgt.w	80069cc <_dtoa_r+0x884>
 8006858:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800685a:	2a00      	cmp	r2, #0
 800685c:	f000 80b2 	beq.w	80069c4 <_dtoa_r+0x87c>
 8006860:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006864:	9e07      	ldr	r6, [sp, #28]
 8006866:	9d04      	ldr	r5, [sp, #16]
 8006868:	9a04      	ldr	r2, [sp, #16]
 800686a:	441a      	add	r2, r3
 800686c:	9204      	str	r2, [sp, #16]
 800686e:	9a05      	ldr	r2, [sp, #20]
 8006870:	2101      	movs	r1, #1
 8006872:	441a      	add	r2, r3
 8006874:	4620      	mov	r0, r4
 8006876:	9205      	str	r2, [sp, #20]
 8006878:	f000 fd86 	bl	8007388 <__i2b>
 800687c:	4607      	mov	r7, r0
 800687e:	2d00      	cmp	r5, #0
 8006880:	dd0c      	ble.n	800689c <_dtoa_r+0x754>
 8006882:	9b05      	ldr	r3, [sp, #20]
 8006884:	2b00      	cmp	r3, #0
 8006886:	dd09      	ble.n	800689c <_dtoa_r+0x754>
 8006888:	42ab      	cmp	r3, r5
 800688a:	9a04      	ldr	r2, [sp, #16]
 800688c:	bfa8      	it	ge
 800688e:	462b      	movge	r3, r5
 8006890:	1ad2      	subs	r2, r2, r3
 8006892:	9204      	str	r2, [sp, #16]
 8006894:	9a05      	ldr	r2, [sp, #20]
 8006896:	1aed      	subs	r5, r5, r3
 8006898:	1ad3      	subs	r3, r2, r3
 800689a:	9305      	str	r3, [sp, #20]
 800689c:	9b07      	ldr	r3, [sp, #28]
 800689e:	b31b      	cbz	r3, 80068e8 <_dtoa_r+0x7a0>
 80068a0:	9b08      	ldr	r3, [sp, #32]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	f000 80af 	beq.w	8006a06 <_dtoa_r+0x8be>
 80068a8:	2e00      	cmp	r6, #0
 80068aa:	dd13      	ble.n	80068d4 <_dtoa_r+0x78c>
 80068ac:	4639      	mov	r1, r7
 80068ae:	4632      	mov	r2, r6
 80068b0:	4620      	mov	r0, r4
 80068b2:	f000 fe29 	bl	8007508 <__pow5mult>
 80068b6:	ee18 2a10 	vmov	r2, s16
 80068ba:	4601      	mov	r1, r0
 80068bc:	4607      	mov	r7, r0
 80068be:	4620      	mov	r0, r4
 80068c0:	f000 fd78 	bl	80073b4 <__multiply>
 80068c4:	ee18 1a10 	vmov	r1, s16
 80068c8:	4680      	mov	r8, r0
 80068ca:	4620      	mov	r0, r4
 80068cc:	f000 fca4 	bl	8007218 <_Bfree>
 80068d0:	ee08 8a10 	vmov	s16, r8
 80068d4:	9b07      	ldr	r3, [sp, #28]
 80068d6:	1b9a      	subs	r2, r3, r6
 80068d8:	d006      	beq.n	80068e8 <_dtoa_r+0x7a0>
 80068da:	ee18 1a10 	vmov	r1, s16
 80068de:	4620      	mov	r0, r4
 80068e0:	f000 fe12 	bl	8007508 <__pow5mult>
 80068e4:	ee08 0a10 	vmov	s16, r0
 80068e8:	2101      	movs	r1, #1
 80068ea:	4620      	mov	r0, r4
 80068ec:	f000 fd4c 	bl	8007388 <__i2b>
 80068f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	4606      	mov	r6, r0
 80068f6:	f340 8088 	ble.w	8006a0a <_dtoa_r+0x8c2>
 80068fa:	461a      	mov	r2, r3
 80068fc:	4601      	mov	r1, r0
 80068fe:	4620      	mov	r0, r4
 8006900:	f000 fe02 	bl	8007508 <__pow5mult>
 8006904:	9b06      	ldr	r3, [sp, #24]
 8006906:	2b01      	cmp	r3, #1
 8006908:	4606      	mov	r6, r0
 800690a:	f340 8081 	ble.w	8006a10 <_dtoa_r+0x8c8>
 800690e:	f04f 0800 	mov.w	r8, #0
 8006912:	6933      	ldr	r3, [r6, #16]
 8006914:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006918:	6918      	ldr	r0, [r3, #16]
 800691a:	f000 fce5 	bl	80072e8 <__hi0bits>
 800691e:	f1c0 0020 	rsb	r0, r0, #32
 8006922:	9b05      	ldr	r3, [sp, #20]
 8006924:	4418      	add	r0, r3
 8006926:	f010 001f 	ands.w	r0, r0, #31
 800692a:	f000 8092 	beq.w	8006a52 <_dtoa_r+0x90a>
 800692e:	f1c0 0320 	rsb	r3, r0, #32
 8006932:	2b04      	cmp	r3, #4
 8006934:	f340 808a 	ble.w	8006a4c <_dtoa_r+0x904>
 8006938:	f1c0 001c 	rsb	r0, r0, #28
 800693c:	9b04      	ldr	r3, [sp, #16]
 800693e:	4403      	add	r3, r0
 8006940:	9304      	str	r3, [sp, #16]
 8006942:	9b05      	ldr	r3, [sp, #20]
 8006944:	4403      	add	r3, r0
 8006946:	4405      	add	r5, r0
 8006948:	9305      	str	r3, [sp, #20]
 800694a:	9b04      	ldr	r3, [sp, #16]
 800694c:	2b00      	cmp	r3, #0
 800694e:	dd07      	ble.n	8006960 <_dtoa_r+0x818>
 8006950:	ee18 1a10 	vmov	r1, s16
 8006954:	461a      	mov	r2, r3
 8006956:	4620      	mov	r0, r4
 8006958:	f000 fe30 	bl	80075bc <__lshift>
 800695c:	ee08 0a10 	vmov	s16, r0
 8006960:	9b05      	ldr	r3, [sp, #20]
 8006962:	2b00      	cmp	r3, #0
 8006964:	dd05      	ble.n	8006972 <_dtoa_r+0x82a>
 8006966:	4631      	mov	r1, r6
 8006968:	461a      	mov	r2, r3
 800696a:	4620      	mov	r0, r4
 800696c:	f000 fe26 	bl	80075bc <__lshift>
 8006970:	4606      	mov	r6, r0
 8006972:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006974:	2b00      	cmp	r3, #0
 8006976:	d06e      	beq.n	8006a56 <_dtoa_r+0x90e>
 8006978:	ee18 0a10 	vmov	r0, s16
 800697c:	4631      	mov	r1, r6
 800697e:	f000 fe8d 	bl	800769c <__mcmp>
 8006982:	2800      	cmp	r0, #0
 8006984:	da67      	bge.n	8006a56 <_dtoa_r+0x90e>
 8006986:	9b00      	ldr	r3, [sp, #0]
 8006988:	3b01      	subs	r3, #1
 800698a:	ee18 1a10 	vmov	r1, s16
 800698e:	9300      	str	r3, [sp, #0]
 8006990:	220a      	movs	r2, #10
 8006992:	2300      	movs	r3, #0
 8006994:	4620      	mov	r0, r4
 8006996:	f000 fc61 	bl	800725c <__multadd>
 800699a:	9b08      	ldr	r3, [sp, #32]
 800699c:	ee08 0a10 	vmov	s16, r0
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	f000 81b1 	beq.w	8006d08 <_dtoa_r+0xbc0>
 80069a6:	2300      	movs	r3, #0
 80069a8:	4639      	mov	r1, r7
 80069aa:	220a      	movs	r2, #10
 80069ac:	4620      	mov	r0, r4
 80069ae:	f000 fc55 	bl	800725c <__multadd>
 80069b2:	9b02      	ldr	r3, [sp, #8]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	4607      	mov	r7, r0
 80069b8:	f300 808e 	bgt.w	8006ad8 <_dtoa_r+0x990>
 80069bc:	9b06      	ldr	r3, [sp, #24]
 80069be:	2b02      	cmp	r3, #2
 80069c0:	dc51      	bgt.n	8006a66 <_dtoa_r+0x91e>
 80069c2:	e089      	b.n	8006ad8 <_dtoa_r+0x990>
 80069c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80069c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80069ca:	e74b      	b.n	8006864 <_dtoa_r+0x71c>
 80069cc:	9b03      	ldr	r3, [sp, #12]
 80069ce:	1e5e      	subs	r6, r3, #1
 80069d0:	9b07      	ldr	r3, [sp, #28]
 80069d2:	42b3      	cmp	r3, r6
 80069d4:	bfbf      	itttt	lt
 80069d6:	9b07      	ldrlt	r3, [sp, #28]
 80069d8:	9607      	strlt	r6, [sp, #28]
 80069da:	1af2      	sublt	r2, r6, r3
 80069dc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80069de:	bfb6      	itet	lt
 80069e0:	189b      	addlt	r3, r3, r2
 80069e2:	1b9e      	subge	r6, r3, r6
 80069e4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80069e6:	9b03      	ldr	r3, [sp, #12]
 80069e8:	bfb8      	it	lt
 80069ea:	2600      	movlt	r6, #0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	bfb7      	itett	lt
 80069f0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80069f4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80069f8:	1a9d      	sublt	r5, r3, r2
 80069fa:	2300      	movlt	r3, #0
 80069fc:	e734      	b.n	8006868 <_dtoa_r+0x720>
 80069fe:	9e07      	ldr	r6, [sp, #28]
 8006a00:	9d04      	ldr	r5, [sp, #16]
 8006a02:	9f08      	ldr	r7, [sp, #32]
 8006a04:	e73b      	b.n	800687e <_dtoa_r+0x736>
 8006a06:	9a07      	ldr	r2, [sp, #28]
 8006a08:	e767      	b.n	80068da <_dtoa_r+0x792>
 8006a0a:	9b06      	ldr	r3, [sp, #24]
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	dc18      	bgt.n	8006a42 <_dtoa_r+0x8fa>
 8006a10:	f1ba 0f00 	cmp.w	sl, #0
 8006a14:	d115      	bne.n	8006a42 <_dtoa_r+0x8fa>
 8006a16:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006a1a:	b993      	cbnz	r3, 8006a42 <_dtoa_r+0x8fa>
 8006a1c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006a20:	0d1b      	lsrs	r3, r3, #20
 8006a22:	051b      	lsls	r3, r3, #20
 8006a24:	b183      	cbz	r3, 8006a48 <_dtoa_r+0x900>
 8006a26:	9b04      	ldr	r3, [sp, #16]
 8006a28:	3301      	adds	r3, #1
 8006a2a:	9304      	str	r3, [sp, #16]
 8006a2c:	9b05      	ldr	r3, [sp, #20]
 8006a2e:	3301      	adds	r3, #1
 8006a30:	9305      	str	r3, [sp, #20]
 8006a32:	f04f 0801 	mov.w	r8, #1
 8006a36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	f47f af6a 	bne.w	8006912 <_dtoa_r+0x7ca>
 8006a3e:	2001      	movs	r0, #1
 8006a40:	e76f      	b.n	8006922 <_dtoa_r+0x7da>
 8006a42:	f04f 0800 	mov.w	r8, #0
 8006a46:	e7f6      	b.n	8006a36 <_dtoa_r+0x8ee>
 8006a48:	4698      	mov	r8, r3
 8006a4a:	e7f4      	b.n	8006a36 <_dtoa_r+0x8ee>
 8006a4c:	f43f af7d 	beq.w	800694a <_dtoa_r+0x802>
 8006a50:	4618      	mov	r0, r3
 8006a52:	301c      	adds	r0, #28
 8006a54:	e772      	b.n	800693c <_dtoa_r+0x7f4>
 8006a56:	9b03      	ldr	r3, [sp, #12]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	dc37      	bgt.n	8006acc <_dtoa_r+0x984>
 8006a5c:	9b06      	ldr	r3, [sp, #24]
 8006a5e:	2b02      	cmp	r3, #2
 8006a60:	dd34      	ble.n	8006acc <_dtoa_r+0x984>
 8006a62:	9b03      	ldr	r3, [sp, #12]
 8006a64:	9302      	str	r3, [sp, #8]
 8006a66:	9b02      	ldr	r3, [sp, #8]
 8006a68:	b96b      	cbnz	r3, 8006a86 <_dtoa_r+0x93e>
 8006a6a:	4631      	mov	r1, r6
 8006a6c:	2205      	movs	r2, #5
 8006a6e:	4620      	mov	r0, r4
 8006a70:	f000 fbf4 	bl	800725c <__multadd>
 8006a74:	4601      	mov	r1, r0
 8006a76:	4606      	mov	r6, r0
 8006a78:	ee18 0a10 	vmov	r0, s16
 8006a7c:	f000 fe0e 	bl	800769c <__mcmp>
 8006a80:	2800      	cmp	r0, #0
 8006a82:	f73f adbb 	bgt.w	80065fc <_dtoa_r+0x4b4>
 8006a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a88:	9d01      	ldr	r5, [sp, #4]
 8006a8a:	43db      	mvns	r3, r3
 8006a8c:	9300      	str	r3, [sp, #0]
 8006a8e:	f04f 0800 	mov.w	r8, #0
 8006a92:	4631      	mov	r1, r6
 8006a94:	4620      	mov	r0, r4
 8006a96:	f000 fbbf 	bl	8007218 <_Bfree>
 8006a9a:	2f00      	cmp	r7, #0
 8006a9c:	f43f aea4 	beq.w	80067e8 <_dtoa_r+0x6a0>
 8006aa0:	f1b8 0f00 	cmp.w	r8, #0
 8006aa4:	d005      	beq.n	8006ab2 <_dtoa_r+0x96a>
 8006aa6:	45b8      	cmp	r8, r7
 8006aa8:	d003      	beq.n	8006ab2 <_dtoa_r+0x96a>
 8006aaa:	4641      	mov	r1, r8
 8006aac:	4620      	mov	r0, r4
 8006aae:	f000 fbb3 	bl	8007218 <_Bfree>
 8006ab2:	4639      	mov	r1, r7
 8006ab4:	4620      	mov	r0, r4
 8006ab6:	f000 fbaf 	bl	8007218 <_Bfree>
 8006aba:	e695      	b.n	80067e8 <_dtoa_r+0x6a0>
 8006abc:	2600      	movs	r6, #0
 8006abe:	4637      	mov	r7, r6
 8006ac0:	e7e1      	b.n	8006a86 <_dtoa_r+0x93e>
 8006ac2:	9700      	str	r7, [sp, #0]
 8006ac4:	4637      	mov	r7, r6
 8006ac6:	e599      	b.n	80065fc <_dtoa_r+0x4b4>
 8006ac8:	40240000 	.word	0x40240000
 8006acc:	9b08      	ldr	r3, [sp, #32]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f000 80ca 	beq.w	8006c68 <_dtoa_r+0xb20>
 8006ad4:	9b03      	ldr	r3, [sp, #12]
 8006ad6:	9302      	str	r3, [sp, #8]
 8006ad8:	2d00      	cmp	r5, #0
 8006ada:	dd05      	ble.n	8006ae8 <_dtoa_r+0x9a0>
 8006adc:	4639      	mov	r1, r7
 8006ade:	462a      	mov	r2, r5
 8006ae0:	4620      	mov	r0, r4
 8006ae2:	f000 fd6b 	bl	80075bc <__lshift>
 8006ae6:	4607      	mov	r7, r0
 8006ae8:	f1b8 0f00 	cmp.w	r8, #0
 8006aec:	d05b      	beq.n	8006ba6 <_dtoa_r+0xa5e>
 8006aee:	6879      	ldr	r1, [r7, #4]
 8006af0:	4620      	mov	r0, r4
 8006af2:	f000 fb51 	bl	8007198 <_Balloc>
 8006af6:	4605      	mov	r5, r0
 8006af8:	b928      	cbnz	r0, 8006b06 <_dtoa_r+0x9be>
 8006afa:	4b87      	ldr	r3, [pc, #540]	; (8006d18 <_dtoa_r+0xbd0>)
 8006afc:	4602      	mov	r2, r0
 8006afe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006b02:	f7ff bb3b 	b.w	800617c <_dtoa_r+0x34>
 8006b06:	693a      	ldr	r2, [r7, #16]
 8006b08:	3202      	adds	r2, #2
 8006b0a:	0092      	lsls	r2, r2, #2
 8006b0c:	f107 010c 	add.w	r1, r7, #12
 8006b10:	300c      	adds	r0, #12
 8006b12:	f000 fb33 	bl	800717c <memcpy>
 8006b16:	2201      	movs	r2, #1
 8006b18:	4629      	mov	r1, r5
 8006b1a:	4620      	mov	r0, r4
 8006b1c:	f000 fd4e 	bl	80075bc <__lshift>
 8006b20:	9b01      	ldr	r3, [sp, #4]
 8006b22:	f103 0901 	add.w	r9, r3, #1
 8006b26:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	9305      	str	r3, [sp, #20]
 8006b2e:	f00a 0301 	and.w	r3, sl, #1
 8006b32:	46b8      	mov	r8, r7
 8006b34:	9304      	str	r3, [sp, #16]
 8006b36:	4607      	mov	r7, r0
 8006b38:	4631      	mov	r1, r6
 8006b3a:	ee18 0a10 	vmov	r0, s16
 8006b3e:	f7ff fa75 	bl	800602c <quorem>
 8006b42:	4641      	mov	r1, r8
 8006b44:	9002      	str	r0, [sp, #8]
 8006b46:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006b4a:	ee18 0a10 	vmov	r0, s16
 8006b4e:	f000 fda5 	bl	800769c <__mcmp>
 8006b52:	463a      	mov	r2, r7
 8006b54:	9003      	str	r0, [sp, #12]
 8006b56:	4631      	mov	r1, r6
 8006b58:	4620      	mov	r0, r4
 8006b5a:	f000 fdbb 	bl	80076d4 <__mdiff>
 8006b5e:	68c2      	ldr	r2, [r0, #12]
 8006b60:	f109 3bff 	add.w	fp, r9, #4294967295
 8006b64:	4605      	mov	r5, r0
 8006b66:	bb02      	cbnz	r2, 8006baa <_dtoa_r+0xa62>
 8006b68:	4601      	mov	r1, r0
 8006b6a:	ee18 0a10 	vmov	r0, s16
 8006b6e:	f000 fd95 	bl	800769c <__mcmp>
 8006b72:	4602      	mov	r2, r0
 8006b74:	4629      	mov	r1, r5
 8006b76:	4620      	mov	r0, r4
 8006b78:	9207      	str	r2, [sp, #28]
 8006b7a:	f000 fb4d 	bl	8007218 <_Bfree>
 8006b7e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006b82:	ea43 0102 	orr.w	r1, r3, r2
 8006b86:	9b04      	ldr	r3, [sp, #16]
 8006b88:	430b      	orrs	r3, r1
 8006b8a:	464d      	mov	r5, r9
 8006b8c:	d10f      	bne.n	8006bae <_dtoa_r+0xa66>
 8006b8e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006b92:	d02a      	beq.n	8006bea <_dtoa_r+0xaa2>
 8006b94:	9b03      	ldr	r3, [sp, #12]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	dd02      	ble.n	8006ba0 <_dtoa_r+0xa58>
 8006b9a:	9b02      	ldr	r3, [sp, #8]
 8006b9c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006ba0:	f88b a000 	strb.w	sl, [fp]
 8006ba4:	e775      	b.n	8006a92 <_dtoa_r+0x94a>
 8006ba6:	4638      	mov	r0, r7
 8006ba8:	e7ba      	b.n	8006b20 <_dtoa_r+0x9d8>
 8006baa:	2201      	movs	r2, #1
 8006bac:	e7e2      	b.n	8006b74 <_dtoa_r+0xa2c>
 8006bae:	9b03      	ldr	r3, [sp, #12]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	db04      	blt.n	8006bbe <_dtoa_r+0xa76>
 8006bb4:	9906      	ldr	r1, [sp, #24]
 8006bb6:	430b      	orrs	r3, r1
 8006bb8:	9904      	ldr	r1, [sp, #16]
 8006bba:	430b      	orrs	r3, r1
 8006bbc:	d122      	bne.n	8006c04 <_dtoa_r+0xabc>
 8006bbe:	2a00      	cmp	r2, #0
 8006bc0:	ddee      	ble.n	8006ba0 <_dtoa_r+0xa58>
 8006bc2:	ee18 1a10 	vmov	r1, s16
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	4620      	mov	r0, r4
 8006bca:	f000 fcf7 	bl	80075bc <__lshift>
 8006bce:	4631      	mov	r1, r6
 8006bd0:	ee08 0a10 	vmov	s16, r0
 8006bd4:	f000 fd62 	bl	800769c <__mcmp>
 8006bd8:	2800      	cmp	r0, #0
 8006bda:	dc03      	bgt.n	8006be4 <_dtoa_r+0xa9c>
 8006bdc:	d1e0      	bne.n	8006ba0 <_dtoa_r+0xa58>
 8006bde:	f01a 0f01 	tst.w	sl, #1
 8006be2:	d0dd      	beq.n	8006ba0 <_dtoa_r+0xa58>
 8006be4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006be8:	d1d7      	bne.n	8006b9a <_dtoa_r+0xa52>
 8006bea:	2339      	movs	r3, #57	; 0x39
 8006bec:	f88b 3000 	strb.w	r3, [fp]
 8006bf0:	462b      	mov	r3, r5
 8006bf2:	461d      	mov	r5, r3
 8006bf4:	3b01      	subs	r3, #1
 8006bf6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006bfa:	2a39      	cmp	r2, #57	; 0x39
 8006bfc:	d071      	beq.n	8006ce2 <_dtoa_r+0xb9a>
 8006bfe:	3201      	adds	r2, #1
 8006c00:	701a      	strb	r2, [r3, #0]
 8006c02:	e746      	b.n	8006a92 <_dtoa_r+0x94a>
 8006c04:	2a00      	cmp	r2, #0
 8006c06:	dd07      	ble.n	8006c18 <_dtoa_r+0xad0>
 8006c08:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006c0c:	d0ed      	beq.n	8006bea <_dtoa_r+0xaa2>
 8006c0e:	f10a 0301 	add.w	r3, sl, #1
 8006c12:	f88b 3000 	strb.w	r3, [fp]
 8006c16:	e73c      	b.n	8006a92 <_dtoa_r+0x94a>
 8006c18:	9b05      	ldr	r3, [sp, #20]
 8006c1a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006c1e:	4599      	cmp	r9, r3
 8006c20:	d047      	beq.n	8006cb2 <_dtoa_r+0xb6a>
 8006c22:	ee18 1a10 	vmov	r1, s16
 8006c26:	2300      	movs	r3, #0
 8006c28:	220a      	movs	r2, #10
 8006c2a:	4620      	mov	r0, r4
 8006c2c:	f000 fb16 	bl	800725c <__multadd>
 8006c30:	45b8      	cmp	r8, r7
 8006c32:	ee08 0a10 	vmov	s16, r0
 8006c36:	f04f 0300 	mov.w	r3, #0
 8006c3a:	f04f 020a 	mov.w	r2, #10
 8006c3e:	4641      	mov	r1, r8
 8006c40:	4620      	mov	r0, r4
 8006c42:	d106      	bne.n	8006c52 <_dtoa_r+0xb0a>
 8006c44:	f000 fb0a 	bl	800725c <__multadd>
 8006c48:	4680      	mov	r8, r0
 8006c4a:	4607      	mov	r7, r0
 8006c4c:	f109 0901 	add.w	r9, r9, #1
 8006c50:	e772      	b.n	8006b38 <_dtoa_r+0x9f0>
 8006c52:	f000 fb03 	bl	800725c <__multadd>
 8006c56:	4639      	mov	r1, r7
 8006c58:	4680      	mov	r8, r0
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	220a      	movs	r2, #10
 8006c5e:	4620      	mov	r0, r4
 8006c60:	f000 fafc 	bl	800725c <__multadd>
 8006c64:	4607      	mov	r7, r0
 8006c66:	e7f1      	b.n	8006c4c <_dtoa_r+0xb04>
 8006c68:	9b03      	ldr	r3, [sp, #12]
 8006c6a:	9302      	str	r3, [sp, #8]
 8006c6c:	9d01      	ldr	r5, [sp, #4]
 8006c6e:	ee18 0a10 	vmov	r0, s16
 8006c72:	4631      	mov	r1, r6
 8006c74:	f7ff f9da 	bl	800602c <quorem>
 8006c78:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006c7c:	9b01      	ldr	r3, [sp, #4]
 8006c7e:	f805 ab01 	strb.w	sl, [r5], #1
 8006c82:	1aea      	subs	r2, r5, r3
 8006c84:	9b02      	ldr	r3, [sp, #8]
 8006c86:	4293      	cmp	r3, r2
 8006c88:	dd09      	ble.n	8006c9e <_dtoa_r+0xb56>
 8006c8a:	ee18 1a10 	vmov	r1, s16
 8006c8e:	2300      	movs	r3, #0
 8006c90:	220a      	movs	r2, #10
 8006c92:	4620      	mov	r0, r4
 8006c94:	f000 fae2 	bl	800725c <__multadd>
 8006c98:	ee08 0a10 	vmov	s16, r0
 8006c9c:	e7e7      	b.n	8006c6e <_dtoa_r+0xb26>
 8006c9e:	9b02      	ldr	r3, [sp, #8]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	bfc8      	it	gt
 8006ca4:	461d      	movgt	r5, r3
 8006ca6:	9b01      	ldr	r3, [sp, #4]
 8006ca8:	bfd8      	it	le
 8006caa:	2501      	movle	r5, #1
 8006cac:	441d      	add	r5, r3
 8006cae:	f04f 0800 	mov.w	r8, #0
 8006cb2:	ee18 1a10 	vmov	r1, s16
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	4620      	mov	r0, r4
 8006cba:	f000 fc7f 	bl	80075bc <__lshift>
 8006cbe:	4631      	mov	r1, r6
 8006cc0:	ee08 0a10 	vmov	s16, r0
 8006cc4:	f000 fcea 	bl	800769c <__mcmp>
 8006cc8:	2800      	cmp	r0, #0
 8006cca:	dc91      	bgt.n	8006bf0 <_dtoa_r+0xaa8>
 8006ccc:	d102      	bne.n	8006cd4 <_dtoa_r+0xb8c>
 8006cce:	f01a 0f01 	tst.w	sl, #1
 8006cd2:	d18d      	bne.n	8006bf0 <_dtoa_r+0xaa8>
 8006cd4:	462b      	mov	r3, r5
 8006cd6:	461d      	mov	r5, r3
 8006cd8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006cdc:	2a30      	cmp	r2, #48	; 0x30
 8006cde:	d0fa      	beq.n	8006cd6 <_dtoa_r+0xb8e>
 8006ce0:	e6d7      	b.n	8006a92 <_dtoa_r+0x94a>
 8006ce2:	9a01      	ldr	r2, [sp, #4]
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d184      	bne.n	8006bf2 <_dtoa_r+0xaaa>
 8006ce8:	9b00      	ldr	r3, [sp, #0]
 8006cea:	3301      	adds	r3, #1
 8006cec:	9300      	str	r3, [sp, #0]
 8006cee:	2331      	movs	r3, #49	; 0x31
 8006cf0:	7013      	strb	r3, [r2, #0]
 8006cf2:	e6ce      	b.n	8006a92 <_dtoa_r+0x94a>
 8006cf4:	4b09      	ldr	r3, [pc, #36]	; (8006d1c <_dtoa_r+0xbd4>)
 8006cf6:	f7ff ba95 	b.w	8006224 <_dtoa_r+0xdc>
 8006cfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f47f aa6e 	bne.w	80061de <_dtoa_r+0x96>
 8006d02:	4b07      	ldr	r3, [pc, #28]	; (8006d20 <_dtoa_r+0xbd8>)
 8006d04:	f7ff ba8e 	b.w	8006224 <_dtoa_r+0xdc>
 8006d08:	9b02      	ldr	r3, [sp, #8]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	dcae      	bgt.n	8006c6c <_dtoa_r+0xb24>
 8006d0e:	9b06      	ldr	r3, [sp, #24]
 8006d10:	2b02      	cmp	r3, #2
 8006d12:	f73f aea8 	bgt.w	8006a66 <_dtoa_r+0x91e>
 8006d16:	e7a9      	b.n	8006c6c <_dtoa_r+0xb24>
 8006d18:	080092fb 	.word	0x080092fb
 8006d1c:	08009258 	.word	0x08009258
 8006d20:	0800927c 	.word	0x0800927c

08006d24 <__sflush_r>:
 8006d24:	898a      	ldrh	r2, [r1, #12]
 8006d26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d2a:	4605      	mov	r5, r0
 8006d2c:	0710      	lsls	r0, r2, #28
 8006d2e:	460c      	mov	r4, r1
 8006d30:	d458      	bmi.n	8006de4 <__sflush_r+0xc0>
 8006d32:	684b      	ldr	r3, [r1, #4]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	dc05      	bgt.n	8006d44 <__sflush_r+0x20>
 8006d38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	dc02      	bgt.n	8006d44 <__sflush_r+0x20>
 8006d3e:	2000      	movs	r0, #0
 8006d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d46:	2e00      	cmp	r6, #0
 8006d48:	d0f9      	beq.n	8006d3e <__sflush_r+0x1a>
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006d50:	682f      	ldr	r7, [r5, #0]
 8006d52:	602b      	str	r3, [r5, #0]
 8006d54:	d032      	beq.n	8006dbc <__sflush_r+0x98>
 8006d56:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006d58:	89a3      	ldrh	r3, [r4, #12]
 8006d5a:	075a      	lsls	r2, r3, #29
 8006d5c:	d505      	bpl.n	8006d6a <__sflush_r+0x46>
 8006d5e:	6863      	ldr	r3, [r4, #4]
 8006d60:	1ac0      	subs	r0, r0, r3
 8006d62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d64:	b10b      	cbz	r3, 8006d6a <__sflush_r+0x46>
 8006d66:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006d68:	1ac0      	subs	r0, r0, r3
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006d70:	6a21      	ldr	r1, [r4, #32]
 8006d72:	4628      	mov	r0, r5
 8006d74:	47b0      	blx	r6
 8006d76:	1c43      	adds	r3, r0, #1
 8006d78:	89a3      	ldrh	r3, [r4, #12]
 8006d7a:	d106      	bne.n	8006d8a <__sflush_r+0x66>
 8006d7c:	6829      	ldr	r1, [r5, #0]
 8006d7e:	291d      	cmp	r1, #29
 8006d80:	d82c      	bhi.n	8006ddc <__sflush_r+0xb8>
 8006d82:	4a2a      	ldr	r2, [pc, #168]	; (8006e2c <__sflush_r+0x108>)
 8006d84:	40ca      	lsrs	r2, r1
 8006d86:	07d6      	lsls	r6, r2, #31
 8006d88:	d528      	bpl.n	8006ddc <__sflush_r+0xb8>
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	6062      	str	r2, [r4, #4]
 8006d8e:	04d9      	lsls	r1, r3, #19
 8006d90:	6922      	ldr	r2, [r4, #16]
 8006d92:	6022      	str	r2, [r4, #0]
 8006d94:	d504      	bpl.n	8006da0 <__sflush_r+0x7c>
 8006d96:	1c42      	adds	r2, r0, #1
 8006d98:	d101      	bne.n	8006d9e <__sflush_r+0x7a>
 8006d9a:	682b      	ldr	r3, [r5, #0]
 8006d9c:	b903      	cbnz	r3, 8006da0 <__sflush_r+0x7c>
 8006d9e:	6560      	str	r0, [r4, #84]	; 0x54
 8006da0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006da2:	602f      	str	r7, [r5, #0]
 8006da4:	2900      	cmp	r1, #0
 8006da6:	d0ca      	beq.n	8006d3e <__sflush_r+0x1a>
 8006da8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006dac:	4299      	cmp	r1, r3
 8006dae:	d002      	beq.n	8006db6 <__sflush_r+0x92>
 8006db0:	4628      	mov	r0, r5
 8006db2:	f000 fd8b 	bl	80078cc <_free_r>
 8006db6:	2000      	movs	r0, #0
 8006db8:	6360      	str	r0, [r4, #52]	; 0x34
 8006dba:	e7c1      	b.n	8006d40 <__sflush_r+0x1c>
 8006dbc:	6a21      	ldr	r1, [r4, #32]
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	4628      	mov	r0, r5
 8006dc2:	47b0      	blx	r6
 8006dc4:	1c41      	adds	r1, r0, #1
 8006dc6:	d1c7      	bne.n	8006d58 <__sflush_r+0x34>
 8006dc8:	682b      	ldr	r3, [r5, #0]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d0c4      	beq.n	8006d58 <__sflush_r+0x34>
 8006dce:	2b1d      	cmp	r3, #29
 8006dd0:	d001      	beq.n	8006dd6 <__sflush_r+0xb2>
 8006dd2:	2b16      	cmp	r3, #22
 8006dd4:	d101      	bne.n	8006dda <__sflush_r+0xb6>
 8006dd6:	602f      	str	r7, [r5, #0]
 8006dd8:	e7b1      	b.n	8006d3e <__sflush_r+0x1a>
 8006dda:	89a3      	ldrh	r3, [r4, #12]
 8006ddc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006de0:	81a3      	strh	r3, [r4, #12]
 8006de2:	e7ad      	b.n	8006d40 <__sflush_r+0x1c>
 8006de4:	690f      	ldr	r7, [r1, #16]
 8006de6:	2f00      	cmp	r7, #0
 8006de8:	d0a9      	beq.n	8006d3e <__sflush_r+0x1a>
 8006dea:	0793      	lsls	r3, r2, #30
 8006dec:	680e      	ldr	r6, [r1, #0]
 8006dee:	bf08      	it	eq
 8006df0:	694b      	ldreq	r3, [r1, #20]
 8006df2:	600f      	str	r7, [r1, #0]
 8006df4:	bf18      	it	ne
 8006df6:	2300      	movne	r3, #0
 8006df8:	eba6 0807 	sub.w	r8, r6, r7
 8006dfc:	608b      	str	r3, [r1, #8]
 8006dfe:	f1b8 0f00 	cmp.w	r8, #0
 8006e02:	dd9c      	ble.n	8006d3e <__sflush_r+0x1a>
 8006e04:	6a21      	ldr	r1, [r4, #32]
 8006e06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006e08:	4643      	mov	r3, r8
 8006e0a:	463a      	mov	r2, r7
 8006e0c:	4628      	mov	r0, r5
 8006e0e:	47b0      	blx	r6
 8006e10:	2800      	cmp	r0, #0
 8006e12:	dc06      	bgt.n	8006e22 <__sflush_r+0xfe>
 8006e14:	89a3      	ldrh	r3, [r4, #12]
 8006e16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e1a:	81a3      	strh	r3, [r4, #12]
 8006e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006e20:	e78e      	b.n	8006d40 <__sflush_r+0x1c>
 8006e22:	4407      	add	r7, r0
 8006e24:	eba8 0800 	sub.w	r8, r8, r0
 8006e28:	e7e9      	b.n	8006dfe <__sflush_r+0xda>
 8006e2a:	bf00      	nop
 8006e2c:	20400001 	.word	0x20400001

08006e30 <_fflush_r>:
 8006e30:	b538      	push	{r3, r4, r5, lr}
 8006e32:	690b      	ldr	r3, [r1, #16]
 8006e34:	4605      	mov	r5, r0
 8006e36:	460c      	mov	r4, r1
 8006e38:	b913      	cbnz	r3, 8006e40 <_fflush_r+0x10>
 8006e3a:	2500      	movs	r5, #0
 8006e3c:	4628      	mov	r0, r5
 8006e3e:	bd38      	pop	{r3, r4, r5, pc}
 8006e40:	b118      	cbz	r0, 8006e4a <_fflush_r+0x1a>
 8006e42:	6983      	ldr	r3, [r0, #24]
 8006e44:	b90b      	cbnz	r3, 8006e4a <_fflush_r+0x1a>
 8006e46:	f000 f887 	bl	8006f58 <__sinit>
 8006e4a:	4b14      	ldr	r3, [pc, #80]	; (8006e9c <_fflush_r+0x6c>)
 8006e4c:	429c      	cmp	r4, r3
 8006e4e:	d11b      	bne.n	8006e88 <_fflush_r+0x58>
 8006e50:	686c      	ldr	r4, [r5, #4]
 8006e52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d0ef      	beq.n	8006e3a <_fflush_r+0xa>
 8006e5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006e5c:	07d0      	lsls	r0, r2, #31
 8006e5e:	d404      	bmi.n	8006e6a <_fflush_r+0x3a>
 8006e60:	0599      	lsls	r1, r3, #22
 8006e62:	d402      	bmi.n	8006e6a <_fflush_r+0x3a>
 8006e64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e66:	f000 f91a 	bl	800709e <__retarget_lock_acquire_recursive>
 8006e6a:	4628      	mov	r0, r5
 8006e6c:	4621      	mov	r1, r4
 8006e6e:	f7ff ff59 	bl	8006d24 <__sflush_r>
 8006e72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e74:	07da      	lsls	r2, r3, #31
 8006e76:	4605      	mov	r5, r0
 8006e78:	d4e0      	bmi.n	8006e3c <_fflush_r+0xc>
 8006e7a:	89a3      	ldrh	r3, [r4, #12]
 8006e7c:	059b      	lsls	r3, r3, #22
 8006e7e:	d4dd      	bmi.n	8006e3c <_fflush_r+0xc>
 8006e80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e82:	f000 f90d 	bl	80070a0 <__retarget_lock_release_recursive>
 8006e86:	e7d9      	b.n	8006e3c <_fflush_r+0xc>
 8006e88:	4b05      	ldr	r3, [pc, #20]	; (8006ea0 <_fflush_r+0x70>)
 8006e8a:	429c      	cmp	r4, r3
 8006e8c:	d101      	bne.n	8006e92 <_fflush_r+0x62>
 8006e8e:	68ac      	ldr	r4, [r5, #8]
 8006e90:	e7df      	b.n	8006e52 <_fflush_r+0x22>
 8006e92:	4b04      	ldr	r3, [pc, #16]	; (8006ea4 <_fflush_r+0x74>)
 8006e94:	429c      	cmp	r4, r3
 8006e96:	bf08      	it	eq
 8006e98:	68ec      	ldreq	r4, [r5, #12]
 8006e9a:	e7da      	b.n	8006e52 <_fflush_r+0x22>
 8006e9c:	0800932c 	.word	0x0800932c
 8006ea0:	0800934c 	.word	0x0800934c
 8006ea4:	0800930c 	.word	0x0800930c

08006ea8 <std>:
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	b510      	push	{r4, lr}
 8006eac:	4604      	mov	r4, r0
 8006eae:	e9c0 3300 	strd	r3, r3, [r0]
 8006eb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006eb6:	6083      	str	r3, [r0, #8]
 8006eb8:	8181      	strh	r1, [r0, #12]
 8006eba:	6643      	str	r3, [r0, #100]	; 0x64
 8006ebc:	81c2      	strh	r2, [r0, #14]
 8006ebe:	6183      	str	r3, [r0, #24]
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	2208      	movs	r2, #8
 8006ec4:	305c      	adds	r0, #92	; 0x5c
 8006ec6:	f7fe fabd 	bl	8005444 <memset>
 8006eca:	4b05      	ldr	r3, [pc, #20]	; (8006ee0 <std+0x38>)
 8006ecc:	6263      	str	r3, [r4, #36]	; 0x24
 8006ece:	4b05      	ldr	r3, [pc, #20]	; (8006ee4 <std+0x3c>)
 8006ed0:	62a3      	str	r3, [r4, #40]	; 0x28
 8006ed2:	4b05      	ldr	r3, [pc, #20]	; (8006ee8 <std+0x40>)
 8006ed4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ed6:	4b05      	ldr	r3, [pc, #20]	; (8006eec <std+0x44>)
 8006ed8:	6224      	str	r4, [r4, #32]
 8006eda:	6323      	str	r3, [r4, #48]	; 0x30
 8006edc:	bd10      	pop	{r4, pc}
 8006ede:	bf00      	nop
 8006ee0:	08008019 	.word	0x08008019
 8006ee4:	0800803b 	.word	0x0800803b
 8006ee8:	08008073 	.word	0x08008073
 8006eec:	08008097 	.word	0x08008097

08006ef0 <_cleanup_r>:
 8006ef0:	4901      	ldr	r1, [pc, #4]	; (8006ef8 <_cleanup_r+0x8>)
 8006ef2:	f000 b8af 	b.w	8007054 <_fwalk_reent>
 8006ef6:	bf00      	nop
 8006ef8:	08006e31 	.word	0x08006e31

08006efc <__sfmoreglue>:
 8006efc:	b570      	push	{r4, r5, r6, lr}
 8006efe:	2268      	movs	r2, #104	; 0x68
 8006f00:	1e4d      	subs	r5, r1, #1
 8006f02:	4355      	muls	r5, r2
 8006f04:	460e      	mov	r6, r1
 8006f06:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006f0a:	f000 fd4b 	bl	80079a4 <_malloc_r>
 8006f0e:	4604      	mov	r4, r0
 8006f10:	b140      	cbz	r0, 8006f24 <__sfmoreglue+0x28>
 8006f12:	2100      	movs	r1, #0
 8006f14:	e9c0 1600 	strd	r1, r6, [r0]
 8006f18:	300c      	adds	r0, #12
 8006f1a:	60a0      	str	r0, [r4, #8]
 8006f1c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006f20:	f7fe fa90 	bl	8005444 <memset>
 8006f24:	4620      	mov	r0, r4
 8006f26:	bd70      	pop	{r4, r5, r6, pc}

08006f28 <__sfp_lock_acquire>:
 8006f28:	4801      	ldr	r0, [pc, #4]	; (8006f30 <__sfp_lock_acquire+0x8>)
 8006f2a:	f000 b8b8 	b.w	800709e <__retarget_lock_acquire_recursive>
 8006f2e:	bf00      	nop
 8006f30:	2000081d 	.word	0x2000081d

08006f34 <__sfp_lock_release>:
 8006f34:	4801      	ldr	r0, [pc, #4]	; (8006f3c <__sfp_lock_release+0x8>)
 8006f36:	f000 b8b3 	b.w	80070a0 <__retarget_lock_release_recursive>
 8006f3a:	bf00      	nop
 8006f3c:	2000081d 	.word	0x2000081d

08006f40 <__sinit_lock_acquire>:
 8006f40:	4801      	ldr	r0, [pc, #4]	; (8006f48 <__sinit_lock_acquire+0x8>)
 8006f42:	f000 b8ac 	b.w	800709e <__retarget_lock_acquire_recursive>
 8006f46:	bf00      	nop
 8006f48:	2000081e 	.word	0x2000081e

08006f4c <__sinit_lock_release>:
 8006f4c:	4801      	ldr	r0, [pc, #4]	; (8006f54 <__sinit_lock_release+0x8>)
 8006f4e:	f000 b8a7 	b.w	80070a0 <__retarget_lock_release_recursive>
 8006f52:	bf00      	nop
 8006f54:	2000081e 	.word	0x2000081e

08006f58 <__sinit>:
 8006f58:	b510      	push	{r4, lr}
 8006f5a:	4604      	mov	r4, r0
 8006f5c:	f7ff fff0 	bl	8006f40 <__sinit_lock_acquire>
 8006f60:	69a3      	ldr	r3, [r4, #24]
 8006f62:	b11b      	cbz	r3, 8006f6c <__sinit+0x14>
 8006f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f68:	f7ff bff0 	b.w	8006f4c <__sinit_lock_release>
 8006f6c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006f70:	6523      	str	r3, [r4, #80]	; 0x50
 8006f72:	4b13      	ldr	r3, [pc, #76]	; (8006fc0 <__sinit+0x68>)
 8006f74:	4a13      	ldr	r2, [pc, #76]	; (8006fc4 <__sinit+0x6c>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	62a2      	str	r2, [r4, #40]	; 0x28
 8006f7a:	42a3      	cmp	r3, r4
 8006f7c:	bf04      	itt	eq
 8006f7e:	2301      	moveq	r3, #1
 8006f80:	61a3      	streq	r3, [r4, #24]
 8006f82:	4620      	mov	r0, r4
 8006f84:	f000 f820 	bl	8006fc8 <__sfp>
 8006f88:	6060      	str	r0, [r4, #4]
 8006f8a:	4620      	mov	r0, r4
 8006f8c:	f000 f81c 	bl	8006fc8 <__sfp>
 8006f90:	60a0      	str	r0, [r4, #8]
 8006f92:	4620      	mov	r0, r4
 8006f94:	f000 f818 	bl	8006fc8 <__sfp>
 8006f98:	2200      	movs	r2, #0
 8006f9a:	60e0      	str	r0, [r4, #12]
 8006f9c:	2104      	movs	r1, #4
 8006f9e:	6860      	ldr	r0, [r4, #4]
 8006fa0:	f7ff ff82 	bl	8006ea8 <std>
 8006fa4:	68a0      	ldr	r0, [r4, #8]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	2109      	movs	r1, #9
 8006faa:	f7ff ff7d 	bl	8006ea8 <std>
 8006fae:	68e0      	ldr	r0, [r4, #12]
 8006fb0:	2202      	movs	r2, #2
 8006fb2:	2112      	movs	r1, #18
 8006fb4:	f7ff ff78 	bl	8006ea8 <std>
 8006fb8:	2301      	movs	r3, #1
 8006fba:	61a3      	str	r3, [r4, #24]
 8006fbc:	e7d2      	b.n	8006f64 <__sinit+0xc>
 8006fbe:	bf00      	nop
 8006fc0:	08009244 	.word	0x08009244
 8006fc4:	08006ef1 	.word	0x08006ef1

08006fc8 <__sfp>:
 8006fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fca:	4607      	mov	r7, r0
 8006fcc:	f7ff ffac 	bl	8006f28 <__sfp_lock_acquire>
 8006fd0:	4b1e      	ldr	r3, [pc, #120]	; (800704c <__sfp+0x84>)
 8006fd2:	681e      	ldr	r6, [r3, #0]
 8006fd4:	69b3      	ldr	r3, [r6, #24]
 8006fd6:	b913      	cbnz	r3, 8006fde <__sfp+0x16>
 8006fd8:	4630      	mov	r0, r6
 8006fda:	f7ff ffbd 	bl	8006f58 <__sinit>
 8006fde:	3648      	adds	r6, #72	; 0x48
 8006fe0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006fe4:	3b01      	subs	r3, #1
 8006fe6:	d503      	bpl.n	8006ff0 <__sfp+0x28>
 8006fe8:	6833      	ldr	r3, [r6, #0]
 8006fea:	b30b      	cbz	r3, 8007030 <__sfp+0x68>
 8006fec:	6836      	ldr	r6, [r6, #0]
 8006fee:	e7f7      	b.n	8006fe0 <__sfp+0x18>
 8006ff0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006ff4:	b9d5      	cbnz	r5, 800702c <__sfp+0x64>
 8006ff6:	4b16      	ldr	r3, [pc, #88]	; (8007050 <__sfp+0x88>)
 8006ff8:	60e3      	str	r3, [r4, #12]
 8006ffa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006ffe:	6665      	str	r5, [r4, #100]	; 0x64
 8007000:	f000 f84c 	bl	800709c <__retarget_lock_init_recursive>
 8007004:	f7ff ff96 	bl	8006f34 <__sfp_lock_release>
 8007008:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800700c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007010:	6025      	str	r5, [r4, #0]
 8007012:	61a5      	str	r5, [r4, #24]
 8007014:	2208      	movs	r2, #8
 8007016:	4629      	mov	r1, r5
 8007018:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800701c:	f7fe fa12 	bl	8005444 <memset>
 8007020:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007024:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007028:	4620      	mov	r0, r4
 800702a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800702c:	3468      	adds	r4, #104	; 0x68
 800702e:	e7d9      	b.n	8006fe4 <__sfp+0x1c>
 8007030:	2104      	movs	r1, #4
 8007032:	4638      	mov	r0, r7
 8007034:	f7ff ff62 	bl	8006efc <__sfmoreglue>
 8007038:	4604      	mov	r4, r0
 800703a:	6030      	str	r0, [r6, #0]
 800703c:	2800      	cmp	r0, #0
 800703e:	d1d5      	bne.n	8006fec <__sfp+0x24>
 8007040:	f7ff ff78 	bl	8006f34 <__sfp_lock_release>
 8007044:	230c      	movs	r3, #12
 8007046:	603b      	str	r3, [r7, #0]
 8007048:	e7ee      	b.n	8007028 <__sfp+0x60>
 800704a:	bf00      	nop
 800704c:	08009244 	.word	0x08009244
 8007050:	ffff0001 	.word	0xffff0001

08007054 <_fwalk_reent>:
 8007054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007058:	4606      	mov	r6, r0
 800705a:	4688      	mov	r8, r1
 800705c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007060:	2700      	movs	r7, #0
 8007062:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007066:	f1b9 0901 	subs.w	r9, r9, #1
 800706a:	d505      	bpl.n	8007078 <_fwalk_reent+0x24>
 800706c:	6824      	ldr	r4, [r4, #0]
 800706e:	2c00      	cmp	r4, #0
 8007070:	d1f7      	bne.n	8007062 <_fwalk_reent+0xe>
 8007072:	4638      	mov	r0, r7
 8007074:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007078:	89ab      	ldrh	r3, [r5, #12]
 800707a:	2b01      	cmp	r3, #1
 800707c:	d907      	bls.n	800708e <_fwalk_reent+0x3a>
 800707e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007082:	3301      	adds	r3, #1
 8007084:	d003      	beq.n	800708e <_fwalk_reent+0x3a>
 8007086:	4629      	mov	r1, r5
 8007088:	4630      	mov	r0, r6
 800708a:	47c0      	blx	r8
 800708c:	4307      	orrs	r7, r0
 800708e:	3568      	adds	r5, #104	; 0x68
 8007090:	e7e9      	b.n	8007066 <_fwalk_reent+0x12>
	...

08007094 <_localeconv_r>:
 8007094:	4800      	ldr	r0, [pc, #0]	; (8007098 <_localeconv_r+0x4>)
 8007096:	4770      	bx	lr
 8007098:	20000180 	.word	0x20000180

0800709c <__retarget_lock_init_recursive>:
 800709c:	4770      	bx	lr

0800709e <__retarget_lock_acquire_recursive>:
 800709e:	4770      	bx	lr

080070a0 <__retarget_lock_release_recursive>:
 80070a0:	4770      	bx	lr

080070a2 <__swhatbuf_r>:
 80070a2:	b570      	push	{r4, r5, r6, lr}
 80070a4:	460e      	mov	r6, r1
 80070a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070aa:	2900      	cmp	r1, #0
 80070ac:	b096      	sub	sp, #88	; 0x58
 80070ae:	4614      	mov	r4, r2
 80070b0:	461d      	mov	r5, r3
 80070b2:	da08      	bge.n	80070c6 <__swhatbuf_r+0x24>
 80070b4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80070b8:	2200      	movs	r2, #0
 80070ba:	602a      	str	r2, [r5, #0]
 80070bc:	061a      	lsls	r2, r3, #24
 80070be:	d410      	bmi.n	80070e2 <__swhatbuf_r+0x40>
 80070c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070c4:	e00e      	b.n	80070e4 <__swhatbuf_r+0x42>
 80070c6:	466a      	mov	r2, sp
 80070c8:	f001 f83c 	bl	8008144 <_fstat_r>
 80070cc:	2800      	cmp	r0, #0
 80070ce:	dbf1      	blt.n	80070b4 <__swhatbuf_r+0x12>
 80070d0:	9a01      	ldr	r2, [sp, #4]
 80070d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80070d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80070da:	425a      	negs	r2, r3
 80070dc:	415a      	adcs	r2, r3
 80070de:	602a      	str	r2, [r5, #0]
 80070e0:	e7ee      	b.n	80070c0 <__swhatbuf_r+0x1e>
 80070e2:	2340      	movs	r3, #64	; 0x40
 80070e4:	2000      	movs	r0, #0
 80070e6:	6023      	str	r3, [r4, #0]
 80070e8:	b016      	add	sp, #88	; 0x58
 80070ea:	bd70      	pop	{r4, r5, r6, pc}

080070ec <__smakebuf_r>:
 80070ec:	898b      	ldrh	r3, [r1, #12]
 80070ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80070f0:	079d      	lsls	r5, r3, #30
 80070f2:	4606      	mov	r6, r0
 80070f4:	460c      	mov	r4, r1
 80070f6:	d507      	bpl.n	8007108 <__smakebuf_r+0x1c>
 80070f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80070fc:	6023      	str	r3, [r4, #0]
 80070fe:	6123      	str	r3, [r4, #16]
 8007100:	2301      	movs	r3, #1
 8007102:	6163      	str	r3, [r4, #20]
 8007104:	b002      	add	sp, #8
 8007106:	bd70      	pop	{r4, r5, r6, pc}
 8007108:	ab01      	add	r3, sp, #4
 800710a:	466a      	mov	r2, sp
 800710c:	f7ff ffc9 	bl	80070a2 <__swhatbuf_r>
 8007110:	9900      	ldr	r1, [sp, #0]
 8007112:	4605      	mov	r5, r0
 8007114:	4630      	mov	r0, r6
 8007116:	f000 fc45 	bl	80079a4 <_malloc_r>
 800711a:	b948      	cbnz	r0, 8007130 <__smakebuf_r+0x44>
 800711c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007120:	059a      	lsls	r2, r3, #22
 8007122:	d4ef      	bmi.n	8007104 <__smakebuf_r+0x18>
 8007124:	f023 0303 	bic.w	r3, r3, #3
 8007128:	f043 0302 	orr.w	r3, r3, #2
 800712c:	81a3      	strh	r3, [r4, #12]
 800712e:	e7e3      	b.n	80070f8 <__smakebuf_r+0xc>
 8007130:	4b0d      	ldr	r3, [pc, #52]	; (8007168 <__smakebuf_r+0x7c>)
 8007132:	62b3      	str	r3, [r6, #40]	; 0x28
 8007134:	89a3      	ldrh	r3, [r4, #12]
 8007136:	6020      	str	r0, [r4, #0]
 8007138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800713c:	81a3      	strh	r3, [r4, #12]
 800713e:	9b00      	ldr	r3, [sp, #0]
 8007140:	6163      	str	r3, [r4, #20]
 8007142:	9b01      	ldr	r3, [sp, #4]
 8007144:	6120      	str	r0, [r4, #16]
 8007146:	b15b      	cbz	r3, 8007160 <__smakebuf_r+0x74>
 8007148:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800714c:	4630      	mov	r0, r6
 800714e:	f001 f80b 	bl	8008168 <_isatty_r>
 8007152:	b128      	cbz	r0, 8007160 <__smakebuf_r+0x74>
 8007154:	89a3      	ldrh	r3, [r4, #12]
 8007156:	f023 0303 	bic.w	r3, r3, #3
 800715a:	f043 0301 	orr.w	r3, r3, #1
 800715e:	81a3      	strh	r3, [r4, #12]
 8007160:	89a0      	ldrh	r0, [r4, #12]
 8007162:	4305      	orrs	r5, r0
 8007164:	81a5      	strh	r5, [r4, #12]
 8007166:	e7cd      	b.n	8007104 <__smakebuf_r+0x18>
 8007168:	08006ef1 	.word	0x08006ef1

0800716c <malloc>:
 800716c:	4b02      	ldr	r3, [pc, #8]	; (8007178 <malloc+0xc>)
 800716e:	4601      	mov	r1, r0
 8007170:	6818      	ldr	r0, [r3, #0]
 8007172:	f000 bc17 	b.w	80079a4 <_malloc_r>
 8007176:	bf00      	nop
 8007178:	2000002c 	.word	0x2000002c

0800717c <memcpy>:
 800717c:	440a      	add	r2, r1
 800717e:	4291      	cmp	r1, r2
 8007180:	f100 33ff 	add.w	r3, r0, #4294967295
 8007184:	d100      	bne.n	8007188 <memcpy+0xc>
 8007186:	4770      	bx	lr
 8007188:	b510      	push	{r4, lr}
 800718a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800718e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007192:	4291      	cmp	r1, r2
 8007194:	d1f9      	bne.n	800718a <memcpy+0xe>
 8007196:	bd10      	pop	{r4, pc}

08007198 <_Balloc>:
 8007198:	b570      	push	{r4, r5, r6, lr}
 800719a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800719c:	4604      	mov	r4, r0
 800719e:	460d      	mov	r5, r1
 80071a0:	b976      	cbnz	r6, 80071c0 <_Balloc+0x28>
 80071a2:	2010      	movs	r0, #16
 80071a4:	f7ff ffe2 	bl	800716c <malloc>
 80071a8:	4602      	mov	r2, r0
 80071aa:	6260      	str	r0, [r4, #36]	; 0x24
 80071ac:	b920      	cbnz	r0, 80071b8 <_Balloc+0x20>
 80071ae:	4b18      	ldr	r3, [pc, #96]	; (8007210 <_Balloc+0x78>)
 80071b0:	4818      	ldr	r0, [pc, #96]	; (8007214 <_Balloc+0x7c>)
 80071b2:	2166      	movs	r1, #102	; 0x66
 80071b4:	f000 ff86 	bl	80080c4 <__assert_func>
 80071b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071bc:	6006      	str	r6, [r0, #0]
 80071be:	60c6      	str	r6, [r0, #12]
 80071c0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80071c2:	68f3      	ldr	r3, [r6, #12]
 80071c4:	b183      	cbz	r3, 80071e8 <_Balloc+0x50>
 80071c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80071ce:	b9b8      	cbnz	r0, 8007200 <_Balloc+0x68>
 80071d0:	2101      	movs	r1, #1
 80071d2:	fa01 f605 	lsl.w	r6, r1, r5
 80071d6:	1d72      	adds	r2, r6, #5
 80071d8:	0092      	lsls	r2, r2, #2
 80071da:	4620      	mov	r0, r4
 80071dc:	f000 fb60 	bl	80078a0 <_calloc_r>
 80071e0:	b160      	cbz	r0, 80071fc <_Balloc+0x64>
 80071e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80071e6:	e00e      	b.n	8007206 <_Balloc+0x6e>
 80071e8:	2221      	movs	r2, #33	; 0x21
 80071ea:	2104      	movs	r1, #4
 80071ec:	4620      	mov	r0, r4
 80071ee:	f000 fb57 	bl	80078a0 <_calloc_r>
 80071f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80071f4:	60f0      	str	r0, [r6, #12]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d1e4      	bne.n	80071c6 <_Balloc+0x2e>
 80071fc:	2000      	movs	r0, #0
 80071fe:	bd70      	pop	{r4, r5, r6, pc}
 8007200:	6802      	ldr	r2, [r0, #0]
 8007202:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007206:	2300      	movs	r3, #0
 8007208:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800720c:	e7f7      	b.n	80071fe <_Balloc+0x66>
 800720e:	bf00      	nop
 8007210:	08009289 	.word	0x08009289
 8007214:	0800936c 	.word	0x0800936c

08007218 <_Bfree>:
 8007218:	b570      	push	{r4, r5, r6, lr}
 800721a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800721c:	4605      	mov	r5, r0
 800721e:	460c      	mov	r4, r1
 8007220:	b976      	cbnz	r6, 8007240 <_Bfree+0x28>
 8007222:	2010      	movs	r0, #16
 8007224:	f7ff ffa2 	bl	800716c <malloc>
 8007228:	4602      	mov	r2, r0
 800722a:	6268      	str	r0, [r5, #36]	; 0x24
 800722c:	b920      	cbnz	r0, 8007238 <_Bfree+0x20>
 800722e:	4b09      	ldr	r3, [pc, #36]	; (8007254 <_Bfree+0x3c>)
 8007230:	4809      	ldr	r0, [pc, #36]	; (8007258 <_Bfree+0x40>)
 8007232:	218a      	movs	r1, #138	; 0x8a
 8007234:	f000 ff46 	bl	80080c4 <__assert_func>
 8007238:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800723c:	6006      	str	r6, [r0, #0]
 800723e:	60c6      	str	r6, [r0, #12]
 8007240:	b13c      	cbz	r4, 8007252 <_Bfree+0x3a>
 8007242:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007244:	6862      	ldr	r2, [r4, #4]
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800724c:	6021      	str	r1, [r4, #0]
 800724e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007252:	bd70      	pop	{r4, r5, r6, pc}
 8007254:	08009289 	.word	0x08009289
 8007258:	0800936c 	.word	0x0800936c

0800725c <__multadd>:
 800725c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007260:	690d      	ldr	r5, [r1, #16]
 8007262:	4607      	mov	r7, r0
 8007264:	460c      	mov	r4, r1
 8007266:	461e      	mov	r6, r3
 8007268:	f101 0c14 	add.w	ip, r1, #20
 800726c:	2000      	movs	r0, #0
 800726e:	f8dc 3000 	ldr.w	r3, [ip]
 8007272:	b299      	uxth	r1, r3
 8007274:	fb02 6101 	mla	r1, r2, r1, r6
 8007278:	0c1e      	lsrs	r6, r3, #16
 800727a:	0c0b      	lsrs	r3, r1, #16
 800727c:	fb02 3306 	mla	r3, r2, r6, r3
 8007280:	b289      	uxth	r1, r1
 8007282:	3001      	adds	r0, #1
 8007284:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007288:	4285      	cmp	r5, r0
 800728a:	f84c 1b04 	str.w	r1, [ip], #4
 800728e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007292:	dcec      	bgt.n	800726e <__multadd+0x12>
 8007294:	b30e      	cbz	r6, 80072da <__multadd+0x7e>
 8007296:	68a3      	ldr	r3, [r4, #8]
 8007298:	42ab      	cmp	r3, r5
 800729a:	dc19      	bgt.n	80072d0 <__multadd+0x74>
 800729c:	6861      	ldr	r1, [r4, #4]
 800729e:	4638      	mov	r0, r7
 80072a0:	3101      	adds	r1, #1
 80072a2:	f7ff ff79 	bl	8007198 <_Balloc>
 80072a6:	4680      	mov	r8, r0
 80072a8:	b928      	cbnz	r0, 80072b6 <__multadd+0x5a>
 80072aa:	4602      	mov	r2, r0
 80072ac:	4b0c      	ldr	r3, [pc, #48]	; (80072e0 <__multadd+0x84>)
 80072ae:	480d      	ldr	r0, [pc, #52]	; (80072e4 <__multadd+0x88>)
 80072b0:	21b5      	movs	r1, #181	; 0xb5
 80072b2:	f000 ff07 	bl	80080c4 <__assert_func>
 80072b6:	6922      	ldr	r2, [r4, #16]
 80072b8:	3202      	adds	r2, #2
 80072ba:	f104 010c 	add.w	r1, r4, #12
 80072be:	0092      	lsls	r2, r2, #2
 80072c0:	300c      	adds	r0, #12
 80072c2:	f7ff ff5b 	bl	800717c <memcpy>
 80072c6:	4621      	mov	r1, r4
 80072c8:	4638      	mov	r0, r7
 80072ca:	f7ff ffa5 	bl	8007218 <_Bfree>
 80072ce:	4644      	mov	r4, r8
 80072d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80072d4:	3501      	adds	r5, #1
 80072d6:	615e      	str	r6, [r3, #20]
 80072d8:	6125      	str	r5, [r4, #16]
 80072da:	4620      	mov	r0, r4
 80072dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072e0:	080092fb 	.word	0x080092fb
 80072e4:	0800936c 	.word	0x0800936c

080072e8 <__hi0bits>:
 80072e8:	0c03      	lsrs	r3, r0, #16
 80072ea:	041b      	lsls	r3, r3, #16
 80072ec:	b9d3      	cbnz	r3, 8007324 <__hi0bits+0x3c>
 80072ee:	0400      	lsls	r0, r0, #16
 80072f0:	2310      	movs	r3, #16
 80072f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80072f6:	bf04      	itt	eq
 80072f8:	0200      	lsleq	r0, r0, #8
 80072fa:	3308      	addeq	r3, #8
 80072fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007300:	bf04      	itt	eq
 8007302:	0100      	lsleq	r0, r0, #4
 8007304:	3304      	addeq	r3, #4
 8007306:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800730a:	bf04      	itt	eq
 800730c:	0080      	lsleq	r0, r0, #2
 800730e:	3302      	addeq	r3, #2
 8007310:	2800      	cmp	r0, #0
 8007312:	db05      	blt.n	8007320 <__hi0bits+0x38>
 8007314:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007318:	f103 0301 	add.w	r3, r3, #1
 800731c:	bf08      	it	eq
 800731e:	2320      	moveq	r3, #32
 8007320:	4618      	mov	r0, r3
 8007322:	4770      	bx	lr
 8007324:	2300      	movs	r3, #0
 8007326:	e7e4      	b.n	80072f2 <__hi0bits+0xa>

08007328 <__lo0bits>:
 8007328:	6803      	ldr	r3, [r0, #0]
 800732a:	f013 0207 	ands.w	r2, r3, #7
 800732e:	4601      	mov	r1, r0
 8007330:	d00b      	beq.n	800734a <__lo0bits+0x22>
 8007332:	07da      	lsls	r2, r3, #31
 8007334:	d423      	bmi.n	800737e <__lo0bits+0x56>
 8007336:	0798      	lsls	r0, r3, #30
 8007338:	bf49      	itett	mi
 800733a:	085b      	lsrmi	r3, r3, #1
 800733c:	089b      	lsrpl	r3, r3, #2
 800733e:	2001      	movmi	r0, #1
 8007340:	600b      	strmi	r3, [r1, #0]
 8007342:	bf5c      	itt	pl
 8007344:	600b      	strpl	r3, [r1, #0]
 8007346:	2002      	movpl	r0, #2
 8007348:	4770      	bx	lr
 800734a:	b298      	uxth	r0, r3
 800734c:	b9a8      	cbnz	r0, 800737a <__lo0bits+0x52>
 800734e:	0c1b      	lsrs	r3, r3, #16
 8007350:	2010      	movs	r0, #16
 8007352:	b2da      	uxtb	r2, r3
 8007354:	b90a      	cbnz	r2, 800735a <__lo0bits+0x32>
 8007356:	3008      	adds	r0, #8
 8007358:	0a1b      	lsrs	r3, r3, #8
 800735a:	071a      	lsls	r2, r3, #28
 800735c:	bf04      	itt	eq
 800735e:	091b      	lsreq	r3, r3, #4
 8007360:	3004      	addeq	r0, #4
 8007362:	079a      	lsls	r2, r3, #30
 8007364:	bf04      	itt	eq
 8007366:	089b      	lsreq	r3, r3, #2
 8007368:	3002      	addeq	r0, #2
 800736a:	07da      	lsls	r2, r3, #31
 800736c:	d403      	bmi.n	8007376 <__lo0bits+0x4e>
 800736e:	085b      	lsrs	r3, r3, #1
 8007370:	f100 0001 	add.w	r0, r0, #1
 8007374:	d005      	beq.n	8007382 <__lo0bits+0x5a>
 8007376:	600b      	str	r3, [r1, #0]
 8007378:	4770      	bx	lr
 800737a:	4610      	mov	r0, r2
 800737c:	e7e9      	b.n	8007352 <__lo0bits+0x2a>
 800737e:	2000      	movs	r0, #0
 8007380:	4770      	bx	lr
 8007382:	2020      	movs	r0, #32
 8007384:	4770      	bx	lr
	...

08007388 <__i2b>:
 8007388:	b510      	push	{r4, lr}
 800738a:	460c      	mov	r4, r1
 800738c:	2101      	movs	r1, #1
 800738e:	f7ff ff03 	bl	8007198 <_Balloc>
 8007392:	4602      	mov	r2, r0
 8007394:	b928      	cbnz	r0, 80073a2 <__i2b+0x1a>
 8007396:	4b05      	ldr	r3, [pc, #20]	; (80073ac <__i2b+0x24>)
 8007398:	4805      	ldr	r0, [pc, #20]	; (80073b0 <__i2b+0x28>)
 800739a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800739e:	f000 fe91 	bl	80080c4 <__assert_func>
 80073a2:	2301      	movs	r3, #1
 80073a4:	6144      	str	r4, [r0, #20]
 80073a6:	6103      	str	r3, [r0, #16]
 80073a8:	bd10      	pop	{r4, pc}
 80073aa:	bf00      	nop
 80073ac:	080092fb 	.word	0x080092fb
 80073b0:	0800936c 	.word	0x0800936c

080073b4 <__multiply>:
 80073b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073b8:	4691      	mov	r9, r2
 80073ba:	690a      	ldr	r2, [r1, #16]
 80073bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	bfb8      	it	lt
 80073c4:	460b      	movlt	r3, r1
 80073c6:	460c      	mov	r4, r1
 80073c8:	bfbc      	itt	lt
 80073ca:	464c      	movlt	r4, r9
 80073cc:	4699      	movlt	r9, r3
 80073ce:	6927      	ldr	r7, [r4, #16]
 80073d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80073d4:	68a3      	ldr	r3, [r4, #8]
 80073d6:	6861      	ldr	r1, [r4, #4]
 80073d8:	eb07 060a 	add.w	r6, r7, sl
 80073dc:	42b3      	cmp	r3, r6
 80073de:	b085      	sub	sp, #20
 80073e0:	bfb8      	it	lt
 80073e2:	3101      	addlt	r1, #1
 80073e4:	f7ff fed8 	bl	8007198 <_Balloc>
 80073e8:	b930      	cbnz	r0, 80073f8 <__multiply+0x44>
 80073ea:	4602      	mov	r2, r0
 80073ec:	4b44      	ldr	r3, [pc, #272]	; (8007500 <__multiply+0x14c>)
 80073ee:	4845      	ldr	r0, [pc, #276]	; (8007504 <__multiply+0x150>)
 80073f0:	f240 115d 	movw	r1, #349	; 0x15d
 80073f4:	f000 fe66 	bl	80080c4 <__assert_func>
 80073f8:	f100 0514 	add.w	r5, r0, #20
 80073fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007400:	462b      	mov	r3, r5
 8007402:	2200      	movs	r2, #0
 8007404:	4543      	cmp	r3, r8
 8007406:	d321      	bcc.n	800744c <__multiply+0x98>
 8007408:	f104 0314 	add.w	r3, r4, #20
 800740c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007410:	f109 0314 	add.w	r3, r9, #20
 8007414:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007418:	9202      	str	r2, [sp, #8]
 800741a:	1b3a      	subs	r2, r7, r4
 800741c:	3a15      	subs	r2, #21
 800741e:	f022 0203 	bic.w	r2, r2, #3
 8007422:	3204      	adds	r2, #4
 8007424:	f104 0115 	add.w	r1, r4, #21
 8007428:	428f      	cmp	r7, r1
 800742a:	bf38      	it	cc
 800742c:	2204      	movcc	r2, #4
 800742e:	9201      	str	r2, [sp, #4]
 8007430:	9a02      	ldr	r2, [sp, #8]
 8007432:	9303      	str	r3, [sp, #12]
 8007434:	429a      	cmp	r2, r3
 8007436:	d80c      	bhi.n	8007452 <__multiply+0x9e>
 8007438:	2e00      	cmp	r6, #0
 800743a:	dd03      	ble.n	8007444 <__multiply+0x90>
 800743c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007440:	2b00      	cmp	r3, #0
 8007442:	d05a      	beq.n	80074fa <__multiply+0x146>
 8007444:	6106      	str	r6, [r0, #16]
 8007446:	b005      	add	sp, #20
 8007448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800744c:	f843 2b04 	str.w	r2, [r3], #4
 8007450:	e7d8      	b.n	8007404 <__multiply+0x50>
 8007452:	f8b3 a000 	ldrh.w	sl, [r3]
 8007456:	f1ba 0f00 	cmp.w	sl, #0
 800745a:	d024      	beq.n	80074a6 <__multiply+0xf2>
 800745c:	f104 0e14 	add.w	lr, r4, #20
 8007460:	46a9      	mov	r9, r5
 8007462:	f04f 0c00 	mov.w	ip, #0
 8007466:	f85e 2b04 	ldr.w	r2, [lr], #4
 800746a:	f8d9 1000 	ldr.w	r1, [r9]
 800746e:	fa1f fb82 	uxth.w	fp, r2
 8007472:	b289      	uxth	r1, r1
 8007474:	fb0a 110b 	mla	r1, sl, fp, r1
 8007478:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800747c:	f8d9 2000 	ldr.w	r2, [r9]
 8007480:	4461      	add	r1, ip
 8007482:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007486:	fb0a c20b 	mla	r2, sl, fp, ip
 800748a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800748e:	b289      	uxth	r1, r1
 8007490:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007494:	4577      	cmp	r7, lr
 8007496:	f849 1b04 	str.w	r1, [r9], #4
 800749a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800749e:	d8e2      	bhi.n	8007466 <__multiply+0xb2>
 80074a0:	9a01      	ldr	r2, [sp, #4]
 80074a2:	f845 c002 	str.w	ip, [r5, r2]
 80074a6:	9a03      	ldr	r2, [sp, #12]
 80074a8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80074ac:	3304      	adds	r3, #4
 80074ae:	f1b9 0f00 	cmp.w	r9, #0
 80074b2:	d020      	beq.n	80074f6 <__multiply+0x142>
 80074b4:	6829      	ldr	r1, [r5, #0]
 80074b6:	f104 0c14 	add.w	ip, r4, #20
 80074ba:	46ae      	mov	lr, r5
 80074bc:	f04f 0a00 	mov.w	sl, #0
 80074c0:	f8bc b000 	ldrh.w	fp, [ip]
 80074c4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80074c8:	fb09 220b 	mla	r2, r9, fp, r2
 80074cc:	4492      	add	sl, r2
 80074ce:	b289      	uxth	r1, r1
 80074d0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80074d4:	f84e 1b04 	str.w	r1, [lr], #4
 80074d8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80074dc:	f8be 1000 	ldrh.w	r1, [lr]
 80074e0:	0c12      	lsrs	r2, r2, #16
 80074e2:	fb09 1102 	mla	r1, r9, r2, r1
 80074e6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80074ea:	4567      	cmp	r7, ip
 80074ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80074f0:	d8e6      	bhi.n	80074c0 <__multiply+0x10c>
 80074f2:	9a01      	ldr	r2, [sp, #4]
 80074f4:	50a9      	str	r1, [r5, r2]
 80074f6:	3504      	adds	r5, #4
 80074f8:	e79a      	b.n	8007430 <__multiply+0x7c>
 80074fa:	3e01      	subs	r6, #1
 80074fc:	e79c      	b.n	8007438 <__multiply+0x84>
 80074fe:	bf00      	nop
 8007500:	080092fb 	.word	0x080092fb
 8007504:	0800936c 	.word	0x0800936c

08007508 <__pow5mult>:
 8007508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800750c:	4615      	mov	r5, r2
 800750e:	f012 0203 	ands.w	r2, r2, #3
 8007512:	4606      	mov	r6, r0
 8007514:	460f      	mov	r7, r1
 8007516:	d007      	beq.n	8007528 <__pow5mult+0x20>
 8007518:	4c25      	ldr	r4, [pc, #148]	; (80075b0 <__pow5mult+0xa8>)
 800751a:	3a01      	subs	r2, #1
 800751c:	2300      	movs	r3, #0
 800751e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007522:	f7ff fe9b 	bl	800725c <__multadd>
 8007526:	4607      	mov	r7, r0
 8007528:	10ad      	asrs	r5, r5, #2
 800752a:	d03d      	beq.n	80075a8 <__pow5mult+0xa0>
 800752c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800752e:	b97c      	cbnz	r4, 8007550 <__pow5mult+0x48>
 8007530:	2010      	movs	r0, #16
 8007532:	f7ff fe1b 	bl	800716c <malloc>
 8007536:	4602      	mov	r2, r0
 8007538:	6270      	str	r0, [r6, #36]	; 0x24
 800753a:	b928      	cbnz	r0, 8007548 <__pow5mult+0x40>
 800753c:	4b1d      	ldr	r3, [pc, #116]	; (80075b4 <__pow5mult+0xac>)
 800753e:	481e      	ldr	r0, [pc, #120]	; (80075b8 <__pow5mult+0xb0>)
 8007540:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007544:	f000 fdbe 	bl	80080c4 <__assert_func>
 8007548:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800754c:	6004      	str	r4, [r0, #0]
 800754e:	60c4      	str	r4, [r0, #12]
 8007550:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007554:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007558:	b94c      	cbnz	r4, 800756e <__pow5mult+0x66>
 800755a:	f240 2171 	movw	r1, #625	; 0x271
 800755e:	4630      	mov	r0, r6
 8007560:	f7ff ff12 	bl	8007388 <__i2b>
 8007564:	2300      	movs	r3, #0
 8007566:	f8c8 0008 	str.w	r0, [r8, #8]
 800756a:	4604      	mov	r4, r0
 800756c:	6003      	str	r3, [r0, #0]
 800756e:	f04f 0900 	mov.w	r9, #0
 8007572:	07eb      	lsls	r3, r5, #31
 8007574:	d50a      	bpl.n	800758c <__pow5mult+0x84>
 8007576:	4639      	mov	r1, r7
 8007578:	4622      	mov	r2, r4
 800757a:	4630      	mov	r0, r6
 800757c:	f7ff ff1a 	bl	80073b4 <__multiply>
 8007580:	4639      	mov	r1, r7
 8007582:	4680      	mov	r8, r0
 8007584:	4630      	mov	r0, r6
 8007586:	f7ff fe47 	bl	8007218 <_Bfree>
 800758a:	4647      	mov	r7, r8
 800758c:	106d      	asrs	r5, r5, #1
 800758e:	d00b      	beq.n	80075a8 <__pow5mult+0xa0>
 8007590:	6820      	ldr	r0, [r4, #0]
 8007592:	b938      	cbnz	r0, 80075a4 <__pow5mult+0x9c>
 8007594:	4622      	mov	r2, r4
 8007596:	4621      	mov	r1, r4
 8007598:	4630      	mov	r0, r6
 800759a:	f7ff ff0b 	bl	80073b4 <__multiply>
 800759e:	6020      	str	r0, [r4, #0]
 80075a0:	f8c0 9000 	str.w	r9, [r0]
 80075a4:	4604      	mov	r4, r0
 80075a6:	e7e4      	b.n	8007572 <__pow5mult+0x6a>
 80075a8:	4638      	mov	r0, r7
 80075aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075ae:	bf00      	nop
 80075b0:	080094b8 	.word	0x080094b8
 80075b4:	08009289 	.word	0x08009289
 80075b8:	0800936c 	.word	0x0800936c

080075bc <__lshift>:
 80075bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075c0:	460c      	mov	r4, r1
 80075c2:	6849      	ldr	r1, [r1, #4]
 80075c4:	6923      	ldr	r3, [r4, #16]
 80075c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80075ca:	68a3      	ldr	r3, [r4, #8]
 80075cc:	4607      	mov	r7, r0
 80075ce:	4691      	mov	r9, r2
 80075d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80075d4:	f108 0601 	add.w	r6, r8, #1
 80075d8:	42b3      	cmp	r3, r6
 80075da:	db0b      	blt.n	80075f4 <__lshift+0x38>
 80075dc:	4638      	mov	r0, r7
 80075de:	f7ff fddb 	bl	8007198 <_Balloc>
 80075e2:	4605      	mov	r5, r0
 80075e4:	b948      	cbnz	r0, 80075fa <__lshift+0x3e>
 80075e6:	4602      	mov	r2, r0
 80075e8:	4b2a      	ldr	r3, [pc, #168]	; (8007694 <__lshift+0xd8>)
 80075ea:	482b      	ldr	r0, [pc, #172]	; (8007698 <__lshift+0xdc>)
 80075ec:	f240 11d9 	movw	r1, #473	; 0x1d9
 80075f0:	f000 fd68 	bl	80080c4 <__assert_func>
 80075f4:	3101      	adds	r1, #1
 80075f6:	005b      	lsls	r3, r3, #1
 80075f8:	e7ee      	b.n	80075d8 <__lshift+0x1c>
 80075fa:	2300      	movs	r3, #0
 80075fc:	f100 0114 	add.w	r1, r0, #20
 8007600:	f100 0210 	add.w	r2, r0, #16
 8007604:	4618      	mov	r0, r3
 8007606:	4553      	cmp	r3, sl
 8007608:	db37      	blt.n	800767a <__lshift+0xbe>
 800760a:	6920      	ldr	r0, [r4, #16]
 800760c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007610:	f104 0314 	add.w	r3, r4, #20
 8007614:	f019 091f 	ands.w	r9, r9, #31
 8007618:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800761c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007620:	d02f      	beq.n	8007682 <__lshift+0xc6>
 8007622:	f1c9 0e20 	rsb	lr, r9, #32
 8007626:	468a      	mov	sl, r1
 8007628:	f04f 0c00 	mov.w	ip, #0
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	fa02 f209 	lsl.w	r2, r2, r9
 8007632:	ea42 020c 	orr.w	r2, r2, ip
 8007636:	f84a 2b04 	str.w	r2, [sl], #4
 800763a:	f853 2b04 	ldr.w	r2, [r3], #4
 800763e:	4298      	cmp	r0, r3
 8007640:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007644:	d8f2      	bhi.n	800762c <__lshift+0x70>
 8007646:	1b03      	subs	r3, r0, r4
 8007648:	3b15      	subs	r3, #21
 800764a:	f023 0303 	bic.w	r3, r3, #3
 800764e:	3304      	adds	r3, #4
 8007650:	f104 0215 	add.w	r2, r4, #21
 8007654:	4290      	cmp	r0, r2
 8007656:	bf38      	it	cc
 8007658:	2304      	movcc	r3, #4
 800765a:	f841 c003 	str.w	ip, [r1, r3]
 800765e:	f1bc 0f00 	cmp.w	ip, #0
 8007662:	d001      	beq.n	8007668 <__lshift+0xac>
 8007664:	f108 0602 	add.w	r6, r8, #2
 8007668:	3e01      	subs	r6, #1
 800766a:	4638      	mov	r0, r7
 800766c:	612e      	str	r6, [r5, #16]
 800766e:	4621      	mov	r1, r4
 8007670:	f7ff fdd2 	bl	8007218 <_Bfree>
 8007674:	4628      	mov	r0, r5
 8007676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800767a:	f842 0f04 	str.w	r0, [r2, #4]!
 800767e:	3301      	adds	r3, #1
 8007680:	e7c1      	b.n	8007606 <__lshift+0x4a>
 8007682:	3904      	subs	r1, #4
 8007684:	f853 2b04 	ldr.w	r2, [r3], #4
 8007688:	f841 2f04 	str.w	r2, [r1, #4]!
 800768c:	4298      	cmp	r0, r3
 800768e:	d8f9      	bhi.n	8007684 <__lshift+0xc8>
 8007690:	e7ea      	b.n	8007668 <__lshift+0xac>
 8007692:	bf00      	nop
 8007694:	080092fb 	.word	0x080092fb
 8007698:	0800936c 	.word	0x0800936c

0800769c <__mcmp>:
 800769c:	b530      	push	{r4, r5, lr}
 800769e:	6902      	ldr	r2, [r0, #16]
 80076a0:	690c      	ldr	r4, [r1, #16]
 80076a2:	1b12      	subs	r2, r2, r4
 80076a4:	d10e      	bne.n	80076c4 <__mcmp+0x28>
 80076a6:	f100 0314 	add.w	r3, r0, #20
 80076aa:	3114      	adds	r1, #20
 80076ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80076b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80076b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80076b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80076bc:	42a5      	cmp	r5, r4
 80076be:	d003      	beq.n	80076c8 <__mcmp+0x2c>
 80076c0:	d305      	bcc.n	80076ce <__mcmp+0x32>
 80076c2:	2201      	movs	r2, #1
 80076c4:	4610      	mov	r0, r2
 80076c6:	bd30      	pop	{r4, r5, pc}
 80076c8:	4283      	cmp	r3, r0
 80076ca:	d3f3      	bcc.n	80076b4 <__mcmp+0x18>
 80076cc:	e7fa      	b.n	80076c4 <__mcmp+0x28>
 80076ce:	f04f 32ff 	mov.w	r2, #4294967295
 80076d2:	e7f7      	b.n	80076c4 <__mcmp+0x28>

080076d4 <__mdiff>:
 80076d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076d8:	460c      	mov	r4, r1
 80076da:	4606      	mov	r6, r0
 80076dc:	4611      	mov	r1, r2
 80076de:	4620      	mov	r0, r4
 80076e0:	4690      	mov	r8, r2
 80076e2:	f7ff ffdb 	bl	800769c <__mcmp>
 80076e6:	1e05      	subs	r5, r0, #0
 80076e8:	d110      	bne.n	800770c <__mdiff+0x38>
 80076ea:	4629      	mov	r1, r5
 80076ec:	4630      	mov	r0, r6
 80076ee:	f7ff fd53 	bl	8007198 <_Balloc>
 80076f2:	b930      	cbnz	r0, 8007702 <__mdiff+0x2e>
 80076f4:	4b3a      	ldr	r3, [pc, #232]	; (80077e0 <__mdiff+0x10c>)
 80076f6:	4602      	mov	r2, r0
 80076f8:	f240 2132 	movw	r1, #562	; 0x232
 80076fc:	4839      	ldr	r0, [pc, #228]	; (80077e4 <__mdiff+0x110>)
 80076fe:	f000 fce1 	bl	80080c4 <__assert_func>
 8007702:	2301      	movs	r3, #1
 8007704:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007708:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800770c:	bfa4      	itt	ge
 800770e:	4643      	movge	r3, r8
 8007710:	46a0      	movge	r8, r4
 8007712:	4630      	mov	r0, r6
 8007714:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007718:	bfa6      	itte	ge
 800771a:	461c      	movge	r4, r3
 800771c:	2500      	movge	r5, #0
 800771e:	2501      	movlt	r5, #1
 8007720:	f7ff fd3a 	bl	8007198 <_Balloc>
 8007724:	b920      	cbnz	r0, 8007730 <__mdiff+0x5c>
 8007726:	4b2e      	ldr	r3, [pc, #184]	; (80077e0 <__mdiff+0x10c>)
 8007728:	4602      	mov	r2, r0
 800772a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800772e:	e7e5      	b.n	80076fc <__mdiff+0x28>
 8007730:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007734:	6926      	ldr	r6, [r4, #16]
 8007736:	60c5      	str	r5, [r0, #12]
 8007738:	f104 0914 	add.w	r9, r4, #20
 800773c:	f108 0514 	add.w	r5, r8, #20
 8007740:	f100 0e14 	add.w	lr, r0, #20
 8007744:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007748:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800774c:	f108 0210 	add.w	r2, r8, #16
 8007750:	46f2      	mov	sl, lr
 8007752:	2100      	movs	r1, #0
 8007754:	f859 3b04 	ldr.w	r3, [r9], #4
 8007758:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800775c:	fa1f f883 	uxth.w	r8, r3
 8007760:	fa11 f18b 	uxtah	r1, r1, fp
 8007764:	0c1b      	lsrs	r3, r3, #16
 8007766:	eba1 0808 	sub.w	r8, r1, r8
 800776a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800776e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007772:	fa1f f888 	uxth.w	r8, r8
 8007776:	1419      	asrs	r1, r3, #16
 8007778:	454e      	cmp	r6, r9
 800777a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800777e:	f84a 3b04 	str.w	r3, [sl], #4
 8007782:	d8e7      	bhi.n	8007754 <__mdiff+0x80>
 8007784:	1b33      	subs	r3, r6, r4
 8007786:	3b15      	subs	r3, #21
 8007788:	f023 0303 	bic.w	r3, r3, #3
 800778c:	3304      	adds	r3, #4
 800778e:	3415      	adds	r4, #21
 8007790:	42a6      	cmp	r6, r4
 8007792:	bf38      	it	cc
 8007794:	2304      	movcc	r3, #4
 8007796:	441d      	add	r5, r3
 8007798:	4473      	add	r3, lr
 800779a:	469e      	mov	lr, r3
 800779c:	462e      	mov	r6, r5
 800779e:	4566      	cmp	r6, ip
 80077a0:	d30e      	bcc.n	80077c0 <__mdiff+0xec>
 80077a2:	f10c 0203 	add.w	r2, ip, #3
 80077a6:	1b52      	subs	r2, r2, r5
 80077a8:	f022 0203 	bic.w	r2, r2, #3
 80077ac:	3d03      	subs	r5, #3
 80077ae:	45ac      	cmp	ip, r5
 80077b0:	bf38      	it	cc
 80077b2:	2200      	movcc	r2, #0
 80077b4:	441a      	add	r2, r3
 80077b6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80077ba:	b17b      	cbz	r3, 80077dc <__mdiff+0x108>
 80077bc:	6107      	str	r7, [r0, #16]
 80077be:	e7a3      	b.n	8007708 <__mdiff+0x34>
 80077c0:	f856 8b04 	ldr.w	r8, [r6], #4
 80077c4:	fa11 f288 	uxtah	r2, r1, r8
 80077c8:	1414      	asrs	r4, r2, #16
 80077ca:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80077ce:	b292      	uxth	r2, r2
 80077d0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80077d4:	f84e 2b04 	str.w	r2, [lr], #4
 80077d8:	1421      	asrs	r1, r4, #16
 80077da:	e7e0      	b.n	800779e <__mdiff+0xca>
 80077dc:	3f01      	subs	r7, #1
 80077de:	e7ea      	b.n	80077b6 <__mdiff+0xe2>
 80077e0:	080092fb 	.word	0x080092fb
 80077e4:	0800936c 	.word	0x0800936c

080077e8 <__d2b>:
 80077e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80077ec:	4689      	mov	r9, r1
 80077ee:	2101      	movs	r1, #1
 80077f0:	ec57 6b10 	vmov	r6, r7, d0
 80077f4:	4690      	mov	r8, r2
 80077f6:	f7ff fccf 	bl	8007198 <_Balloc>
 80077fa:	4604      	mov	r4, r0
 80077fc:	b930      	cbnz	r0, 800780c <__d2b+0x24>
 80077fe:	4602      	mov	r2, r0
 8007800:	4b25      	ldr	r3, [pc, #148]	; (8007898 <__d2b+0xb0>)
 8007802:	4826      	ldr	r0, [pc, #152]	; (800789c <__d2b+0xb4>)
 8007804:	f240 310a 	movw	r1, #778	; 0x30a
 8007808:	f000 fc5c 	bl	80080c4 <__assert_func>
 800780c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007810:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007814:	bb35      	cbnz	r5, 8007864 <__d2b+0x7c>
 8007816:	2e00      	cmp	r6, #0
 8007818:	9301      	str	r3, [sp, #4]
 800781a:	d028      	beq.n	800786e <__d2b+0x86>
 800781c:	4668      	mov	r0, sp
 800781e:	9600      	str	r6, [sp, #0]
 8007820:	f7ff fd82 	bl	8007328 <__lo0bits>
 8007824:	9900      	ldr	r1, [sp, #0]
 8007826:	b300      	cbz	r0, 800786a <__d2b+0x82>
 8007828:	9a01      	ldr	r2, [sp, #4]
 800782a:	f1c0 0320 	rsb	r3, r0, #32
 800782e:	fa02 f303 	lsl.w	r3, r2, r3
 8007832:	430b      	orrs	r3, r1
 8007834:	40c2      	lsrs	r2, r0
 8007836:	6163      	str	r3, [r4, #20]
 8007838:	9201      	str	r2, [sp, #4]
 800783a:	9b01      	ldr	r3, [sp, #4]
 800783c:	61a3      	str	r3, [r4, #24]
 800783e:	2b00      	cmp	r3, #0
 8007840:	bf14      	ite	ne
 8007842:	2202      	movne	r2, #2
 8007844:	2201      	moveq	r2, #1
 8007846:	6122      	str	r2, [r4, #16]
 8007848:	b1d5      	cbz	r5, 8007880 <__d2b+0x98>
 800784a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800784e:	4405      	add	r5, r0
 8007850:	f8c9 5000 	str.w	r5, [r9]
 8007854:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007858:	f8c8 0000 	str.w	r0, [r8]
 800785c:	4620      	mov	r0, r4
 800785e:	b003      	add	sp, #12
 8007860:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007864:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007868:	e7d5      	b.n	8007816 <__d2b+0x2e>
 800786a:	6161      	str	r1, [r4, #20]
 800786c:	e7e5      	b.n	800783a <__d2b+0x52>
 800786e:	a801      	add	r0, sp, #4
 8007870:	f7ff fd5a 	bl	8007328 <__lo0bits>
 8007874:	9b01      	ldr	r3, [sp, #4]
 8007876:	6163      	str	r3, [r4, #20]
 8007878:	2201      	movs	r2, #1
 800787a:	6122      	str	r2, [r4, #16]
 800787c:	3020      	adds	r0, #32
 800787e:	e7e3      	b.n	8007848 <__d2b+0x60>
 8007880:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007884:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007888:	f8c9 0000 	str.w	r0, [r9]
 800788c:	6918      	ldr	r0, [r3, #16]
 800788e:	f7ff fd2b 	bl	80072e8 <__hi0bits>
 8007892:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007896:	e7df      	b.n	8007858 <__d2b+0x70>
 8007898:	080092fb 	.word	0x080092fb
 800789c:	0800936c 	.word	0x0800936c

080078a0 <_calloc_r>:
 80078a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80078a2:	fba1 2402 	umull	r2, r4, r1, r2
 80078a6:	b94c      	cbnz	r4, 80078bc <_calloc_r+0x1c>
 80078a8:	4611      	mov	r1, r2
 80078aa:	9201      	str	r2, [sp, #4]
 80078ac:	f000 f87a 	bl	80079a4 <_malloc_r>
 80078b0:	9a01      	ldr	r2, [sp, #4]
 80078b2:	4605      	mov	r5, r0
 80078b4:	b930      	cbnz	r0, 80078c4 <_calloc_r+0x24>
 80078b6:	4628      	mov	r0, r5
 80078b8:	b003      	add	sp, #12
 80078ba:	bd30      	pop	{r4, r5, pc}
 80078bc:	220c      	movs	r2, #12
 80078be:	6002      	str	r2, [r0, #0]
 80078c0:	2500      	movs	r5, #0
 80078c2:	e7f8      	b.n	80078b6 <_calloc_r+0x16>
 80078c4:	4621      	mov	r1, r4
 80078c6:	f7fd fdbd 	bl	8005444 <memset>
 80078ca:	e7f4      	b.n	80078b6 <_calloc_r+0x16>

080078cc <_free_r>:
 80078cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80078ce:	2900      	cmp	r1, #0
 80078d0:	d044      	beq.n	800795c <_free_r+0x90>
 80078d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078d6:	9001      	str	r0, [sp, #4]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	f1a1 0404 	sub.w	r4, r1, #4
 80078de:	bfb8      	it	lt
 80078e0:	18e4      	addlt	r4, r4, r3
 80078e2:	f000 fc8f 	bl	8008204 <__malloc_lock>
 80078e6:	4a1e      	ldr	r2, [pc, #120]	; (8007960 <_free_r+0x94>)
 80078e8:	9801      	ldr	r0, [sp, #4]
 80078ea:	6813      	ldr	r3, [r2, #0]
 80078ec:	b933      	cbnz	r3, 80078fc <_free_r+0x30>
 80078ee:	6063      	str	r3, [r4, #4]
 80078f0:	6014      	str	r4, [r2, #0]
 80078f2:	b003      	add	sp, #12
 80078f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80078f8:	f000 bc8a 	b.w	8008210 <__malloc_unlock>
 80078fc:	42a3      	cmp	r3, r4
 80078fe:	d908      	bls.n	8007912 <_free_r+0x46>
 8007900:	6825      	ldr	r5, [r4, #0]
 8007902:	1961      	adds	r1, r4, r5
 8007904:	428b      	cmp	r3, r1
 8007906:	bf01      	itttt	eq
 8007908:	6819      	ldreq	r1, [r3, #0]
 800790a:	685b      	ldreq	r3, [r3, #4]
 800790c:	1949      	addeq	r1, r1, r5
 800790e:	6021      	streq	r1, [r4, #0]
 8007910:	e7ed      	b.n	80078ee <_free_r+0x22>
 8007912:	461a      	mov	r2, r3
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	b10b      	cbz	r3, 800791c <_free_r+0x50>
 8007918:	42a3      	cmp	r3, r4
 800791a:	d9fa      	bls.n	8007912 <_free_r+0x46>
 800791c:	6811      	ldr	r1, [r2, #0]
 800791e:	1855      	adds	r5, r2, r1
 8007920:	42a5      	cmp	r5, r4
 8007922:	d10b      	bne.n	800793c <_free_r+0x70>
 8007924:	6824      	ldr	r4, [r4, #0]
 8007926:	4421      	add	r1, r4
 8007928:	1854      	adds	r4, r2, r1
 800792a:	42a3      	cmp	r3, r4
 800792c:	6011      	str	r1, [r2, #0]
 800792e:	d1e0      	bne.n	80078f2 <_free_r+0x26>
 8007930:	681c      	ldr	r4, [r3, #0]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	6053      	str	r3, [r2, #4]
 8007936:	4421      	add	r1, r4
 8007938:	6011      	str	r1, [r2, #0]
 800793a:	e7da      	b.n	80078f2 <_free_r+0x26>
 800793c:	d902      	bls.n	8007944 <_free_r+0x78>
 800793e:	230c      	movs	r3, #12
 8007940:	6003      	str	r3, [r0, #0]
 8007942:	e7d6      	b.n	80078f2 <_free_r+0x26>
 8007944:	6825      	ldr	r5, [r4, #0]
 8007946:	1961      	adds	r1, r4, r5
 8007948:	428b      	cmp	r3, r1
 800794a:	bf04      	itt	eq
 800794c:	6819      	ldreq	r1, [r3, #0]
 800794e:	685b      	ldreq	r3, [r3, #4]
 8007950:	6063      	str	r3, [r4, #4]
 8007952:	bf04      	itt	eq
 8007954:	1949      	addeq	r1, r1, r5
 8007956:	6021      	streq	r1, [r4, #0]
 8007958:	6054      	str	r4, [r2, #4]
 800795a:	e7ca      	b.n	80078f2 <_free_r+0x26>
 800795c:	b003      	add	sp, #12
 800795e:	bd30      	pop	{r4, r5, pc}
 8007960:	20000820 	.word	0x20000820

08007964 <sbrk_aligned>:
 8007964:	b570      	push	{r4, r5, r6, lr}
 8007966:	4e0e      	ldr	r6, [pc, #56]	; (80079a0 <sbrk_aligned+0x3c>)
 8007968:	460c      	mov	r4, r1
 800796a:	6831      	ldr	r1, [r6, #0]
 800796c:	4605      	mov	r5, r0
 800796e:	b911      	cbnz	r1, 8007976 <sbrk_aligned+0x12>
 8007970:	f000 fb42 	bl	8007ff8 <_sbrk_r>
 8007974:	6030      	str	r0, [r6, #0]
 8007976:	4621      	mov	r1, r4
 8007978:	4628      	mov	r0, r5
 800797a:	f000 fb3d 	bl	8007ff8 <_sbrk_r>
 800797e:	1c43      	adds	r3, r0, #1
 8007980:	d00a      	beq.n	8007998 <sbrk_aligned+0x34>
 8007982:	1cc4      	adds	r4, r0, #3
 8007984:	f024 0403 	bic.w	r4, r4, #3
 8007988:	42a0      	cmp	r0, r4
 800798a:	d007      	beq.n	800799c <sbrk_aligned+0x38>
 800798c:	1a21      	subs	r1, r4, r0
 800798e:	4628      	mov	r0, r5
 8007990:	f000 fb32 	bl	8007ff8 <_sbrk_r>
 8007994:	3001      	adds	r0, #1
 8007996:	d101      	bne.n	800799c <sbrk_aligned+0x38>
 8007998:	f04f 34ff 	mov.w	r4, #4294967295
 800799c:	4620      	mov	r0, r4
 800799e:	bd70      	pop	{r4, r5, r6, pc}
 80079a0:	20000824 	.word	0x20000824

080079a4 <_malloc_r>:
 80079a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079a8:	1ccd      	adds	r5, r1, #3
 80079aa:	f025 0503 	bic.w	r5, r5, #3
 80079ae:	3508      	adds	r5, #8
 80079b0:	2d0c      	cmp	r5, #12
 80079b2:	bf38      	it	cc
 80079b4:	250c      	movcc	r5, #12
 80079b6:	2d00      	cmp	r5, #0
 80079b8:	4607      	mov	r7, r0
 80079ba:	db01      	blt.n	80079c0 <_malloc_r+0x1c>
 80079bc:	42a9      	cmp	r1, r5
 80079be:	d905      	bls.n	80079cc <_malloc_r+0x28>
 80079c0:	230c      	movs	r3, #12
 80079c2:	603b      	str	r3, [r7, #0]
 80079c4:	2600      	movs	r6, #0
 80079c6:	4630      	mov	r0, r6
 80079c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079cc:	4e2e      	ldr	r6, [pc, #184]	; (8007a88 <_malloc_r+0xe4>)
 80079ce:	f000 fc19 	bl	8008204 <__malloc_lock>
 80079d2:	6833      	ldr	r3, [r6, #0]
 80079d4:	461c      	mov	r4, r3
 80079d6:	bb34      	cbnz	r4, 8007a26 <_malloc_r+0x82>
 80079d8:	4629      	mov	r1, r5
 80079da:	4638      	mov	r0, r7
 80079dc:	f7ff ffc2 	bl	8007964 <sbrk_aligned>
 80079e0:	1c43      	adds	r3, r0, #1
 80079e2:	4604      	mov	r4, r0
 80079e4:	d14d      	bne.n	8007a82 <_malloc_r+0xde>
 80079e6:	6834      	ldr	r4, [r6, #0]
 80079e8:	4626      	mov	r6, r4
 80079ea:	2e00      	cmp	r6, #0
 80079ec:	d140      	bne.n	8007a70 <_malloc_r+0xcc>
 80079ee:	6823      	ldr	r3, [r4, #0]
 80079f0:	4631      	mov	r1, r6
 80079f2:	4638      	mov	r0, r7
 80079f4:	eb04 0803 	add.w	r8, r4, r3
 80079f8:	f000 fafe 	bl	8007ff8 <_sbrk_r>
 80079fc:	4580      	cmp	r8, r0
 80079fe:	d13a      	bne.n	8007a76 <_malloc_r+0xd2>
 8007a00:	6821      	ldr	r1, [r4, #0]
 8007a02:	3503      	adds	r5, #3
 8007a04:	1a6d      	subs	r5, r5, r1
 8007a06:	f025 0503 	bic.w	r5, r5, #3
 8007a0a:	3508      	adds	r5, #8
 8007a0c:	2d0c      	cmp	r5, #12
 8007a0e:	bf38      	it	cc
 8007a10:	250c      	movcc	r5, #12
 8007a12:	4629      	mov	r1, r5
 8007a14:	4638      	mov	r0, r7
 8007a16:	f7ff ffa5 	bl	8007964 <sbrk_aligned>
 8007a1a:	3001      	adds	r0, #1
 8007a1c:	d02b      	beq.n	8007a76 <_malloc_r+0xd2>
 8007a1e:	6823      	ldr	r3, [r4, #0]
 8007a20:	442b      	add	r3, r5
 8007a22:	6023      	str	r3, [r4, #0]
 8007a24:	e00e      	b.n	8007a44 <_malloc_r+0xa0>
 8007a26:	6822      	ldr	r2, [r4, #0]
 8007a28:	1b52      	subs	r2, r2, r5
 8007a2a:	d41e      	bmi.n	8007a6a <_malloc_r+0xc6>
 8007a2c:	2a0b      	cmp	r2, #11
 8007a2e:	d916      	bls.n	8007a5e <_malloc_r+0xba>
 8007a30:	1961      	adds	r1, r4, r5
 8007a32:	42a3      	cmp	r3, r4
 8007a34:	6025      	str	r5, [r4, #0]
 8007a36:	bf18      	it	ne
 8007a38:	6059      	strne	r1, [r3, #4]
 8007a3a:	6863      	ldr	r3, [r4, #4]
 8007a3c:	bf08      	it	eq
 8007a3e:	6031      	streq	r1, [r6, #0]
 8007a40:	5162      	str	r2, [r4, r5]
 8007a42:	604b      	str	r3, [r1, #4]
 8007a44:	4638      	mov	r0, r7
 8007a46:	f104 060b 	add.w	r6, r4, #11
 8007a4a:	f000 fbe1 	bl	8008210 <__malloc_unlock>
 8007a4e:	f026 0607 	bic.w	r6, r6, #7
 8007a52:	1d23      	adds	r3, r4, #4
 8007a54:	1af2      	subs	r2, r6, r3
 8007a56:	d0b6      	beq.n	80079c6 <_malloc_r+0x22>
 8007a58:	1b9b      	subs	r3, r3, r6
 8007a5a:	50a3      	str	r3, [r4, r2]
 8007a5c:	e7b3      	b.n	80079c6 <_malloc_r+0x22>
 8007a5e:	6862      	ldr	r2, [r4, #4]
 8007a60:	42a3      	cmp	r3, r4
 8007a62:	bf0c      	ite	eq
 8007a64:	6032      	streq	r2, [r6, #0]
 8007a66:	605a      	strne	r2, [r3, #4]
 8007a68:	e7ec      	b.n	8007a44 <_malloc_r+0xa0>
 8007a6a:	4623      	mov	r3, r4
 8007a6c:	6864      	ldr	r4, [r4, #4]
 8007a6e:	e7b2      	b.n	80079d6 <_malloc_r+0x32>
 8007a70:	4634      	mov	r4, r6
 8007a72:	6876      	ldr	r6, [r6, #4]
 8007a74:	e7b9      	b.n	80079ea <_malloc_r+0x46>
 8007a76:	230c      	movs	r3, #12
 8007a78:	603b      	str	r3, [r7, #0]
 8007a7a:	4638      	mov	r0, r7
 8007a7c:	f000 fbc8 	bl	8008210 <__malloc_unlock>
 8007a80:	e7a1      	b.n	80079c6 <_malloc_r+0x22>
 8007a82:	6025      	str	r5, [r4, #0]
 8007a84:	e7de      	b.n	8007a44 <_malloc_r+0xa0>
 8007a86:	bf00      	nop
 8007a88:	20000820 	.word	0x20000820

08007a8c <__ssputs_r>:
 8007a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a90:	688e      	ldr	r6, [r1, #8]
 8007a92:	429e      	cmp	r6, r3
 8007a94:	4682      	mov	sl, r0
 8007a96:	460c      	mov	r4, r1
 8007a98:	4690      	mov	r8, r2
 8007a9a:	461f      	mov	r7, r3
 8007a9c:	d838      	bhi.n	8007b10 <__ssputs_r+0x84>
 8007a9e:	898a      	ldrh	r2, [r1, #12]
 8007aa0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007aa4:	d032      	beq.n	8007b0c <__ssputs_r+0x80>
 8007aa6:	6825      	ldr	r5, [r4, #0]
 8007aa8:	6909      	ldr	r1, [r1, #16]
 8007aaa:	eba5 0901 	sub.w	r9, r5, r1
 8007aae:	6965      	ldr	r5, [r4, #20]
 8007ab0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ab4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ab8:	3301      	adds	r3, #1
 8007aba:	444b      	add	r3, r9
 8007abc:	106d      	asrs	r5, r5, #1
 8007abe:	429d      	cmp	r5, r3
 8007ac0:	bf38      	it	cc
 8007ac2:	461d      	movcc	r5, r3
 8007ac4:	0553      	lsls	r3, r2, #21
 8007ac6:	d531      	bpl.n	8007b2c <__ssputs_r+0xa0>
 8007ac8:	4629      	mov	r1, r5
 8007aca:	f7ff ff6b 	bl	80079a4 <_malloc_r>
 8007ace:	4606      	mov	r6, r0
 8007ad0:	b950      	cbnz	r0, 8007ae8 <__ssputs_r+0x5c>
 8007ad2:	230c      	movs	r3, #12
 8007ad4:	f8ca 3000 	str.w	r3, [sl]
 8007ad8:	89a3      	ldrh	r3, [r4, #12]
 8007ada:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ade:	81a3      	strh	r3, [r4, #12]
 8007ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ae8:	6921      	ldr	r1, [r4, #16]
 8007aea:	464a      	mov	r2, r9
 8007aec:	f7ff fb46 	bl	800717c <memcpy>
 8007af0:	89a3      	ldrh	r3, [r4, #12]
 8007af2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007afa:	81a3      	strh	r3, [r4, #12]
 8007afc:	6126      	str	r6, [r4, #16]
 8007afe:	6165      	str	r5, [r4, #20]
 8007b00:	444e      	add	r6, r9
 8007b02:	eba5 0509 	sub.w	r5, r5, r9
 8007b06:	6026      	str	r6, [r4, #0]
 8007b08:	60a5      	str	r5, [r4, #8]
 8007b0a:	463e      	mov	r6, r7
 8007b0c:	42be      	cmp	r6, r7
 8007b0e:	d900      	bls.n	8007b12 <__ssputs_r+0x86>
 8007b10:	463e      	mov	r6, r7
 8007b12:	6820      	ldr	r0, [r4, #0]
 8007b14:	4632      	mov	r2, r6
 8007b16:	4641      	mov	r1, r8
 8007b18:	f000 fb5a 	bl	80081d0 <memmove>
 8007b1c:	68a3      	ldr	r3, [r4, #8]
 8007b1e:	1b9b      	subs	r3, r3, r6
 8007b20:	60a3      	str	r3, [r4, #8]
 8007b22:	6823      	ldr	r3, [r4, #0]
 8007b24:	4433      	add	r3, r6
 8007b26:	6023      	str	r3, [r4, #0]
 8007b28:	2000      	movs	r0, #0
 8007b2a:	e7db      	b.n	8007ae4 <__ssputs_r+0x58>
 8007b2c:	462a      	mov	r2, r5
 8007b2e:	f000 fb75 	bl	800821c <_realloc_r>
 8007b32:	4606      	mov	r6, r0
 8007b34:	2800      	cmp	r0, #0
 8007b36:	d1e1      	bne.n	8007afc <__ssputs_r+0x70>
 8007b38:	6921      	ldr	r1, [r4, #16]
 8007b3a:	4650      	mov	r0, sl
 8007b3c:	f7ff fec6 	bl	80078cc <_free_r>
 8007b40:	e7c7      	b.n	8007ad2 <__ssputs_r+0x46>
	...

08007b44 <_svfiprintf_r>:
 8007b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b48:	4698      	mov	r8, r3
 8007b4a:	898b      	ldrh	r3, [r1, #12]
 8007b4c:	061b      	lsls	r3, r3, #24
 8007b4e:	b09d      	sub	sp, #116	; 0x74
 8007b50:	4607      	mov	r7, r0
 8007b52:	460d      	mov	r5, r1
 8007b54:	4614      	mov	r4, r2
 8007b56:	d50e      	bpl.n	8007b76 <_svfiprintf_r+0x32>
 8007b58:	690b      	ldr	r3, [r1, #16]
 8007b5a:	b963      	cbnz	r3, 8007b76 <_svfiprintf_r+0x32>
 8007b5c:	2140      	movs	r1, #64	; 0x40
 8007b5e:	f7ff ff21 	bl	80079a4 <_malloc_r>
 8007b62:	6028      	str	r0, [r5, #0]
 8007b64:	6128      	str	r0, [r5, #16]
 8007b66:	b920      	cbnz	r0, 8007b72 <_svfiprintf_r+0x2e>
 8007b68:	230c      	movs	r3, #12
 8007b6a:	603b      	str	r3, [r7, #0]
 8007b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b70:	e0d1      	b.n	8007d16 <_svfiprintf_r+0x1d2>
 8007b72:	2340      	movs	r3, #64	; 0x40
 8007b74:	616b      	str	r3, [r5, #20]
 8007b76:	2300      	movs	r3, #0
 8007b78:	9309      	str	r3, [sp, #36]	; 0x24
 8007b7a:	2320      	movs	r3, #32
 8007b7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b80:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b84:	2330      	movs	r3, #48	; 0x30
 8007b86:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007d30 <_svfiprintf_r+0x1ec>
 8007b8a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b8e:	f04f 0901 	mov.w	r9, #1
 8007b92:	4623      	mov	r3, r4
 8007b94:	469a      	mov	sl, r3
 8007b96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b9a:	b10a      	cbz	r2, 8007ba0 <_svfiprintf_r+0x5c>
 8007b9c:	2a25      	cmp	r2, #37	; 0x25
 8007b9e:	d1f9      	bne.n	8007b94 <_svfiprintf_r+0x50>
 8007ba0:	ebba 0b04 	subs.w	fp, sl, r4
 8007ba4:	d00b      	beq.n	8007bbe <_svfiprintf_r+0x7a>
 8007ba6:	465b      	mov	r3, fp
 8007ba8:	4622      	mov	r2, r4
 8007baa:	4629      	mov	r1, r5
 8007bac:	4638      	mov	r0, r7
 8007bae:	f7ff ff6d 	bl	8007a8c <__ssputs_r>
 8007bb2:	3001      	adds	r0, #1
 8007bb4:	f000 80aa 	beq.w	8007d0c <_svfiprintf_r+0x1c8>
 8007bb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bba:	445a      	add	r2, fp
 8007bbc:	9209      	str	r2, [sp, #36]	; 0x24
 8007bbe:	f89a 3000 	ldrb.w	r3, [sl]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	f000 80a2 	beq.w	8007d0c <_svfiprintf_r+0x1c8>
 8007bc8:	2300      	movs	r3, #0
 8007bca:	f04f 32ff 	mov.w	r2, #4294967295
 8007bce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007bd2:	f10a 0a01 	add.w	sl, sl, #1
 8007bd6:	9304      	str	r3, [sp, #16]
 8007bd8:	9307      	str	r3, [sp, #28]
 8007bda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007bde:	931a      	str	r3, [sp, #104]	; 0x68
 8007be0:	4654      	mov	r4, sl
 8007be2:	2205      	movs	r2, #5
 8007be4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007be8:	4851      	ldr	r0, [pc, #324]	; (8007d30 <_svfiprintf_r+0x1ec>)
 8007bea:	f7f8 faf9 	bl	80001e0 <memchr>
 8007bee:	9a04      	ldr	r2, [sp, #16]
 8007bf0:	b9d8      	cbnz	r0, 8007c2a <_svfiprintf_r+0xe6>
 8007bf2:	06d0      	lsls	r0, r2, #27
 8007bf4:	bf44      	itt	mi
 8007bf6:	2320      	movmi	r3, #32
 8007bf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007bfc:	0711      	lsls	r1, r2, #28
 8007bfe:	bf44      	itt	mi
 8007c00:	232b      	movmi	r3, #43	; 0x2b
 8007c02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c06:	f89a 3000 	ldrb.w	r3, [sl]
 8007c0a:	2b2a      	cmp	r3, #42	; 0x2a
 8007c0c:	d015      	beq.n	8007c3a <_svfiprintf_r+0xf6>
 8007c0e:	9a07      	ldr	r2, [sp, #28]
 8007c10:	4654      	mov	r4, sl
 8007c12:	2000      	movs	r0, #0
 8007c14:	f04f 0c0a 	mov.w	ip, #10
 8007c18:	4621      	mov	r1, r4
 8007c1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c1e:	3b30      	subs	r3, #48	; 0x30
 8007c20:	2b09      	cmp	r3, #9
 8007c22:	d94e      	bls.n	8007cc2 <_svfiprintf_r+0x17e>
 8007c24:	b1b0      	cbz	r0, 8007c54 <_svfiprintf_r+0x110>
 8007c26:	9207      	str	r2, [sp, #28]
 8007c28:	e014      	b.n	8007c54 <_svfiprintf_r+0x110>
 8007c2a:	eba0 0308 	sub.w	r3, r0, r8
 8007c2e:	fa09 f303 	lsl.w	r3, r9, r3
 8007c32:	4313      	orrs	r3, r2
 8007c34:	9304      	str	r3, [sp, #16]
 8007c36:	46a2      	mov	sl, r4
 8007c38:	e7d2      	b.n	8007be0 <_svfiprintf_r+0x9c>
 8007c3a:	9b03      	ldr	r3, [sp, #12]
 8007c3c:	1d19      	adds	r1, r3, #4
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	9103      	str	r1, [sp, #12]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	bfbb      	ittet	lt
 8007c46:	425b      	neglt	r3, r3
 8007c48:	f042 0202 	orrlt.w	r2, r2, #2
 8007c4c:	9307      	strge	r3, [sp, #28]
 8007c4e:	9307      	strlt	r3, [sp, #28]
 8007c50:	bfb8      	it	lt
 8007c52:	9204      	strlt	r2, [sp, #16]
 8007c54:	7823      	ldrb	r3, [r4, #0]
 8007c56:	2b2e      	cmp	r3, #46	; 0x2e
 8007c58:	d10c      	bne.n	8007c74 <_svfiprintf_r+0x130>
 8007c5a:	7863      	ldrb	r3, [r4, #1]
 8007c5c:	2b2a      	cmp	r3, #42	; 0x2a
 8007c5e:	d135      	bne.n	8007ccc <_svfiprintf_r+0x188>
 8007c60:	9b03      	ldr	r3, [sp, #12]
 8007c62:	1d1a      	adds	r2, r3, #4
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	9203      	str	r2, [sp, #12]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	bfb8      	it	lt
 8007c6c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007c70:	3402      	adds	r4, #2
 8007c72:	9305      	str	r3, [sp, #20]
 8007c74:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007d40 <_svfiprintf_r+0x1fc>
 8007c78:	7821      	ldrb	r1, [r4, #0]
 8007c7a:	2203      	movs	r2, #3
 8007c7c:	4650      	mov	r0, sl
 8007c7e:	f7f8 faaf 	bl	80001e0 <memchr>
 8007c82:	b140      	cbz	r0, 8007c96 <_svfiprintf_r+0x152>
 8007c84:	2340      	movs	r3, #64	; 0x40
 8007c86:	eba0 000a 	sub.w	r0, r0, sl
 8007c8a:	fa03 f000 	lsl.w	r0, r3, r0
 8007c8e:	9b04      	ldr	r3, [sp, #16]
 8007c90:	4303      	orrs	r3, r0
 8007c92:	3401      	adds	r4, #1
 8007c94:	9304      	str	r3, [sp, #16]
 8007c96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c9a:	4826      	ldr	r0, [pc, #152]	; (8007d34 <_svfiprintf_r+0x1f0>)
 8007c9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ca0:	2206      	movs	r2, #6
 8007ca2:	f7f8 fa9d 	bl	80001e0 <memchr>
 8007ca6:	2800      	cmp	r0, #0
 8007ca8:	d038      	beq.n	8007d1c <_svfiprintf_r+0x1d8>
 8007caa:	4b23      	ldr	r3, [pc, #140]	; (8007d38 <_svfiprintf_r+0x1f4>)
 8007cac:	bb1b      	cbnz	r3, 8007cf6 <_svfiprintf_r+0x1b2>
 8007cae:	9b03      	ldr	r3, [sp, #12]
 8007cb0:	3307      	adds	r3, #7
 8007cb2:	f023 0307 	bic.w	r3, r3, #7
 8007cb6:	3308      	adds	r3, #8
 8007cb8:	9303      	str	r3, [sp, #12]
 8007cba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cbc:	4433      	add	r3, r6
 8007cbe:	9309      	str	r3, [sp, #36]	; 0x24
 8007cc0:	e767      	b.n	8007b92 <_svfiprintf_r+0x4e>
 8007cc2:	fb0c 3202 	mla	r2, ip, r2, r3
 8007cc6:	460c      	mov	r4, r1
 8007cc8:	2001      	movs	r0, #1
 8007cca:	e7a5      	b.n	8007c18 <_svfiprintf_r+0xd4>
 8007ccc:	2300      	movs	r3, #0
 8007cce:	3401      	adds	r4, #1
 8007cd0:	9305      	str	r3, [sp, #20]
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	f04f 0c0a 	mov.w	ip, #10
 8007cd8:	4620      	mov	r0, r4
 8007cda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cde:	3a30      	subs	r2, #48	; 0x30
 8007ce0:	2a09      	cmp	r2, #9
 8007ce2:	d903      	bls.n	8007cec <_svfiprintf_r+0x1a8>
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d0c5      	beq.n	8007c74 <_svfiprintf_r+0x130>
 8007ce8:	9105      	str	r1, [sp, #20]
 8007cea:	e7c3      	b.n	8007c74 <_svfiprintf_r+0x130>
 8007cec:	fb0c 2101 	mla	r1, ip, r1, r2
 8007cf0:	4604      	mov	r4, r0
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	e7f0      	b.n	8007cd8 <_svfiprintf_r+0x194>
 8007cf6:	ab03      	add	r3, sp, #12
 8007cf8:	9300      	str	r3, [sp, #0]
 8007cfa:	462a      	mov	r2, r5
 8007cfc:	4b0f      	ldr	r3, [pc, #60]	; (8007d3c <_svfiprintf_r+0x1f8>)
 8007cfe:	a904      	add	r1, sp, #16
 8007d00:	4638      	mov	r0, r7
 8007d02:	f7fd fc47 	bl	8005594 <_printf_float>
 8007d06:	1c42      	adds	r2, r0, #1
 8007d08:	4606      	mov	r6, r0
 8007d0a:	d1d6      	bne.n	8007cba <_svfiprintf_r+0x176>
 8007d0c:	89ab      	ldrh	r3, [r5, #12]
 8007d0e:	065b      	lsls	r3, r3, #25
 8007d10:	f53f af2c 	bmi.w	8007b6c <_svfiprintf_r+0x28>
 8007d14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d16:	b01d      	add	sp, #116	; 0x74
 8007d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d1c:	ab03      	add	r3, sp, #12
 8007d1e:	9300      	str	r3, [sp, #0]
 8007d20:	462a      	mov	r2, r5
 8007d22:	4b06      	ldr	r3, [pc, #24]	; (8007d3c <_svfiprintf_r+0x1f8>)
 8007d24:	a904      	add	r1, sp, #16
 8007d26:	4638      	mov	r0, r7
 8007d28:	f7fd fed8 	bl	8005adc <_printf_i>
 8007d2c:	e7eb      	b.n	8007d06 <_svfiprintf_r+0x1c2>
 8007d2e:	bf00      	nop
 8007d30:	080094c4 	.word	0x080094c4
 8007d34:	080094ce 	.word	0x080094ce
 8007d38:	08005595 	.word	0x08005595
 8007d3c:	08007a8d 	.word	0x08007a8d
 8007d40:	080094ca 	.word	0x080094ca

08007d44 <__sfputc_r>:
 8007d44:	6893      	ldr	r3, [r2, #8]
 8007d46:	3b01      	subs	r3, #1
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	b410      	push	{r4}
 8007d4c:	6093      	str	r3, [r2, #8]
 8007d4e:	da08      	bge.n	8007d62 <__sfputc_r+0x1e>
 8007d50:	6994      	ldr	r4, [r2, #24]
 8007d52:	42a3      	cmp	r3, r4
 8007d54:	db01      	blt.n	8007d5a <__sfputc_r+0x16>
 8007d56:	290a      	cmp	r1, #10
 8007d58:	d103      	bne.n	8007d62 <__sfputc_r+0x1e>
 8007d5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d5e:	f7fe b8a5 	b.w	8005eac <__swbuf_r>
 8007d62:	6813      	ldr	r3, [r2, #0]
 8007d64:	1c58      	adds	r0, r3, #1
 8007d66:	6010      	str	r0, [r2, #0]
 8007d68:	7019      	strb	r1, [r3, #0]
 8007d6a:	4608      	mov	r0, r1
 8007d6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d70:	4770      	bx	lr

08007d72 <__sfputs_r>:
 8007d72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d74:	4606      	mov	r6, r0
 8007d76:	460f      	mov	r7, r1
 8007d78:	4614      	mov	r4, r2
 8007d7a:	18d5      	adds	r5, r2, r3
 8007d7c:	42ac      	cmp	r4, r5
 8007d7e:	d101      	bne.n	8007d84 <__sfputs_r+0x12>
 8007d80:	2000      	movs	r0, #0
 8007d82:	e007      	b.n	8007d94 <__sfputs_r+0x22>
 8007d84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d88:	463a      	mov	r2, r7
 8007d8a:	4630      	mov	r0, r6
 8007d8c:	f7ff ffda 	bl	8007d44 <__sfputc_r>
 8007d90:	1c43      	adds	r3, r0, #1
 8007d92:	d1f3      	bne.n	8007d7c <__sfputs_r+0xa>
 8007d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007d98 <_vfiprintf_r>:
 8007d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d9c:	460d      	mov	r5, r1
 8007d9e:	b09d      	sub	sp, #116	; 0x74
 8007da0:	4614      	mov	r4, r2
 8007da2:	4698      	mov	r8, r3
 8007da4:	4606      	mov	r6, r0
 8007da6:	b118      	cbz	r0, 8007db0 <_vfiprintf_r+0x18>
 8007da8:	6983      	ldr	r3, [r0, #24]
 8007daa:	b90b      	cbnz	r3, 8007db0 <_vfiprintf_r+0x18>
 8007dac:	f7ff f8d4 	bl	8006f58 <__sinit>
 8007db0:	4b89      	ldr	r3, [pc, #548]	; (8007fd8 <_vfiprintf_r+0x240>)
 8007db2:	429d      	cmp	r5, r3
 8007db4:	d11b      	bne.n	8007dee <_vfiprintf_r+0x56>
 8007db6:	6875      	ldr	r5, [r6, #4]
 8007db8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007dba:	07d9      	lsls	r1, r3, #31
 8007dbc:	d405      	bmi.n	8007dca <_vfiprintf_r+0x32>
 8007dbe:	89ab      	ldrh	r3, [r5, #12]
 8007dc0:	059a      	lsls	r2, r3, #22
 8007dc2:	d402      	bmi.n	8007dca <_vfiprintf_r+0x32>
 8007dc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007dc6:	f7ff f96a 	bl	800709e <__retarget_lock_acquire_recursive>
 8007dca:	89ab      	ldrh	r3, [r5, #12]
 8007dcc:	071b      	lsls	r3, r3, #28
 8007dce:	d501      	bpl.n	8007dd4 <_vfiprintf_r+0x3c>
 8007dd0:	692b      	ldr	r3, [r5, #16]
 8007dd2:	b9eb      	cbnz	r3, 8007e10 <_vfiprintf_r+0x78>
 8007dd4:	4629      	mov	r1, r5
 8007dd6:	4630      	mov	r0, r6
 8007dd8:	f7fe f8ba 	bl	8005f50 <__swsetup_r>
 8007ddc:	b1c0      	cbz	r0, 8007e10 <_vfiprintf_r+0x78>
 8007dde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007de0:	07dc      	lsls	r4, r3, #31
 8007de2:	d50e      	bpl.n	8007e02 <_vfiprintf_r+0x6a>
 8007de4:	f04f 30ff 	mov.w	r0, #4294967295
 8007de8:	b01d      	add	sp, #116	; 0x74
 8007dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dee:	4b7b      	ldr	r3, [pc, #492]	; (8007fdc <_vfiprintf_r+0x244>)
 8007df0:	429d      	cmp	r5, r3
 8007df2:	d101      	bne.n	8007df8 <_vfiprintf_r+0x60>
 8007df4:	68b5      	ldr	r5, [r6, #8]
 8007df6:	e7df      	b.n	8007db8 <_vfiprintf_r+0x20>
 8007df8:	4b79      	ldr	r3, [pc, #484]	; (8007fe0 <_vfiprintf_r+0x248>)
 8007dfa:	429d      	cmp	r5, r3
 8007dfc:	bf08      	it	eq
 8007dfe:	68f5      	ldreq	r5, [r6, #12]
 8007e00:	e7da      	b.n	8007db8 <_vfiprintf_r+0x20>
 8007e02:	89ab      	ldrh	r3, [r5, #12]
 8007e04:	0598      	lsls	r0, r3, #22
 8007e06:	d4ed      	bmi.n	8007de4 <_vfiprintf_r+0x4c>
 8007e08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e0a:	f7ff f949 	bl	80070a0 <__retarget_lock_release_recursive>
 8007e0e:	e7e9      	b.n	8007de4 <_vfiprintf_r+0x4c>
 8007e10:	2300      	movs	r3, #0
 8007e12:	9309      	str	r3, [sp, #36]	; 0x24
 8007e14:	2320      	movs	r3, #32
 8007e16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e1e:	2330      	movs	r3, #48	; 0x30
 8007e20:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007fe4 <_vfiprintf_r+0x24c>
 8007e24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e28:	f04f 0901 	mov.w	r9, #1
 8007e2c:	4623      	mov	r3, r4
 8007e2e:	469a      	mov	sl, r3
 8007e30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e34:	b10a      	cbz	r2, 8007e3a <_vfiprintf_r+0xa2>
 8007e36:	2a25      	cmp	r2, #37	; 0x25
 8007e38:	d1f9      	bne.n	8007e2e <_vfiprintf_r+0x96>
 8007e3a:	ebba 0b04 	subs.w	fp, sl, r4
 8007e3e:	d00b      	beq.n	8007e58 <_vfiprintf_r+0xc0>
 8007e40:	465b      	mov	r3, fp
 8007e42:	4622      	mov	r2, r4
 8007e44:	4629      	mov	r1, r5
 8007e46:	4630      	mov	r0, r6
 8007e48:	f7ff ff93 	bl	8007d72 <__sfputs_r>
 8007e4c:	3001      	adds	r0, #1
 8007e4e:	f000 80aa 	beq.w	8007fa6 <_vfiprintf_r+0x20e>
 8007e52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e54:	445a      	add	r2, fp
 8007e56:	9209      	str	r2, [sp, #36]	; 0x24
 8007e58:	f89a 3000 	ldrb.w	r3, [sl]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	f000 80a2 	beq.w	8007fa6 <_vfiprintf_r+0x20e>
 8007e62:	2300      	movs	r3, #0
 8007e64:	f04f 32ff 	mov.w	r2, #4294967295
 8007e68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e6c:	f10a 0a01 	add.w	sl, sl, #1
 8007e70:	9304      	str	r3, [sp, #16]
 8007e72:	9307      	str	r3, [sp, #28]
 8007e74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e78:	931a      	str	r3, [sp, #104]	; 0x68
 8007e7a:	4654      	mov	r4, sl
 8007e7c:	2205      	movs	r2, #5
 8007e7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e82:	4858      	ldr	r0, [pc, #352]	; (8007fe4 <_vfiprintf_r+0x24c>)
 8007e84:	f7f8 f9ac 	bl	80001e0 <memchr>
 8007e88:	9a04      	ldr	r2, [sp, #16]
 8007e8a:	b9d8      	cbnz	r0, 8007ec4 <_vfiprintf_r+0x12c>
 8007e8c:	06d1      	lsls	r1, r2, #27
 8007e8e:	bf44      	itt	mi
 8007e90:	2320      	movmi	r3, #32
 8007e92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e96:	0713      	lsls	r3, r2, #28
 8007e98:	bf44      	itt	mi
 8007e9a:	232b      	movmi	r3, #43	; 0x2b
 8007e9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ea0:	f89a 3000 	ldrb.w	r3, [sl]
 8007ea4:	2b2a      	cmp	r3, #42	; 0x2a
 8007ea6:	d015      	beq.n	8007ed4 <_vfiprintf_r+0x13c>
 8007ea8:	9a07      	ldr	r2, [sp, #28]
 8007eaa:	4654      	mov	r4, sl
 8007eac:	2000      	movs	r0, #0
 8007eae:	f04f 0c0a 	mov.w	ip, #10
 8007eb2:	4621      	mov	r1, r4
 8007eb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007eb8:	3b30      	subs	r3, #48	; 0x30
 8007eba:	2b09      	cmp	r3, #9
 8007ebc:	d94e      	bls.n	8007f5c <_vfiprintf_r+0x1c4>
 8007ebe:	b1b0      	cbz	r0, 8007eee <_vfiprintf_r+0x156>
 8007ec0:	9207      	str	r2, [sp, #28]
 8007ec2:	e014      	b.n	8007eee <_vfiprintf_r+0x156>
 8007ec4:	eba0 0308 	sub.w	r3, r0, r8
 8007ec8:	fa09 f303 	lsl.w	r3, r9, r3
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	9304      	str	r3, [sp, #16]
 8007ed0:	46a2      	mov	sl, r4
 8007ed2:	e7d2      	b.n	8007e7a <_vfiprintf_r+0xe2>
 8007ed4:	9b03      	ldr	r3, [sp, #12]
 8007ed6:	1d19      	adds	r1, r3, #4
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	9103      	str	r1, [sp, #12]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	bfbb      	ittet	lt
 8007ee0:	425b      	neglt	r3, r3
 8007ee2:	f042 0202 	orrlt.w	r2, r2, #2
 8007ee6:	9307      	strge	r3, [sp, #28]
 8007ee8:	9307      	strlt	r3, [sp, #28]
 8007eea:	bfb8      	it	lt
 8007eec:	9204      	strlt	r2, [sp, #16]
 8007eee:	7823      	ldrb	r3, [r4, #0]
 8007ef0:	2b2e      	cmp	r3, #46	; 0x2e
 8007ef2:	d10c      	bne.n	8007f0e <_vfiprintf_r+0x176>
 8007ef4:	7863      	ldrb	r3, [r4, #1]
 8007ef6:	2b2a      	cmp	r3, #42	; 0x2a
 8007ef8:	d135      	bne.n	8007f66 <_vfiprintf_r+0x1ce>
 8007efa:	9b03      	ldr	r3, [sp, #12]
 8007efc:	1d1a      	adds	r2, r3, #4
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	9203      	str	r2, [sp, #12]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	bfb8      	it	lt
 8007f06:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f0a:	3402      	adds	r4, #2
 8007f0c:	9305      	str	r3, [sp, #20]
 8007f0e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007ff4 <_vfiprintf_r+0x25c>
 8007f12:	7821      	ldrb	r1, [r4, #0]
 8007f14:	2203      	movs	r2, #3
 8007f16:	4650      	mov	r0, sl
 8007f18:	f7f8 f962 	bl	80001e0 <memchr>
 8007f1c:	b140      	cbz	r0, 8007f30 <_vfiprintf_r+0x198>
 8007f1e:	2340      	movs	r3, #64	; 0x40
 8007f20:	eba0 000a 	sub.w	r0, r0, sl
 8007f24:	fa03 f000 	lsl.w	r0, r3, r0
 8007f28:	9b04      	ldr	r3, [sp, #16]
 8007f2a:	4303      	orrs	r3, r0
 8007f2c:	3401      	adds	r4, #1
 8007f2e:	9304      	str	r3, [sp, #16]
 8007f30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f34:	482c      	ldr	r0, [pc, #176]	; (8007fe8 <_vfiprintf_r+0x250>)
 8007f36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f3a:	2206      	movs	r2, #6
 8007f3c:	f7f8 f950 	bl	80001e0 <memchr>
 8007f40:	2800      	cmp	r0, #0
 8007f42:	d03f      	beq.n	8007fc4 <_vfiprintf_r+0x22c>
 8007f44:	4b29      	ldr	r3, [pc, #164]	; (8007fec <_vfiprintf_r+0x254>)
 8007f46:	bb1b      	cbnz	r3, 8007f90 <_vfiprintf_r+0x1f8>
 8007f48:	9b03      	ldr	r3, [sp, #12]
 8007f4a:	3307      	adds	r3, #7
 8007f4c:	f023 0307 	bic.w	r3, r3, #7
 8007f50:	3308      	adds	r3, #8
 8007f52:	9303      	str	r3, [sp, #12]
 8007f54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f56:	443b      	add	r3, r7
 8007f58:	9309      	str	r3, [sp, #36]	; 0x24
 8007f5a:	e767      	b.n	8007e2c <_vfiprintf_r+0x94>
 8007f5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f60:	460c      	mov	r4, r1
 8007f62:	2001      	movs	r0, #1
 8007f64:	e7a5      	b.n	8007eb2 <_vfiprintf_r+0x11a>
 8007f66:	2300      	movs	r3, #0
 8007f68:	3401      	adds	r4, #1
 8007f6a:	9305      	str	r3, [sp, #20]
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	f04f 0c0a 	mov.w	ip, #10
 8007f72:	4620      	mov	r0, r4
 8007f74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f78:	3a30      	subs	r2, #48	; 0x30
 8007f7a:	2a09      	cmp	r2, #9
 8007f7c:	d903      	bls.n	8007f86 <_vfiprintf_r+0x1ee>
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d0c5      	beq.n	8007f0e <_vfiprintf_r+0x176>
 8007f82:	9105      	str	r1, [sp, #20]
 8007f84:	e7c3      	b.n	8007f0e <_vfiprintf_r+0x176>
 8007f86:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f8a:	4604      	mov	r4, r0
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	e7f0      	b.n	8007f72 <_vfiprintf_r+0x1da>
 8007f90:	ab03      	add	r3, sp, #12
 8007f92:	9300      	str	r3, [sp, #0]
 8007f94:	462a      	mov	r2, r5
 8007f96:	4b16      	ldr	r3, [pc, #88]	; (8007ff0 <_vfiprintf_r+0x258>)
 8007f98:	a904      	add	r1, sp, #16
 8007f9a:	4630      	mov	r0, r6
 8007f9c:	f7fd fafa 	bl	8005594 <_printf_float>
 8007fa0:	4607      	mov	r7, r0
 8007fa2:	1c78      	adds	r0, r7, #1
 8007fa4:	d1d6      	bne.n	8007f54 <_vfiprintf_r+0x1bc>
 8007fa6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007fa8:	07d9      	lsls	r1, r3, #31
 8007faa:	d405      	bmi.n	8007fb8 <_vfiprintf_r+0x220>
 8007fac:	89ab      	ldrh	r3, [r5, #12]
 8007fae:	059a      	lsls	r2, r3, #22
 8007fb0:	d402      	bmi.n	8007fb8 <_vfiprintf_r+0x220>
 8007fb2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007fb4:	f7ff f874 	bl	80070a0 <__retarget_lock_release_recursive>
 8007fb8:	89ab      	ldrh	r3, [r5, #12]
 8007fba:	065b      	lsls	r3, r3, #25
 8007fbc:	f53f af12 	bmi.w	8007de4 <_vfiprintf_r+0x4c>
 8007fc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007fc2:	e711      	b.n	8007de8 <_vfiprintf_r+0x50>
 8007fc4:	ab03      	add	r3, sp, #12
 8007fc6:	9300      	str	r3, [sp, #0]
 8007fc8:	462a      	mov	r2, r5
 8007fca:	4b09      	ldr	r3, [pc, #36]	; (8007ff0 <_vfiprintf_r+0x258>)
 8007fcc:	a904      	add	r1, sp, #16
 8007fce:	4630      	mov	r0, r6
 8007fd0:	f7fd fd84 	bl	8005adc <_printf_i>
 8007fd4:	e7e4      	b.n	8007fa0 <_vfiprintf_r+0x208>
 8007fd6:	bf00      	nop
 8007fd8:	0800932c 	.word	0x0800932c
 8007fdc:	0800934c 	.word	0x0800934c
 8007fe0:	0800930c 	.word	0x0800930c
 8007fe4:	080094c4 	.word	0x080094c4
 8007fe8:	080094ce 	.word	0x080094ce
 8007fec:	08005595 	.word	0x08005595
 8007ff0:	08007d73 	.word	0x08007d73
 8007ff4:	080094ca 	.word	0x080094ca

08007ff8 <_sbrk_r>:
 8007ff8:	b538      	push	{r3, r4, r5, lr}
 8007ffa:	4d06      	ldr	r5, [pc, #24]	; (8008014 <_sbrk_r+0x1c>)
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	4604      	mov	r4, r0
 8008000:	4608      	mov	r0, r1
 8008002:	602b      	str	r3, [r5, #0]
 8008004:	f7f9 fa74 	bl	80014f0 <_sbrk>
 8008008:	1c43      	adds	r3, r0, #1
 800800a:	d102      	bne.n	8008012 <_sbrk_r+0x1a>
 800800c:	682b      	ldr	r3, [r5, #0]
 800800e:	b103      	cbz	r3, 8008012 <_sbrk_r+0x1a>
 8008010:	6023      	str	r3, [r4, #0]
 8008012:	bd38      	pop	{r3, r4, r5, pc}
 8008014:	20000828 	.word	0x20000828

08008018 <__sread>:
 8008018:	b510      	push	{r4, lr}
 800801a:	460c      	mov	r4, r1
 800801c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008020:	f000 f92c 	bl	800827c <_read_r>
 8008024:	2800      	cmp	r0, #0
 8008026:	bfab      	itete	ge
 8008028:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800802a:	89a3      	ldrhlt	r3, [r4, #12]
 800802c:	181b      	addge	r3, r3, r0
 800802e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008032:	bfac      	ite	ge
 8008034:	6563      	strge	r3, [r4, #84]	; 0x54
 8008036:	81a3      	strhlt	r3, [r4, #12]
 8008038:	bd10      	pop	{r4, pc}

0800803a <__swrite>:
 800803a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800803e:	461f      	mov	r7, r3
 8008040:	898b      	ldrh	r3, [r1, #12]
 8008042:	05db      	lsls	r3, r3, #23
 8008044:	4605      	mov	r5, r0
 8008046:	460c      	mov	r4, r1
 8008048:	4616      	mov	r6, r2
 800804a:	d505      	bpl.n	8008058 <__swrite+0x1e>
 800804c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008050:	2302      	movs	r3, #2
 8008052:	2200      	movs	r2, #0
 8008054:	f000 f898 	bl	8008188 <_lseek_r>
 8008058:	89a3      	ldrh	r3, [r4, #12]
 800805a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800805e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008062:	81a3      	strh	r3, [r4, #12]
 8008064:	4632      	mov	r2, r6
 8008066:	463b      	mov	r3, r7
 8008068:	4628      	mov	r0, r5
 800806a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800806e:	f000 b817 	b.w	80080a0 <_write_r>

08008072 <__sseek>:
 8008072:	b510      	push	{r4, lr}
 8008074:	460c      	mov	r4, r1
 8008076:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800807a:	f000 f885 	bl	8008188 <_lseek_r>
 800807e:	1c43      	adds	r3, r0, #1
 8008080:	89a3      	ldrh	r3, [r4, #12]
 8008082:	bf15      	itete	ne
 8008084:	6560      	strne	r0, [r4, #84]	; 0x54
 8008086:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800808a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800808e:	81a3      	strheq	r3, [r4, #12]
 8008090:	bf18      	it	ne
 8008092:	81a3      	strhne	r3, [r4, #12]
 8008094:	bd10      	pop	{r4, pc}

08008096 <__sclose>:
 8008096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800809a:	f000 b831 	b.w	8008100 <_close_r>
	...

080080a0 <_write_r>:
 80080a0:	b538      	push	{r3, r4, r5, lr}
 80080a2:	4d07      	ldr	r5, [pc, #28]	; (80080c0 <_write_r+0x20>)
 80080a4:	4604      	mov	r4, r0
 80080a6:	4608      	mov	r0, r1
 80080a8:	4611      	mov	r1, r2
 80080aa:	2200      	movs	r2, #0
 80080ac:	602a      	str	r2, [r5, #0]
 80080ae:	461a      	mov	r2, r3
 80080b0:	f7f9 f9cd 	bl	800144e <_write>
 80080b4:	1c43      	adds	r3, r0, #1
 80080b6:	d102      	bne.n	80080be <_write_r+0x1e>
 80080b8:	682b      	ldr	r3, [r5, #0]
 80080ba:	b103      	cbz	r3, 80080be <_write_r+0x1e>
 80080bc:	6023      	str	r3, [r4, #0]
 80080be:	bd38      	pop	{r3, r4, r5, pc}
 80080c0:	20000828 	.word	0x20000828

080080c4 <__assert_func>:
 80080c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80080c6:	4614      	mov	r4, r2
 80080c8:	461a      	mov	r2, r3
 80080ca:	4b09      	ldr	r3, [pc, #36]	; (80080f0 <__assert_func+0x2c>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4605      	mov	r5, r0
 80080d0:	68d8      	ldr	r0, [r3, #12]
 80080d2:	b14c      	cbz	r4, 80080e8 <__assert_func+0x24>
 80080d4:	4b07      	ldr	r3, [pc, #28]	; (80080f4 <__assert_func+0x30>)
 80080d6:	9100      	str	r1, [sp, #0]
 80080d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80080dc:	4906      	ldr	r1, [pc, #24]	; (80080f8 <__assert_func+0x34>)
 80080de:	462b      	mov	r3, r5
 80080e0:	f000 f81e 	bl	8008120 <fiprintf>
 80080e4:	f000 f8e9 	bl	80082ba <abort>
 80080e8:	4b04      	ldr	r3, [pc, #16]	; (80080fc <__assert_func+0x38>)
 80080ea:	461c      	mov	r4, r3
 80080ec:	e7f3      	b.n	80080d6 <__assert_func+0x12>
 80080ee:	bf00      	nop
 80080f0:	2000002c 	.word	0x2000002c
 80080f4:	080094d5 	.word	0x080094d5
 80080f8:	080094e2 	.word	0x080094e2
 80080fc:	08009510 	.word	0x08009510

08008100 <_close_r>:
 8008100:	b538      	push	{r3, r4, r5, lr}
 8008102:	4d06      	ldr	r5, [pc, #24]	; (800811c <_close_r+0x1c>)
 8008104:	2300      	movs	r3, #0
 8008106:	4604      	mov	r4, r0
 8008108:	4608      	mov	r0, r1
 800810a:	602b      	str	r3, [r5, #0]
 800810c:	f7f9 f9bb 	bl	8001486 <_close>
 8008110:	1c43      	adds	r3, r0, #1
 8008112:	d102      	bne.n	800811a <_close_r+0x1a>
 8008114:	682b      	ldr	r3, [r5, #0]
 8008116:	b103      	cbz	r3, 800811a <_close_r+0x1a>
 8008118:	6023      	str	r3, [r4, #0]
 800811a:	bd38      	pop	{r3, r4, r5, pc}
 800811c:	20000828 	.word	0x20000828

08008120 <fiprintf>:
 8008120:	b40e      	push	{r1, r2, r3}
 8008122:	b503      	push	{r0, r1, lr}
 8008124:	4601      	mov	r1, r0
 8008126:	ab03      	add	r3, sp, #12
 8008128:	4805      	ldr	r0, [pc, #20]	; (8008140 <fiprintf+0x20>)
 800812a:	f853 2b04 	ldr.w	r2, [r3], #4
 800812e:	6800      	ldr	r0, [r0, #0]
 8008130:	9301      	str	r3, [sp, #4]
 8008132:	f7ff fe31 	bl	8007d98 <_vfiprintf_r>
 8008136:	b002      	add	sp, #8
 8008138:	f85d eb04 	ldr.w	lr, [sp], #4
 800813c:	b003      	add	sp, #12
 800813e:	4770      	bx	lr
 8008140:	2000002c 	.word	0x2000002c

08008144 <_fstat_r>:
 8008144:	b538      	push	{r3, r4, r5, lr}
 8008146:	4d07      	ldr	r5, [pc, #28]	; (8008164 <_fstat_r+0x20>)
 8008148:	2300      	movs	r3, #0
 800814a:	4604      	mov	r4, r0
 800814c:	4608      	mov	r0, r1
 800814e:	4611      	mov	r1, r2
 8008150:	602b      	str	r3, [r5, #0]
 8008152:	f7f9 f9a4 	bl	800149e <_fstat>
 8008156:	1c43      	adds	r3, r0, #1
 8008158:	d102      	bne.n	8008160 <_fstat_r+0x1c>
 800815a:	682b      	ldr	r3, [r5, #0]
 800815c:	b103      	cbz	r3, 8008160 <_fstat_r+0x1c>
 800815e:	6023      	str	r3, [r4, #0]
 8008160:	bd38      	pop	{r3, r4, r5, pc}
 8008162:	bf00      	nop
 8008164:	20000828 	.word	0x20000828

08008168 <_isatty_r>:
 8008168:	b538      	push	{r3, r4, r5, lr}
 800816a:	4d06      	ldr	r5, [pc, #24]	; (8008184 <_isatty_r+0x1c>)
 800816c:	2300      	movs	r3, #0
 800816e:	4604      	mov	r4, r0
 8008170:	4608      	mov	r0, r1
 8008172:	602b      	str	r3, [r5, #0]
 8008174:	f7f9 f9a3 	bl	80014be <_isatty>
 8008178:	1c43      	adds	r3, r0, #1
 800817a:	d102      	bne.n	8008182 <_isatty_r+0x1a>
 800817c:	682b      	ldr	r3, [r5, #0]
 800817e:	b103      	cbz	r3, 8008182 <_isatty_r+0x1a>
 8008180:	6023      	str	r3, [r4, #0]
 8008182:	bd38      	pop	{r3, r4, r5, pc}
 8008184:	20000828 	.word	0x20000828

08008188 <_lseek_r>:
 8008188:	b538      	push	{r3, r4, r5, lr}
 800818a:	4d07      	ldr	r5, [pc, #28]	; (80081a8 <_lseek_r+0x20>)
 800818c:	4604      	mov	r4, r0
 800818e:	4608      	mov	r0, r1
 8008190:	4611      	mov	r1, r2
 8008192:	2200      	movs	r2, #0
 8008194:	602a      	str	r2, [r5, #0]
 8008196:	461a      	mov	r2, r3
 8008198:	f7f9 f99c 	bl	80014d4 <_lseek>
 800819c:	1c43      	adds	r3, r0, #1
 800819e:	d102      	bne.n	80081a6 <_lseek_r+0x1e>
 80081a0:	682b      	ldr	r3, [r5, #0]
 80081a2:	b103      	cbz	r3, 80081a6 <_lseek_r+0x1e>
 80081a4:	6023      	str	r3, [r4, #0]
 80081a6:	bd38      	pop	{r3, r4, r5, pc}
 80081a8:	20000828 	.word	0x20000828

080081ac <__ascii_mbtowc>:
 80081ac:	b082      	sub	sp, #8
 80081ae:	b901      	cbnz	r1, 80081b2 <__ascii_mbtowc+0x6>
 80081b0:	a901      	add	r1, sp, #4
 80081b2:	b142      	cbz	r2, 80081c6 <__ascii_mbtowc+0x1a>
 80081b4:	b14b      	cbz	r3, 80081ca <__ascii_mbtowc+0x1e>
 80081b6:	7813      	ldrb	r3, [r2, #0]
 80081b8:	600b      	str	r3, [r1, #0]
 80081ba:	7812      	ldrb	r2, [r2, #0]
 80081bc:	1e10      	subs	r0, r2, #0
 80081be:	bf18      	it	ne
 80081c0:	2001      	movne	r0, #1
 80081c2:	b002      	add	sp, #8
 80081c4:	4770      	bx	lr
 80081c6:	4610      	mov	r0, r2
 80081c8:	e7fb      	b.n	80081c2 <__ascii_mbtowc+0x16>
 80081ca:	f06f 0001 	mvn.w	r0, #1
 80081ce:	e7f8      	b.n	80081c2 <__ascii_mbtowc+0x16>

080081d0 <memmove>:
 80081d0:	4288      	cmp	r0, r1
 80081d2:	b510      	push	{r4, lr}
 80081d4:	eb01 0402 	add.w	r4, r1, r2
 80081d8:	d902      	bls.n	80081e0 <memmove+0x10>
 80081da:	4284      	cmp	r4, r0
 80081dc:	4623      	mov	r3, r4
 80081de:	d807      	bhi.n	80081f0 <memmove+0x20>
 80081e0:	1e43      	subs	r3, r0, #1
 80081e2:	42a1      	cmp	r1, r4
 80081e4:	d008      	beq.n	80081f8 <memmove+0x28>
 80081e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80081ee:	e7f8      	b.n	80081e2 <memmove+0x12>
 80081f0:	4402      	add	r2, r0
 80081f2:	4601      	mov	r1, r0
 80081f4:	428a      	cmp	r2, r1
 80081f6:	d100      	bne.n	80081fa <memmove+0x2a>
 80081f8:	bd10      	pop	{r4, pc}
 80081fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80081fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008202:	e7f7      	b.n	80081f4 <memmove+0x24>

08008204 <__malloc_lock>:
 8008204:	4801      	ldr	r0, [pc, #4]	; (800820c <__malloc_lock+0x8>)
 8008206:	f7fe bf4a 	b.w	800709e <__retarget_lock_acquire_recursive>
 800820a:	bf00      	nop
 800820c:	2000081c 	.word	0x2000081c

08008210 <__malloc_unlock>:
 8008210:	4801      	ldr	r0, [pc, #4]	; (8008218 <__malloc_unlock+0x8>)
 8008212:	f7fe bf45 	b.w	80070a0 <__retarget_lock_release_recursive>
 8008216:	bf00      	nop
 8008218:	2000081c 	.word	0x2000081c

0800821c <_realloc_r>:
 800821c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008220:	4680      	mov	r8, r0
 8008222:	4614      	mov	r4, r2
 8008224:	460e      	mov	r6, r1
 8008226:	b921      	cbnz	r1, 8008232 <_realloc_r+0x16>
 8008228:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800822c:	4611      	mov	r1, r2
 800822e:	f7ff bbb9 	b.w	80079a4 <_malloc_r>
 8008232:	b92a      	cbnz	r2, 8008240 <_realloc_r+0x24>
 8008234:	f7ff fb4a 	bl	80078cc <_free_r>
 8008238:	4625      	mov	r5, r4
 800823a:	4628      	mov	r0, r5
 800823c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008240:	f000 f842 	bl	80082c8 <_malloc_usable_size_r>
 8008244:	4284      	cmp	r4, r0
 8008246:	4607      	mov	r7, r0
 8008248:	d802      	bhi.n	8008250 <_realloc_r+0x34>
 800824a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800824e:	d812      	bhi.n	8008276 <_realloc_r+0x5a>
 8008250:	4621      	mov	r1, r4
 8008252:	4640      	mov	r0, r8
 8008254:	f7ff fba6 	bl	80079a4 <_malloc_r>
 8008258:	4605      	mov	r5, r0
 800825a:	2800      	cmp	r0, #0
 800825c:	d0ed      	beq.n	800823a <_realloc_r+0x1e>
 800825e:	42bc      	cmp	r4, r7
 8008260:	4622      	mov	r2, r4
 8008262:	4631      	mov	r1, r6
 8008264:	bf28      	it	cs
 8008266:	463a      	movcs	r2, r7
 8008268:	f7fe ff88 	bl	800717c <memcpy>
 800826c:	4631      	mov	r1, r6
 800826e:	4640      	mov	r0, r8
 8008270:	f7ff fb2c 	bl	80078cc <_free_r>
 8008274:	e7e1      	b.n	800823a <_realloc_r+0x1e>
 8008276:	4635      	mov	r5, r6
 8008278:	e7df      	b.n	800823a <_realloc_r+0x1e>
	...

0800827c <_read_r>:
 800827c:	b538      	push	{r3, r4, r5, lr}
 800827e:	4d07      	ldr	r5, [pc, #28]	; (800829c <_read_r+0x20>)
 8008280:	4604      	mov	r4, r0
 8008282:	4608      	mov	r0, r1
 8008284:	4611      	mov	r1, r2
 8008286:	2200      	movs	r2, #0
 8008288:	602a      	str	r2, [r5, #0]
 800828a:	461a      	mov	r2, r3
 800828c:	f7f9 f8c2 	bl	8001414 <_read>
 8008290:	1c43      	adds	r3, r0, #1
 8008292:	d102      	bne.n	800829a <_read_r+0x1e>
 8008294:	682b      	ldr	r3, [r5, #0]
 8008296:	b103      	cbz	r3, 800829a <_read_r+0x1e>
 8008298:	6023      	str	r3, [r4, #0]
 800829a:	bd38      	pop	{r3, r4, r5, pc}
 800829c:	20000828 	.word	0x20000828

080082a0 <__ascii_wctomb>:
 80082a0:	b149      	cbz	r1, 80082b6 <__ascii_wctomb+0x16>
 80082a2:	2aff      	cmp	r2, #255	; 0xff
 80082a4:	bf85      	ittet	hi
 80082a6:	238a      	movhi	r3, #138	; 0x8a
 80082a8:	6003      	strhi	r3, [r0, #0]
 80082aa:	700a      	strbls	r2, [r1, #0]
 80082ac:	f04f 30ff 	movhi.w	r0, #4294967295
 80082b0:	bf98      	it	ls
 80082b2:	2001      	movls	r0, #1
 80082b4:	4770      	bx	lr
 80082b6:	4608      	mov	r0, r1
 80082b8:	4770      	bx	lr

080082ba <abort>:
 80082ba:	b508      	push	{r3, lr}
 80082bc:	2006      	movs	r0, #6
 80082be:	f000 f833 	bl	8008328 <raise>
 80082c2:	2001      	movs	r0, #1
 80082c4:	f7f9 f89c 	bl	8001400 <_exit>

080082c8 <_malloc_usable_size_r>:
 80082c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082cc:	1f18      	subs	r0, r3, #4
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	bfbc      	itt	lt
 80082d2:	580b      	ldrlt	r3, [r1, r0]
 80082d4:	18c0      	addlt	r0, r0, r3
 80082d6:	4770      	bx	lr

080082d8 <_raise_r>:
 80082d8:	291f      	cmp	r1, #31
 80082da:	b538      	push	{r3, r4, r5, lr}
 80082dc:	4604      	mov	r4, r0
 80082de:	460d      	mov	r5, r1
 80082e0:	d904      	bls.n	80082ec <_raise_r+0x14>
 80082e2:	2316      	movs	r3, #22
 80082e4:	6003      	str	r3, [r0, #0]
 80082e6:	f04f 30ff 	mov.w	r0, #4294967295
 80082ea:	bd38      	pop	{r3, r4, r5, pc}
 80082ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80082ee:	b112      	cbz	r2, 80082f6 <_raise_r+0x1e>
 80082f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80082f4:	b94b      	cbnz	r3, 800830a <_raise_r+0x32>
 80082f6:	4620      	mov	r0, r4
 80082f8:	f000 f830 	bl	800835c <_getpid_r>
 80082fc:	462a      	mov	r2, r5
 80082fe:	4601      	mov	r1, r0
 8008300:	4620      	mov	r0, r4
 8008302:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008306:	f000 b817 	b.w	8008338 <_kill_r>
 800830a:	2b01      	cmp	r3, #1
 800830c:	d00a      	beq.n	8008324 <_raise_r+0x4c>
 800830e:	1c59      	adds	r1, r3, #1
 8008310:	d103      	bne.n	800831a <_raise_r+0x42>
 8008312:	2316      	movs	r3, #22
 8008314:	6003      	str	r3, [r0, #0]
 8008316:	2001      	movs	r0, #1
 8008318:	e7e7      	b.n	80082ea <_raise_r+0x12>
 800831a:	2400      	movs	r4, #0
 800831c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008320:	4628      	mov	r0, r5
 8008322:	4798      	blx	r3
 8008324:	2000      	movs	r0, #0
 8008326:	e7e0      	b.n	80082ea <_raise_r+0x12>

08008328 <raise>:
 8008328:	4b02      	ldr	r3, [pc, #8]	; (8008334 <raise+0xc>)
 800832a:	4601      	mov	r1, r0
 800832c:	6818      	ldr	r0, [r3, #0]
 800832e:	f7ff bfd3 	b.w	80082d8 <_raise_r>
 8008332:	bf00      	nop
 8008334:	2000002c 	.word	0x2000002c

08008338 <_kill_r>:
 8008338:	b538      	push	{r3, r4, r5, lr}
 800833a:	4d07      	ldr	r5, [pc, #28]	; (8008358 <_kill_r+0x20>)
 800833c:	2300      	movs	r3, #0
 800833e:	4604      	mov	r4, r0
 8008340:	4608      	mov	r0, r1
 8008342:	4611      	mov	r1, r2
 8008344:	602b      	str	r3, [r5, #0]
 8008346:	f7f9 f84b 	bl	80013e0 <_kill>
 800834a:	1c43      	adds	r3, r0, #1
 800834c:	d102      	bne.n	8008354 <_kill_r+0x1c>
 800834e:	682b      	ldr	r3, [r5, #0]
 8008350:	b103      	cbz	r3, 8008354 <_kill_r+0x1c>
 8008352:	6023      	str	r3, [r4, #0]
 8008354:	bd38      	pop	{r3, r4, r5, pc}
 8008356:	bf00      	nop
 8008358:	20000828 	.word	0x20000828

0800835c <_getpid_r>:
 800835c:	f7f9 b838 	b.w	80013d0 <_getpid>

08008360 <pow>:
 8008360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008362:	ed2d 8b02 	vpush	{d8}
 8008366:	eeb0 8a40 	vmov.f32	s16, s0
 800836a:	eef0 8a60 	vmov.f32	s17, s1
 800836e:	ec55 4b11 	vmov	r4, r5, d1
 8008372:	f000 f865 	bl	8008440 <__ieee754_pow>
 8008376:	4622      	mov	r2, r4
 8008378:	462b      	mov	r3, r5
 800837a:	4620      	mov	r0, r4
 800837c:	4629      	mov	r1, r5
 800837e:	ec57 6b10 	vmov	r6, r7, d0
 8008382:	f7f8 fbd3 	bl	8000b2c <__aeabi_dcmpun>
 8008386:	2800      	cmp	r0, #0
 8008388:	d13b      	bne.n	8008402 <pow+0xa2>
 800838a:	ec51 0b18 	vmov	r0, r1, d8
 800838e:	2200      	movs	r2, #0
 8008390:	2300      	movs	r3, #0
 8008392:	f7f8 fb99 	bl	8000ac8 <__aeabi_dcmpeq>
 8008396:	b1b8      	cbz	r0, 80083c8 <pow+0x68>
 8008398:	2200      	movs	r2, #0
 800839a:	2300      	movs	r3, #0
 800839c:	4620      	mov	r0, r4
 800839e:	4629      	mov	r1, r5
 80083a0:	f7f8 fb92 	bl	8000ac8 <__aeabi_dcmpeq>
 80083a4:	2800      	cmp	r0, #0
 80083a6:	d146      	bne.n	8008436 <pow+0xd6>
 80083a8:	ec45 4b10 	vmov	d0, r4, r5
 80083ac:	f000 fe61 	bl	8009072 <finite>
 80083b0:	b338      	cbz	r0, 8008402 <pow+0xa2>
 80083b2:	2200      	movs	r2, #0
 80083b4:	2300      	movs	r3, #0
 80083b6:	4620      	mov	r0, r4
 80083b8:	4629      	mov	r1, r5
 80083ba:	f7f8 fb8f 	bl	8000adc <__aeabi_dcmplt>
 80083be:	b300      	cbz	r0, 8008402 <pow+0xa2>
 80083c0:	f7fd f816 	bl	80053f0 <__errno>
 80083c4:	2322      	movs	r3, #34	; 0x22
 80083c6:	e01b      	b.n	8008400 <pow+0xa0>
 80083c8:	ec47 6b10 	vmov	d0, r6, r7
 80083cc:	f000 fe51 	bl	8009072 <finite>
 80083d0:	b9e0      	cbnz	r0, 800840c <pow+0xac>
 80083d2:	eeb0 0a48 	vmov.f32	s0, s16
 80083d6:	eef0 0a68 	vmov.f32	s1, s17
 80083da:	f000 fe4a 	bl	8009072 <finite>
 80083de:	b1a8      	cbz	r0, 800840c <pow+0xac>
 80083e0:	ec45 4b10 	vmov	d0, r4, r5
 80083e4:	f000 fe45 	bl	8009072 <finite>
 80083e8:	b180      	cbz	r0, 800840c <pow+0xac>
 80083ea:	4632      	mov	r2, r6
 80083ec:	463b      	mov	r3, r7
 80083ee:	4630      	mov	r0, r6
 80083f0:	4639      	mov	r1, r7
 80083f2:	f7f8 fb9b 	bl	8000b2c <__aeabi_dcmpun>
 80083f6:	2800      	cmp	r0, #0
 80083f8:	d0e2      	beq.n	80083c0 <pow+0x60>
 80083fa:	f7fc fff9 	bl	80053f0 <__errno>
 80083fe:	2321      	movs	r3, #33	; 0x21
 8008400:	6003      	str	r3, [r0, #0]
 8008402:	ecbd 8b02 	vpop	{d8}
 8008406:	ec47 6b10 	vmov	d0, r6, r7
 800840a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800840c:	2200      	movs	r2, #0
 800840e:	2300      	movs	r3, #0
 8008410:	4630      	mov	r0, r6
 8008412:	4639      	mov	r1, r7
 8008414:	f7f8 fb58 	bl	8000ac8 <__aeabi_dcmpeq>
 8008418:	2800      	cmp	r0, #0
 800841a:	d0f2      	beq.n	8008402 <pow+0xa2>
 800841c:	eeb0 0a48 	vmov.f32	s0, s16
 8008420:	eef0 0a68 	vmov.f32	s1, s17
 8008424:	f000 fe25 	bl	8009072 <finite>
 8008428:	2800      	cmp	r0, #0
 800842a:	d0ea      	beq.n	8008402 <pow+0xa2>
 800842c:	ec45 4b10 	vmov	d0, r4, r5
 8008430:	f000 fe1f 	bl	8009072 <finite>
 8008434:	e7c3      	b.n	80083be <pow+0x5e>
 8008436:	4f01      	ldr	r7, [pc, #4]	; (800843c <pow+0xdc>)
 8008438:	2600      	movs	r6, #0
 800843a:	e7e2      	b.n	8008402 <pow+0xa2>
 800843c:	3ff00000 	.word	0x3ff00000

08008440 <__ieee754_pow>:
 8008440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008444:	ed2d 8b06 	vpush	{d8-d10}
 8008448:	b089      	sub	sp, #36	; 0x24
 800844a:	ed8d 1b00 	vstr	d1, [sp]
 800844e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8008452:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8008456:	ea58 0102 	orrs.w	r1, r8, r2
 800845a:	ec57 6b10 	vmov	r6, r7, d0
 800845e:	d115      	bne.n	800848c <__ieee754_pow+0x4c>
 8008460:	19b3      	adds	r3, r6, r6
 8008462:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8008466:	4152      	adcs	r2, r2
 8008468:	4299      	cmp	r1, r3
 800846a:	4b89      	ldr	r3, [pc, #548]	; (8008690 <__ieee754_pow+0x250>)
 800846c:	4193      	sbcs	r3, r2
 800846e:	f080 84d2 	bcs.w	8008e16 <__ieee754_pow+0x9d6>
 8008472:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008476:	4630      	mov	r0, r6
 8008478:	4639      	mov	r1, r7
 800847a:	f7f7 ff07 	bl	800028c <__adddf3>
 800847e:	ec41 0b10 	vmov	d0, r0, r1
 8008482:	b009      	add	sp, #36	; 0x24
 8008484:	ecbd 8b06 	vpop	{d8-d10}
 8008488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800848c:	4b81      	ldr	r3, [pc, #516]	; (8008694 <__ieee754_pow+0x254>)
 800848e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8008492:	429c      	cmp	r4, r3
 8008494:	ee10 aa10 	vmov	sl, s0
 8008498:	463d      	mov	r5, r7
 800849a:	dc06      	bgt.n	80084aa <__ieee754_pow+0x6a>
 800849c:	d101      	bne.n	80084a2 <__ieee754_pow+0x62>
 800849e:	2e00      	cmp	r6, #0
 80084a0:	d1e7      	bne.n	8008472 <__ieee754_pow+0x32>
 80084a2:	4598      	cmp	r8, r3
 80084a4:	dc01      	bgt.n	80084aa <__ieee754_pow+0x6a>
 80084a6:	d10f      	bne.n	80084c8 <__ieee754_pow+0x88>
 80084a8:	b172      	cbz	r2, 80084c8 <__ieee754_pow+0x88>
 80084aa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80084ae:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80084b2:	ea55 050a 	orrs.w	r5, r5, sl
 80084b6:	d1dc      	bne.n	8008472 <__ieee754_pow+0x32>
 80084b8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80084bc:	18db      	adds	r3, r3, r3
 80084be:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80084c2:	4152      	adcs	r2, r2
 80084c4:	429d      	cmp	r5, r3
 80084c6:	e7d0      	b.n	800846a <__ieee754_pow+0x2a>
 80084c8:	2d00      	cmp	r5, #0
 80084ca:	da3b      	bge.n	8008544 <__ieee754_pow+0x104>
 80084cc:	4b72      	ldr	r3, [pc, #456]	; (8008698 <__ieee754_pow+0x258>)
 80084ce:	4598      	cmp	r8, r3
 80084d0:	dc51      	bgt.n	8008576 <__ieee754_pow+0x136>
 80084d2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80084d6:	4598      	cmp	r8, r3
 80084d8:	f340 84ac 	ble.w	8008e34 <__ieee754_pow+0x9f4>
 80084dc:	ea4f 5328 	mov.w	r3, r8, asr #20
 80084e0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80084e4:	2b14      	cmp	r3, #20
 80084e6:	dd0f      	ble.n	8008508 <__ieee754_pow+0xc8>
 80084e8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80084ec:	fa22 f103 	lsr.w	r1, r2, r3
 80084f0:	fa01 f303 	lsl.w	r3, r1, r3
 80084f4:	4293      	cmp	r3, r2
 80084f6:	f040 849d 	bne.w	8008e34 <__ieee754_pow+0x9f4>
 80084fa:	f001 0101 	and.w	r1, r1, #1
 80084fe:	f1c1 0302 	rsb	r3, r1, #2
 8008502:	9304      	str	r3, [sp, #16]
 8008504:	b182      	cbz	r2, 8008528 <__ieee754_pow+0xe8>
 8008506:	e05f      	b.n	80085c8 <__ieee754_pow+0x188>
 8008508:	2a00      	cmp	r2, #0
 800850a:	d15b      	bne.n	80085c4 <__ieee754_pow+0x184>
 800850c:	f1c3 0314 	rsb	r3, r3, #20
 8008510:	fa48 f103 	asr.w	r1, r8, r3
 8008514:	fa01 f303 	lsl.w	r3, r1, r3
 8008518:	4543      	cmp	r3, r8
 800851a:	f040 8488 	bne.w	8008e2e <__ieee754_pow+0x9ee>
 800851e:	f001 0101 	and.w	r1, r1, #1
 8008522:	f1c1 0302 	rsb	r3, r1, #2
 8008526:	9304      	str	r3, [sp, #16]
 8008528:	4b5c      	ldr	r3, [pc, #368]	; (800869c <__ieee754_pow+0x25c>)
 800852a:	4598      	cmp	r8, r3
 800852c:	d132      	bne.n	8008594 <__ieee754_pow+0x154>
 800852e:	f1b9 0f00 	cmp.w	r9, #0
 8008532:	f280 8478 	bge.w	8008e26 <__ieee754_pow+0x9e6>
 8008536:	4959      	ldr	r1, [pc, #356]	; (800869c <__ieee754_pow+0x25c>)
 8008538:	4632      	mov	r2, r6
 800853a:	463b      	mov	r3, r7
 800853c:	2000      	movs	r0, #0
 800853e:	f7f8 f985 	bl	800084c <__aeabi_ddiv>
 8008542:	e79c      	b.n	800847e <__ieee754_pow+0x3e>
 8008544:	2300      	movs	r3, #0
 8008546:	9304      	str	r3, [sp, #16]
 8008548:	2a00      	cmp	r2, #0
 800854a:	d13d      	bne.n	80085c8 <__ieee754_pow+0x188>
 800854c:	4b51      	ldr	r3, [pc, #324]	; (8008694 <__ieee754_pow+0x254>)
 800854e:	4598      	cmp	r8, r3
 8008550:	d1ea      	bne.n	8008528 <__ieee754_pow+0xe8>
 8008552:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008556:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800855a:	ea53 030a 	orrs.w	r3, r3, sl
 800855e:	f000 845a 	beq.w	8008e16 <__ieee754_pow+0x9d6>
 8008562:	4b4f      	ldr	r3, [pc, #316]	; (80086a0 <__ieee754_pow+0x260>)
 8008564:	429c      	cmp	r4, r3
 8008566:	dd08      	ble.n	800857a <__ieee754_pow+0x13a>
 8008568:	f1b9 0f00 	cmp.w	r9, #0
 800856c:	f2c0 8457 	blt.w	8008e1e <__ieee754_pow+0x9de>
 8008570:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008574:	e783      	b.n	800847e <__ieee754_pow+0x3e>
 8008576:	2302      	movs	r3, #2
 8008578:	e7e5      	b.n	8008546 <__ieee754_pow+0x106>
 800857a:	f1b9 0f00 	cmp.w	r9, #0
 800857e:	f04f 0000 	mov.w	r0, #0
 8008582:	f04f 0100 	mov.w	r1, #0
 8008586:	f6bf af7a 	bge.w	800847e <__ieee754_pow+0x3e>
 800858a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800858e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008592:	e774      	b.n	800847e <__ieee754_pow+0x3e>
 8008594:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8008598:	d106      	bne.n	80085a8 <__ieee754_pow+0x168>
 800859a:	4632      	mov	r2, r6
 800859c:	463b      	mov	r3, r7
 800859e:	4630      	mov	r0, r6
 80085a0:	4639      	mov	r1, r7
 80085a2:	f7f8 f829 	bl	80005f8 <__aeabi_dmul>
 80085a6:	e76a      	b.n	800847e <__ieee754_pow+0x3e>
 80085a8:	4b3e      	ldr	r3, [pc, #248]	; (80086a4 <__ieee754_pow+0x264>)
 80085aa:	4599      	cmp	r9, r3
 80085ac:	d10c      	bne.n	80085c8 <__ieee754_pow+0x188>
 80085ae:	2d00      	cmp	r5, #0
 80085b0:	db0a      	blt.n	80085c8 <__ieee754_pow+0x188>
 80085b2:	ec47 6b10 	vmov	d0, r6, r7
 80085b6:	b009      	add	sp, #36	; 0x24
 80085b8:	ecbd 8b06 	vpop	{d8-d10}
 80085bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085c0:	f000 bc6c 	b.w	8008e9c <__ieee754_sqrt>
 80085c4:	2300      	movs	r3, #0
 80085c6:	9304      	str	r3, [sp, #16]
 80085c8:	ec47 6b10 	vmov	d0, r6, r7
 80085cc:	f000 fd48 	bl	8009060 <fabs>
 80085d0:	ec51 0b10 	vmov	r0, r1, d0
 80085d4:	f1ba 0f00 	cmp.w	sl, #0
 80085d8:	d129      	bne.n	800862e <__ieee754_pow+0x1ee>
 80085da:	b124      	cbz	r4, 80085e6 <__ieee754_pow+0x1a6>
 80085dc:	4b2f      	ldr	r3, [pc, #188]	; (800869c <__ieee754_pow+0x25c>)
 80085de:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d123      	bne.n	800862e <__ieee754_pow+0x1ee>
 80085e6:	f1b9 0f00 	cmp.w	r9, #0
 80085ea:	da05      	bge.n	80085f8 <__ieee754_pow+0x1b8>
 80085ec:	4602      	mov	r2, r0
 80085ee:	460b      	mov	r3, r1
 80085f0:	2000      	movs	r0, #0
 80085f2:	492a      	ldr	r1, [pc, #168]	; (800869c <__ieee754_pow+0x25c>)
 80085f4:	f7f8 f92a 	bl	800084c <__aeabi_ddiv>
 80085f8:	2d00      	cmp	r5, #0
 80085fa:	f6bf af40 	bge.w	800847e <__ieee754_pow+0x3e>
 80085fe:	9b04      	ldr	r3, [sp, #16]
 8008600:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008604:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008608:	4323      	orrs	r3, r4
 800860a:	d108      	bne.n	800861e <__ieee754_pow+0x1de>
 800860c:	4602      	mov	r2, r0
 800860e:	460b      	mov	r3, r1
 8008610:	4610      	mov	r0, r2
 8008612:	4619      	mov	r1, r3
 8008614:	f7f7 fe38 	bl	8000288 <__aeabi_dsub>
 8008618:	4602      	mov	r2, r0
 800861a:	460b      	mov	r3, r1
 800861c:	e78f      	b.n	800853e <__ieee754_pow+0xfe>
 800861e:	9b04      	ldr	r3, [sp, #16]
 8008620:	2b01      	cmp	r3, #1
 8008622:	f47f af2c 	bne.w	800847e <__ieee754_pow+0x3e>
 8008626:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800862a:	4619      	mov	r1, r3
 800862c:	e727      	b.n	800847e <__ieee754_pow+0x3e>
 800862e:	0feb      	lsrs	r3, r5, #31
 8008630:	3b01      	subs	r3, #1
 8008632:	9306      	str	r3, [sp, #24]
 8008634:	9a06      	ldr	r2, [sp, #24]
 8008636:	9b04      	ldr	r3, [sp, #16]
 8008638:	4313      	orrs	r3, r2
 800863a:	d102      	bne.n	8008642 <__ieee754_pow+0x202>
 800863c:	4632      	mov	r2, r6
 800863e:	463b      	mov	r3, r7
 8008640:	e7e6      	b.n	8008610 <__ieee754_pow+0x1d0>
 8008642:	4b19      	ldr	r3, [pc, #100]	; (80086a8 <__ieee754_pow+0x268>)
 8008644:	4598      	cmp	r8, r3
 8008646:	f340 80fb 	ble.w	8008840 <__ieee754_pow+0x400>
 800864a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800864e:	4598      	cmp	r8, r3
 8008650:	4b13      	ldr	r3, [pc, #76]	; (80086a0 <__ieee754_pow+0x260>)
 8008652:	dd0c      	ble.n	800866e <__ieee754_pow+0x22e>
 8008654:	429c      	cmp	r4, r3
 8008656:	dc0f      	bgt.n	8008678 <__ieee754_pow+0x238>
 8008658:	f1b9 0f00 	cmp.w	r9, #0
 800865c:	da0f      	bge.n	800867e <__ieee754_pow+0x23e>
 800865e:	2000      	movs	r0, #0
 8008660:	b009      	add	sp, #36	; 0x24
 8008662:	ecbd 8b06 	vpop	{d8-d10}
 8008666:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800866a:	f000 bcf0 	b.w	800904e <__math_oflow>
 800866e:	429c      	cmp	r4, r3
 8008670:	dbf2      	blt.n	8008658 <__ieee754_pow+0x218>
 8008672:	4b0a      	ldr	r3, [pc, #40]	; (800869c <__ieee754_pow+0x25c>)
 8008674:	429c      	cmp	r4, r3
 8008676:	dd19      	ble.n	80086ac <__ieee754_pow+0x26c>
 8008678:	f1b9 0f00 	cmp.w	r9, #0
 800867c:	dcef      	bgt.n	800865e <__ieee754_pow+0x21e>
 800867e:	2000      	movs	r0, #0
 8008680:	b009      	add	sp, #36	; 0x24
 8008682:	ecbd 8b06 	vpop	{d8-d10}
 8008686:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800868a:	f000 bcd7 	b.w	800903c <__math_uflow>
 800868e:	bf00      	nop
 8008690:	fff00000 	.word	0xfff00000
 8008694:	7ff00000 	.word	0x7ff00000
 8008698:	433fffff 	.word	0x433fffff
 800869c:	3ff00000 	.word	0x3ff00000
 80086a0:	3fefffff 	.word	0x3fefffff
 80086a4:	3fe00000 	.word	0x3fe00000
 80086a8:	41e00000 	.word	0x41e00000
 80086ac:	4b60      	ldr	r3, [pc, #384]	; (8008830 <__ieee754_pow+0x3f0>)
 80086ae:	2200      	movs	r2, #0
 80086b0:	f7f7 fdea 	bl	8000288 <__aeabi_dsub>
 80086b4:	a354      	add	r3, pc, #336	; (adr r3, 8008808 <__ieee754_pow+0x3c8>)
 80086b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ba:	4604      	mov	r4, r0
 80086bc:	460d      	mov	r5, r1
 80086be:	f7f7 ff9b 	bl	80005f8 <__aeabi_dmul>
 80086c2:	a353      	add	r3, pc, #332	; (adr r3, 8008810 <__ieee754_pow+0x3d0>)
 80086c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c8:	4606      	mov	r6, r0
 80086ca:	460f      	mov	r7, r1
 80086cc:	4620      	mov	r0, r4
 80086ce:	4629      	mov	r1, r5
 80086d0:	f7f7 ff92 	bl	80005f8 <__aeabi_dmul>
 80086d4:	4b57      	ldr	r3, [pc, #348]	; (8008834 <__ieee754_pow+0x3f4>)
 80086d6:	4682      	mov	sl, r0
 80086d8:	468b      	mov	fp, r1
 80086da:	2200      	movs	r2, #0
 80086dc:	4620      	mov	r0, r4
 80086de:	4629      	mov	r1, r5
 80086e0:	f7f7 ff8a 	bl	80005f8 <__aeabi_dmul>
 80086e4:	4602      	mov	r2, r0
 80086e6:	460b      	mov	r3, r1
 80086e8:	a14b      	add	r1, pc, #300	; (adr r1, 8008818 <__ieee754_pow+0x3d8>)
 80086ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 80086ee:	f7f7 fdcb 	bl	8000288 <__aeabi_dsub>
 80086f2:	4622      	mov	r2, r4
 80086f4:	462b      	mov	r3, r5
 80086f6:	f7f7 ff7f 	bl	80005f8 <__aeabi_dmul>
 80086fa:	4602      	mov	r2, r0
 80086fc:	460b      	mov	r3, r1
 80086fe:	2000      	movs	r0, #0
 8008700:	494d      	ldr	r1, [pc, #308]	; (8008838 <__ieee754_pow+0x3f8>)
 8008702:	f7f7 fdc1 	bl	8000288 <__aeabi_dsub>
 8008706:	4622      	mov	r2, r4
 8008708:	4680      	mov	r8, r0
 800870a:	4689      	mov	r9, r1
 800870c:	462b      	mov	r3, r5
 800870e:	4620      	mov	r0, r4
 8008710:	4629      	mov	r1, r5
 8008712:	f7f7 ff71 	bl	80005f8 <__aeabi_dmul>
 8008716:	4602      	mov	r2, r0
 8008718:	460b      	mov	r3, r1
 800871a:	4640      	mov	r0, r8
 800871c:	4649      	mov	r1, r9
 800871e:	f7f7 ff6b 	bl	80005f8 <__aeabi_dmul>
 8008722:	a33f      	add	r3, pc, #252	; (adr r3, 8008820 <__ieee754_pow+0x3e0>)
 8008724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008728:	f7f7 ff66 	bl	80005f8 <__aeabi_dmul>
 800872c:	4602      	mov	r2, r0
 800872e:	460b      	mov	r3, r1
 8008730:	4650      	mov	r0, sl
 8008732:	4659      	mov	r1, fp
 8008734:	f7f7 fda8 	bl	8000288 <__aeabi_dsub>
 8008738:	4602      	mov	r2, r0
 800873a:	460b      	mov	r3, r1
 800873c:	4680      	mov	r8, r0
 800873e:	4689      	mov	r9, r1
 8008740:	4630      	mov	r0, r6
 8008742:	4639      	mov	r1, r7
 8008744:	f7f7 fda2 	bl	800028c <__adddf3>
 8008748:	2000      	movs	r0, #0
 800874a:	4632      	mov	r2, r6
 800874c:	463b      	mov	r3, r7
 800874e:	4604      	mov	r4, r0
 8008750:	460d      	mov	r5, r1
 8008752:	f7f7 fd99 	bl	8000288 <__aeabi_dsub>
 8008756:	4602      	mov	r2, r0
 8008758:	460b      	mov	r3, r1
 800875a:	4640      	mov	r0, r8
 800875c:	4649      	mov	r1, r9
 800875e:	f7f7 fd93 	bl	8000288 <__aeabi_dsub>
 8008762:	9b04      	ldr	r3, [sp, #16]
 8008764:	9a06      	ldr	r2, [sp, #24]
 8008766:	3b01      	subs	r3, #1
 8008768:	4313      	orrs	r3, r2
 800876a:	4682      	mov	sl, r0
 800876c:	468b      	mov	fp, r1
 800876e:	f040 81e7 	bne.w	8008b40 <__ieee754_pow+0x700>
 8008772:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8008828 <__ieee754_pow+0x3e8>
 8008776:	eeb0 8a47 	vmov.f32	s16, s14
 800877a:	eef0 8a67 	vmov.f32	s17, s15
 800877e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008782:	2600      	movs	r6, #0
 8008784:	4632      	mov	r2, r6
 8008786:	463b      	mov	r3, r7
 8008788:	e9dd 0100 	ldrd	r0, r1, [sp]
 800878c:	f7f7 fd7c 	bl	8000288 <__aeabi_dsub>
 8008790:	4622      	mov	r2, r4
 8008792:	462b      	mov	r3, r5
 8008794:	f7f7 ff30 	bl	80005f8 <__aeabi_dmul>
 8008798:	e9dd 2300 	ldrd	r2, r3, [sp]
 800879c:	4680      	mov	r8, r0
 800879e:	4689      	mov	r9, r1
 80087a0:	4650      	mov	r0, sl
 80087a2:	4659      	mov	r1, fp
 80087a4:	f7f7 ff28 	bl	80005f8 <__aeabi_dmul>
 80087a8:	4602      	mov	r2, r0
 80087aa:	460b      	mov	r3, r1
 80087ac:	4640      	mov	r0, r8
 80087ae:	4649      	mov	r1, r9
 80087b0:	f7f7 fd6c 	bl	800028c <__adddf3>
 80087b4:	4632      	mov	r2, r6
 80087b6:	463b      	mov	r3, r7
 80087b8:	4680      	mov	r8, r0
 80087ba:	4689      	mov	r9, r1
 80087bc:	4620      	mov	r0, r4
 80087be:	4629      	mov	r1, r5
 80087c0:	f7f7 ff1a 	bl	80005f8 <__aeabi_dmul>
 80087c4:	460b      	mov	r3, r1
 80087c6:	4604      	mov	r4, r0
 80087c8:	460d      	mov	r5, r1
 80087ca:	4602      	mov	r2, r0
 80087cc:	4649      	mov	r1, r9
 80087ce:	4640      	mov	r0, r8
 80087d0:	f7f7 fd5c 	bl	800028c <__adddf3>
 80087d4:	4b19      	ldr	r3, [pc, #100]	; (800883c <__ieee754_pow+0x3fc>)
 80087d6:	4299      	cmp	r1, r3
 80087d8:	ec45 4b19 	vmov	d9, r4, r5
 80087dc:	4606      	mov	r6, r0
 80087de:	460f      	mov	r7, r1
 80087e0:	468b      	mov	fp, r1
 80087e2:	f340 82f1 	ble.w	8008dc8 <__ieee754_pow+0x988>
 80087e6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80087ea:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80087ee:	4303      	orrs	r3, r0
 80087f0:	f000 81e4 	beq.w	8008bbc <__ieee754_pow+0x77c>
 80087f4:	ec51 0b18 	vmov	r0, r1, d8
 80087f8:	2200      	movs	r2, #0
 80087fa:	2300      	movs	r3, #0
 80087fc:	f7f8 f96e 	bl	8000adc <__aeabi_dcmplt>
 8008800:	3800      	subs	r0, #0
 8008802:	bf18      	it	ne
 8008804:	2001      	movne	r0, #1
 8008806:	e72b      	b.n	8008660 <__ieee754_pow+0x220>
 8008808:	60000000 	.word	0x60000000
 800880c:	3ff71547 	.word	0x3ff71547
 8008810:	f85ddf44 	.word	0xf85ddf44
 8008814:	3e54ae0b 	.word	0x3e54ae0b
 8008818:	55555555 	.word	0x55555555
 800881c:	3fd55555 	.word	0x3fd55555
 8008820:	652b82fe 	.word	0x652b82fe
 8008824:	3ff71547 	.word	0x3ff71547
 8008828:	00000000 	.word	0x00000000
 800882c:	bff00000 	.word	0xbff00000
 8008830:	3ff00000 	.word	0x3ff00000
 8008834:	3fd00000 	.word	0x3fd00000
 8008838:	3fe00000 	.word	0x3fe00000
 800883c:	408fffff 	.word	0x408fffff
 8008840:	4bd5      	ldr	r3, [pc, #852]	; (8008b98 <__ieee754_pow+0x758>)
 8008842:	402b      	ands	r3, r5
 8008844:	2200      	movs	r2, #0
 8008846:	b92b      	cbnz	r3, 8008854 <__ieee754_pow+0x414>
 8008848:	4bd4      	ldr	r3, [pc, #848]	; (8008b9c <__ieee754_pow+0x75c>)
 800884a:	f7f7 fed5 	bl	80005f8 <__aeabi_dmul>
 800884e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008852:	460c      	mov	r4, r1
 8008854:	1523      	asrs	r3, r4, #20
 8008856:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800885a:	4413      	add	r3, r2
 800885c:	9305      	str	r3, [sp, #20]
 800885e:	4bd0      	ldr	r3, [pc, #832]	; (8008ba0 <__ieee754_pow+0x760>)
 8008860:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008864:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008868:	429c      	cmp	r4, r3
 800886a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800886e:	dd08      	ble.n	8008882 <__ieee754_pow+0x442>
 8008870:	4bcc      	ldr	r3, [pc, #816]	; (8008ba4 <__ieee754_pow+0x764>)
 8008872:	429c      	cmp	r4, r3
 8008874:	f340 8162 	ble.w	8008b3c <__ieee754_pow+0x6fc>
 8008878:	9b05      	ldr	r3, [sp, #20]
 800887a:	3301      	adds	r3, #1
 800887c:	9305      	str	r3, [sp, #20]
 800887e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008882:	2400      	movs	r4, #0
 8008884:	00e3      	lsls	r3, r4, #3
 8008886:	9307      	str	r3, [sp, #28]
 8008888:	4bc7      	ldr	r3, [pc, #796]	; (8008ba8 <__ieee754_pow+0x768>)
 800888a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800888e:	ed93 7b00 	vldr	d7, [r3]
 8008892:	4629      	mov	r1, r5
 8008894:	ec53 2b17 	vmov	r2, r3, d7
 8008898:	eeb0 9a47 	vmov.f32	s18, s14
 800889c:	eef0 9a67 	vmov.f32	s19, s15
 80088a0:	4682      	mov	sl, r0
 80088a2:	f7f7 fcf1 	bl	8000288 <__aeabi_dsub>
 80088a6:	4652      	mov	r2, sl
 80088a8:	4606      	mov	r6, r0
 80088aa:	460f      	mov	r7, r1
 80088ac:	462b      	mov	r3, r5
 80088ae:	ec51 0b19 	vmov	r0, r1, d9
 80088b2:	f7f7 fceb 	bl	800028c <__adddf3>
 80088b6:	4602      	mov	r2, r0
 80088b8:	460b      	mov	r3, r1
 80088ba:	2000      	movs	r0, #0
 80088bc:	49bb      	ldr	r1, [pc, #748]	; (8008bac <__ieee754_pow+0x76c>)
 80088be:	f7f7 ffc5 	bl	800084c <__aeabi_ddiv>
 80088c2:	ec41 0b1a 	vmov	d10, r0, r1
 80088c6:	4602      	mov	r2, r0
 80088c8:	460b      	mov	r3, r1
 80088ca:	4630      	mov	r0, r6
 80088cc:	4639      	mov	r1, r7
 80088ce:	f7f7 fe93 	bl	80005f8 <__aeabi_dmul>
 80088d2:	2300      	movs	r3, #0
 80088d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088d8:	9302      	str	r3, [sp, #8]
 80088da:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80088de:	46ab      	mov	fp, r5
 80088e0:	106d      	asrs	r5, r5, #1
 80088e2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80088e6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80088ea:	ec41 0b18 	vmov	d8, r0, r1
 80088ee:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80088f2:	2200      	movs	r2, #0
 80088f4:	4640      	mov	r0, r8
 80088f6:	4649      	mov	r1, r9
 80088f8:	4614      	mov	r4, r2
 80088fa:	461d      	mov	r5, r3
 80088fc:	f7f7 fe7c 	bl	80005f8 <__aeabi_dmul>
 8008900:	4602      	mov	r2, r0
 8008902:	460b      	mov	r3, r1
 8008904:	4630      	mov	r0, r6
 8008906:	4639      	mov	r1, r7
 8008908:	f7f7 fcbe 	bl	8000288 <__aeabi_dsub>
 800890c:	ec53 2b19 	vmov	r2, r3, d9
 8008910:	4606      	mov	r6, r0
 8008912:	460f      	mov	r7, r1
 8008914:	4620      	mov	r0, r4
 8008916:	4629      	mov	r1, r5
 8008918:	f7f7 fcb6 	bl	8000288 <__aeabi_dsub>
 800891c:	4602      	mov	r2, r0
 800891e:	460b      	mov	r3, r1
 8008920:	4650      	mov	r0, sl
 8008922:	4659      	mov	r1, fp
 8008924:	f7f7 fcb0 	bl	8000288 <__aeabi_dsub>
 8008928:	4642      	mov	r2, r8
 800892a:	464b      	mov	r3, r9
 800892c:	f7f7 fe64 	bl	80005f8 <__aeabi_dmul>
 8008930:	4602      	mov	r2, r0
 8008932:	460b      	mov	r3, r1
 8008934:	4630      	mov	r0, r6
 8008936:	4639      	mov	r1, r7
 8008938:	f7f7 fca6 	bl	8000288 <__aeabi_dsub>
 800893c:	ec53 2b1a 	vmov	r2, r3, d10
 8008940:	f7f7 fe5a 	bl	80005f8 <__aeabi_dmul>
 8008944:	ec53 2b18 	vmov	r2, r3, d8
 8008948:	ec41 0b19 	vmov	d9, r0, r1
 800894c:	ec51 0b18 	vmov	r0, r1, d8
 8008950:	f7f7 fe52 	bl	80005f8 <__aeabi_dmul>
 8008954:	a37c      	add	r3, pc, #496	; (adr r3, 8008b48 <__ieee754_pow+0x708>)
 8008956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800895a:	4604      	mov	r4, r0
 800895c:	460d      	mov	r5, r1
 800895e:	f7f7 fe4b 	bl	80005f8 <__aeabi_dmul>
 8008962:	a37b      	add	r3, pc, #492	; (adr r3, 8008b50 <__ieee754_pow+0x710>)
 8008964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008968:	f7f7 fc90 	bl	800028c <__adddf3>
 800896c:	4622      	mov	r2, r4
 800896e:	462b      	mov	r3, r5
 8008970:	f7f7 fe42 	bl	80005f8 <__aeabi_dmul>
 8008974:	a378      	add	r3, pc, #480	; (adr r3, 8008b58 <__ieee754_pow+0x718>)
 8008976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800897a:	f7f7 fc87 	bl	800028c <__adddf3>
 800897e:	4622      	mov	r2, r4
 8008980:	462b      	mov	r3, r5
 8008982:	f7f7 fe39 	bl	80005f8 <__aeabi_dmul>
 8008986:	a376      	add	r3, pc, #472	; (adr r3, 8008b60 <__ieee754_pow+0x720>)
 8008988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898c:	f7f7 fc7e 	bl	800028c <__adddf3>
 8008990:	4622      	mov	r2, r4
 8008992:	462b      	mov	r3, r5
 8008994:	f7f7 fe30 	bl	80005f8 <__aeabi_dmul>
 8008998:	a373      	add	r3, pc, #460	; (adr r3, 8008b68 <__ieee754_pow+0x728>)
 800899a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800899e:	f7f7 fc75 	bl	800028c <__adddf3>
 80089a2:	4622      	mov	r2, r4
 80089a4:	462b      	mov	r3, r5
 80089a6:	f7f7 fe27 	bl	80005f8 <__aeabi_dmul>
 80089aa:	a371      	add	r3, pc, #452	; (adr r3, 8008b70 <__ieee754_pow+0x730>)
 80089ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b0:	f7f7 fc6c 	bl	800028c <__adddf3>
 80089b4:	4622      	mov	r2, r4
 80089b6:	4606      	mov	r6, r0
 80089b8:	460f      	mov	r7, r1
 80089ba:	462b      	mov	r3, r5
 80089bc:	4620      	mov	r0, r4
 80089be:	4629      	mov	r1, r5
 80089c0:	f7f7 fe1a 	bl	80005f8 <__aeabi_dmul>
 80089c4:	4602      	mov	r2, r0
 80089c6:	460b      	mov	r3, r1
 80089c8:	4630      	mov	r0, r6
 80089ca:	4639      	mov	r1, r7
 80089cc:	f7f7 fe14 	bl	80005f8 <__aeabi_dmul>
 80089d0:	4642      	mov	r2, r8
 80089d2:	4604      	mov	r4, r0
 80089d4:	460d      	mov	r5, r1
 80089d6:	464b      	mov	r3, r9
 80089d8:	ec51 0b18 	vmov	r0, r1, d8
 80089dc:	f7f7 fc56 	bl	800028c <__adddf3>
 80089e0:	ec53 2b19 	vmov	r2, r3, d9
 80089e4:	f7f7 fe08 	bl	80005f8 <__aeabi_dmul>
 80089e8:	4622      	mov	r2, r4
 80089ea:	462b      	mov	r3, r5
 80089ec:	f7f7 fc4e 	bl	800028c <__adddf3>
 80089f0:	4642      	mov	r2, r8
 80089f2:	4682      	mov	sl, r0
 80089f4:	468b      	mov	fp, r1
 80089f6:	464b      	mov	r3, r9
 80089f8:	4640      	mov	r0, r8
 80089fa:	4649      	mov	r1, r9
 80089fc:	f7f7 fdfc 	bl	80005f8 <__aeabi_dmul>
 8008a00:	4b6b      	ldr	r3, [pc, #428]	; (8008bb0 <__ieee754_pow+0x770>)
 8008a02:	2200      	movs	r2, #0
 8008a04:	4606      	mov	r6, r0
 8008a06:	460f      	mov	r7, r1
 8008a08:	f7f7 fc40 	bl	800028c <__adddf3>
 8008a0c:	4652      	mov	r2, sl
 8008a0e:	465b      	mov	r3, fp
 8008a10:	f7f7 fc3c 	bl	800028c <__adddf3>
 8008a14:	2000      	movs	r0, #0
 8008a16:	4604      	mov	r4, r0
 8008a18:	460d      	mov	r5, r1
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	460b      	mov	r3, r1
 8008a1e:	4640      	mov	r0, r8
 8008a20:	4649      	mov	r1, r9
 8008a22:	f7f7 fde9 	bl	80005f8 <__aeabi_dmul>
 8008a26:	4b62      	ldr	r3, [pc, #392]	; (8008bb0 <__ieee754_pow+0x770>)
 8008a28:	4680      	mov	r8, r0
 8008a2a:	4689      	mov	r9, r1
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	4620      	mov	r0, r4
 8008a30:	4629      	mov	r1, r5
 8008a32:	f7f7 fc29 	bl	8000288 <__aeabi_dsub>
 8008a36:	4632      	mov	r2, r6
 8008a38:	463b      	mov	r3, r7
 8008a3a:	f7f7 fc25 	bl	8000288 <__aeabi_dsub>
 8008a3e:	4602      	mov	r2, r0
 8008a40:	460b      	mov	r3, r1
 8008a42:	4650      	mov	r0, sl
 8008a44:	4659      	mov	r1, fp
 8008a46:	f7f7 fc1f 	bl	8000288 <__aeabi_dsub>
 8008a4a:	ec53 2b18 	vmov	r2, r3, d8
 8008a4e:	f7f7 fdd3 	bl	80005f8 <__aeabi_dmul>
 8008a52:	4622      	mov	r2, r4
 8008a54:	4606      	mov	r6, r0
 8008a56:	460f      	mov	r7, r1
 8008a58:	462b      	mov	r3, r5
 8008a5a:	ec51 0b19 	vmov	r0, r1, d9
 8008a5e:	f7f7 fdcb 	bl	80005f8 <__aeabi_dmul>
 8008a62:	4602      	mov	r2, r0
 8008a64:	460b      	mov	r3, r1
 8008a66:	4630      	mov	r0, r6
 8008a68:	4639      	mov	r1, r7
 8008a6a:	f7f7 fc0f 	bl	800028c <__adddf3>
 8008a6e:	4606      	mov	r6, r0
 8008a70:	460f      	mov	r7, r1
 8008a72:	4602      	mov	r2, r0
 8008a74:	460b      	mov	r3, r1
 8008a76:	4640      	mov	r0, r8
 8008a78:	4649      	mov	r1, r9
 8008a7a:	f7f7 fc07 	bl	800028c <__adddf3>
 8008a7e:	a33e      	add	r3, pc, #248	; (adr r3, 8008b78 <__ieee754_pow+0x738>)
 8008a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a84:	2000      	movs	r0, #0
 8008a86:	4604      	mov	r4, r0
 8008a88:	460d      	mov	r5, r1
 8008a8a:	f7f7 fdb5 	bl	80005f8 <__aeabi_dmul>
 8008a8e:	4642      	mov	r2, r8
 8008a90:	ec41 0b18 	vmov	d8, r0, r1
 8008a94:	464b      	mov	r3, r9
 8008a96:	4620      	mov	r0, r4
 8008a98:	4629      	mov	r1, r5
 8008a9a:	f7f7 fbf5 	bl	8000288 <__aeabi_dsub>
 8008a9e:	4602      	mov	r2, r0
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	4630      	mov	r0, r6
 8008aa4:	4639      	mov	r1, r7
 8008aa6:	f7f7 fbef 	bl	8000288 <__aeabi_dsub>
 8008aaa:	a335      	add	r3, pc, #212	; (adr r3, 8008b80 <__ieee754_pow+0x740>)
 8008aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab0:	f7f7 fda2 	bl	80005f8 <__aeabi_dmul>
 8008ab4:	a334      	add	r3, pc, #208	; (adr r3, 8008b88 <__ieee754_pow+0x748>)
 8008ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aba:	4606      	mov	r6, r0
 8008abc:	460f      	mov	r7, r1
 8008abe:	4620      	mov	r0, r4
 8008ac0:	4629      	mov	r1, r5
 8008ac2:	f7f7 fd99 	bl	80005f8 <__aeabi_dmul>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	460b      	mov	r3, r1
 8008aca:	4630      	mov	r0, r6
 8008acc:	4639      	mov	r1, r7
 8008ace:	f7f7 fbdd 	bl	800028c <__adddf3>
 8008ad2:	9a07      	ldr	r2, [sp, #28]
 8008ad4:	4b37      	ldr	r3, [pc, #220]	; (8008bb4 <__ieee754_pow+0x774>)
 8008ad6:	4413      	add	r3, r2
 8008ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008adc:	f7f7 fbd6 	bl	800028c <__adddf3>
 8008ae0:	4682      	mov	sl, r0
 8008ae2:	9805      	ldr	r0, [sp, #20]
 8008ae4:	468b      	mov	fp, r1
 8008ae6:	f7f7 fd1d 	bl	8000524 <__aeabi_i2d>
 8008aea:	9a07      	ldr	r2, [sp, #28]
 8008aec:	4b32      	ldr	r3, [pc, #200]	; (8008bb8 <__ieee754_pow+0x778>)
 8008aee:	4413      	add	r3, r2
 8008af0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008af4:	4606      	mov	r6, r0
 8008af6:	460f      	mov	r7, r1
 8008af8:	4652      	mov	r2, sl
 8008afa:	465b      	mov	r3, fp
 8008afc:	ec51 0b18 	vmov	r0, r1, d8
 8008b00:	f7f7 fbc4 	bl	800028c <__adddf3>
 8008b04:	4642      	mov	r2, r8
 8008b06:	464b      	mov	r3, r9
 8008b08:	f7f7 fbc0 	bl	800028c <__adddf3>
 8008b0c:	4632      	mov	r2, r6
 8008b0e:	463b      	mov	r3, r7
 8008b10:	f7f7 fbbc 	bl	800028c <__adddf3>
 8008b14:	2000      	movs	r0, #0
 8008b16:	4632      	mov	r2, r6
 8008b18:	463b      	mov	r3, r7
 8008b1a:	4604      	mov	r4, r0
 8008b1c:	460d      	mov	r5, r1
 8008b1e:	f7f7 fbb3 	bl	8000288 <__aeabi_dsub>
 8008b22:	4642      	mov	r2, r8
 8008b24:	464b      	mov	r3, r9
 8008b26:	f7f7 fbaf 	bl	8000288 <__aeabi_dsub>
 8008b2a:	ec53 2b18 	vmov	r2, r3, d8
 8008b2e:	f7f7 fbab 	bl	8000288 <__aeabi_dsub>
 8008b32:	4602      	mov	r2, r0
 8008b34:	460b      	mov	r3, r1
 8008b36:	4650      	mov	r0, sl
 8008b38:	4659      	mov	r1, fp
 8008b3a:	e610      	b.n	800875e <__ieee754_pow+0x31e>
 8008b3c:	2401      	movs	r4, #1
 8008b3e:	e6a1      	b.n	8008884 <__ieee754_pow+0x444>
 8008b40:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8008b90 <__ieee754_pow+0x750>
 8008b44:	e617      	b.n	8008776 <__ieee754_pow+0x336>
 8008b46:	bf00      	nop
 8008b48:	4a454eef 	.word	0x4a454eef
 8008b4c:	3fca7e28 	.word	0x3fca7e28
 8008b50:	93c9db65 	.word	0x93c9db65
 8008b54:	3fcd864a 	.word	0x3fcd864a
 8008b58:	a91d4101 	.word	0xa91d4101
 8008b5c:	3fd17460 	.word	0x3fd17460
 8008b60:	518f264d 	.word	0x518f264d
 8008b64:	3fd55555 	.word	0x3fd55555
 8008b68:	db6fabff 	.word	0xdb6fabff
 8008b6c:	3fdb6db6 	.word	0x3fdb6db6
 8008b70:	33333303 	.word	0x33333303
 8008b74:	3fe33333 	.word	0x3fe33333
 8008b78:	e0000000 	.word	0xe0000000
 8008b7c:	3feec709 	.word	0x3feec709
 8008b80:	dc3a03fd 	.word	0xdc3a03fd
 8008b84:	3feec709 	.word	0x3feec709
 8008b88:	145b01f5 	.word	0x145b01f5
 8008b8c:	be3e2fe0 	.word	0xbe3e2fe0
 8008b90:	00000000 	.word	0x00000000
 8008b94:	3ff00000 	.word	0x3ff00000
 8008b98:	7ff00000 	.word	0x7ff00000
 8008b9c:	43400000 	.word	0x43400000
 8008ba0:	0003988e 	.word	0x0003988e
 8008ba4:	000bb679 	.word	0x000bb679
 8008ba8:	08009620 	.word	0x08009620
 8008bac:	3ff00000 	.word	0x3ff00000
 8008bb0:	40080000 	.word	0x40080000
 8008bb4:	08009640 	.word	0x08009640
 8008bb8:	08009630 	.word	0x08009630
 8008bbc:	a3b5      	add	r3, pc, #724	; (adr r3, 8008e94 <__ieee754_pow+0xa54>)
 8008bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc2:	4640      	mov	r0, r8
 8008bc4:	4649      	mov	r1, r9
 8008bc6:	f7f7 fb61 	bl	800028c <__adddf3>
 8008bca:	4622      	mov	r2, r4
 8008bcc:	ec41 0b1a 	vmov	d10, r0, r1
 8008bd0:	462b      	mov	r3, r5
 8008bd2:	4630      	mov	r0, r6
 8008bd4:	4639      	mov	r1, r7
 8008bd6:	f7f7 fb57 	bl	8000288 <__aeabi_dsub>
 8008bda:	4602      	mov	r2, r0
 8008bdc:	460b      	mov	r3, r1
 8008bde:	ec51 0b1a 	vmov	r0, r1, d10
 8008be2:	f7f7 ff99 	bl	8000b18 <__aeabi_dcmpgt>
 8008be6:	2800      	cmp	r0, #0
 8008be8:	f47f ae04 	bne.w	80087f4 <__ieee754_pow+0x3b4>
 8008bec:	4aa4      	ldr	r2, [pc, #656]	; (8008e80 <__ieee754_pow+0xa40>)
 8008bee:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	f340 8108 	ble.w	8008e08 <__ieee754_pow+0x9c8>
 8008bf8:	151b      	asrs	r3, r3, #20
 8008bfa:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8008bfe:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008c02:	fa4a f303 	asr.w	r3, sl, r3
 8008c06:	445b      	add	r3, fp
 8008c08:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8008c0c:	4e9d      	ldr	r6, [pc, #628]	; (8008e84 <__ieee754_pow+0xa44>)
 8008c0e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8008c12:	4116      	asrs	r6, r2
 8008c14:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8008c18:	2000      	movs	r0, #0
 8008c1a:	ea23 0106 	bic.w	r1, r3, r6
 8008c1e:	f1c2 0214 	rsb	r2, r2, #20
 8008c22:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8008c26:	fa4a fa02 	asr.w	sl, sl, r2
 8008c2a:	f1bb 0f00 	cmp.w	fp, #0
 8008c2e:	4602      	mov	r2, r0
 8008c30:	460b      	mov	r3, r1
 8008c32:	4620      	mov	r0, r4
 8008c34:	4629      	mov	r1, r5
 8008c36:	bfb8      	it	lt
 8008c38:	f1ca 0a00 	rsblt	sl, sl, #0
 8008c3c:	f7f7 fb24 	bl	8000288 <__aeabi_dsub>
 8008c40:	ec41 0b19 	vmov	d9, r0, r1
 8008c44:	4642      	mov	r2, r8
 8008c46:	464b      	mov	r3, r9
 8008c48:	ec51 0b19 	vmov	r0, r1, d9
 8008c4c:	f7f7 fb1e 	bl	800028c <__adddf3>
 8008c50:	a37b      	add	r3, pc, #492	; (adr r3, 8008e40 <__ieee754_pow+0xa00>)
 8008c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c56:	2000      	movs	r0, #0
 8008c58:	4604      	mov	r4, r0
 8008c5a:	460d      	mov	r5, r1
 8008c5c:	f7f7 fccc 	bl	80005f8 <__aeabi_dmul>
 8008c60:	ec53 2b19 	vmov	r2, r3, d9
 8008c64:	4606      	mov	r6, r0
 8008c66:	460f      	mov	r7, r1
 8008c68:	4620      	mov	r0, r4
 8008c6a:	4629      	mov	r1, r5
 8008c6c:	f7f7 fb0c 	bl	8000288 <__aeabi_dsub>
 8008c70:	4602      	mov	r2, r0
 8008c72:	460b      	mov	r3, r1
 8008c74:	4640      	mov	r0, r8
 8008c76:	4649      	mov	r1, r9
 8008c78:	f7f7 fb06 	bl	8000288 <__aeabi_dsub>
 8008c7c:	a372      	add	r3, pc, #456	; (adr r3, 8008e48 <__ieee754_pow+0xa08>)
 8008c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c82:	f7f7 fcb9 	bl	80005f8 <__aeabi_dmul>
 8008c86:	a372      	add	r3, pc, #456	; (adr r3, 8008e50 <__ieee754_pow+0xa10>)
 8008c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c8c:	4680      	mov	r8, r0
 8008c8e:	4689      	mov	r9, r1
 8008c90:	4620      	mov	r0, r4
 8008c92:	4629      	mov	r1, r5
 8008c94:	f7f7 fcb0 	bl	80005f8 <__aeabi_dmul>
 8008c98:	4602      	mov	r2, r0
 8008c9a:	460b      	mov	r3, r1
 8008c9c:	4640      	mov	r0, r8
 8008c9e:	4649      	mov	r1, r9
 8008ca0:	f7f7 faf4 	bl	800028c <__adddf3>
 8008ca4:	4604      	mov	r4, r0
 8008ca6:	460d      	mov	r5, r1
 8008ca8:	4602      	mov	r2, r0
 8008caa:	460b      	mov	r3, r1
 8008cac:	4630      	mov	r0, r6
 8008cae:	4639      	mov	r1, r7
 8008cb0:	f7f7 faec 	bl	800028c <__adddf3>
 8008cb4:	4632      	mov	r2, r6
 8008cb6:	463b      	mov	r3, r7
 8008cb8:	4680      	mov	r8, r0
 8008cba:	4689      	mov	r9, r1
 8008cbc:	f7f7 fae4 	bl	8000288 <__aeabi_dsub>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	460b      	mov	r3, r1
 8008cc4:	4620      	mov	r0, r4
 8008cc6:	4629      	mov	r1, r5
 8008cc8:	f7f7 fade 	bl	8000288 <__aeabi_dsub>
 8008ccc:	4642      	mov	r2, r8
 8008cce:	4606      	mov	r6, r0
 8008cd0:	460f      	mov	r7, r1
 8008cd2:	464b      	mov	r3, r9
 8008cd4:	4640      	mov	r0, r8
 8008cd6:	4649      	mov	r1, r9
 8008cd8:	f7f7 fc8e 	bl	80005f8 <__aeabi_dmul>
 8008cdc:	a35e      	add	r3, pc, #376	; (adr r3, 8008e58 <__ieee754_pow+0xa18>)
 8008cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ce2:	4604      	mov	r4, r0
 8008ce4:	460d      	mov	r5, r1
 8008ce6:	f7f7 fc87 	bl	80005f8 <__aeabi_dmul>
 8008cea:	a35d      	add	r3, pc, #372	; (adr r3, 8008e60 <__ieee754_pow+0xa20>)
 8008cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf0:	f7f7 faca 	bl	8000288 <__aeabi_dsub>
 8008cf4:	4622      	mov	r2, r4
 8008cf6:	462b      	mov	r3, r5
 8008cf8:	f7f7 fc7e 	bl	80005f8 <__aeabi_dmul>
 8008cfc:	a35a      	add	r3, pc, #360	; (adr r3, 8008e68 <__ieee754_pow+0xa28>)
 8008cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d02:	f7f7 fac3 	bl	800028c <__adddf3>
 8008d06:	4622      	mov	r2, r4
 8008d08:	462b      	mov	r3, r5
 8008d0a:	f7f7 fc75 	bl	80005f8 <__aeabi_dmul>
 8008d0e:	a358      	add	r3, pc, #352	; (adr r3, 8008e70 <__ieee754_pow+0xa30>)
 8008d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d14:	f7f7 fab8 	bl	8000288 <__aeabi_dsub>
 8008d18:	4622      	mov	r2, r4
 8008d1a:	462b      	mov	r3, r5
 8008d1c:	f7f7 fc6c 	bl	80005f8 <__aeabi_dmul>
 8008d20:	a355      	add	r3, pc, #340	; (adr r3, 8008e78 <__ieee754_pow+0xa38>)
 8008d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d26:	f7f7 fab1 	bl	800028c <__adddf3>
 8008d2a:	4622      	mov	r2, r4
 8008d2c:	462b      	mov	r3, r5
 8008d2e:	f7f7 fc63 	bl	80005f8 <__aeabi_dmul>
 8008d32:	4602      	mov	r2, r0
 8008d34:	460b      	mov	r3, r1
 8008d36:	4640      	mov	r0, r8
 8008d38:	4649      	mov	r1, r9
 8008d3a:	f7f7 faa5 	bl	8000288 <__aeabi_dsub>
 8008d3e:	4604      	mov	r4, r0
 8008d40:	460d      	mov	r5, r1
 8008d42:	4602      	mov	r2, r0
 8008d44:	460b      	mov	r3, r1
 8008d46:	4640      	mov	r0, r8
 8008d48:	4649      	mov	r1, r9
 8008d4a:	f7f7 fc55 	bl	80005f8 <__aeabi_dmul>
 8008d4e:	2200      	movs	r2, #0
 8008d50:	ec41 0b19 	vmov	d9, r0, r1
 8008d54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008d58:	4620      	mov	r0, r4
 8008d5a:	4629      	mov	r1, r5
 8008d5c:	f7f7 fa94 	bl	8000288 <__aeabi_dsub>
 8008d60:	4602      	mov	r2, r0
 8008d62:	460b      	mov	r3, r1
 8008d64:	ec51 0b19 	vmov	r0, r1, d9
 8008d68:	f7f7 fd70 	bl	800084c <__aeabi_ddiv>
 8008d6c:	4632      	mov	r2, r6
 8008d6e:	4604      	mov	r4, r0
 8008d70:	460d      	mov	r5, r1
 8008d72:	463b      	mov	r3, r7
 8008d74:	4640      	mov	r0, r8
 8008d76:	4649      	mov	r1, r9
 8008d78:	f7f7 fc3e 	bl	80005f8 <__aeabi_dmul>
 8008d7c:	4632      	mov	r2, r6
 8008d7e:	463b      	mov	r3, r7
 8008d80:	f7f7 fa84 	bl	800028c <__adddf3>
 8008d84:	4602      	mov	r2, r0
 8008d86:	460b      	mov	r3, r1
 8008d88:	4620      	mov	r0, r4
 8008d8a:	4629      	mov	r1, r5
 8008d8c:	f7f7 fa7c 	bl	8000288 <__aeabi_dsub>
 8008d90:	4642      	mov	r2, r8
 8008d92:	464b      	mov	r3, r9
 8008d94:	f7f7 fa78 	bl	8000288 <__aeabi_dsub>
 8008d98:	460b      	mov	r3, r1
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	493a      	ldr	r1, [pc, #232]	; (8008e88 <__ieee754_pow+0xa48>)
 8008d9e:	2000      	movs	r0, #0
 8008da0:	f7f7 fa72 	bl	8000288 <__aeabi_dsub>
 8008da4:	ec41 0b10 	vmov	d0, r0, r1
 8008da8:	ee10 3a90 	vmov	r3, s1
 8008dac:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008db0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008db4:	da2b      	bge.n	8008e0e <__ieee754_pow+0x9ce>
 8008db6:	4650      	mov	r0, sl
 8008db8:	f000 f966 	bl	8009088 <scalbn>
 8008dbc:	ec51 0b10 	vmov	r0, r1, d0
 8008dc0:	ec53 2b18 	vmov	r2, r3, d8
 8008dc4:	f7ff bbed 	b.w	80085a2 <__ieee754_pow+0x162>
 8008dc8:	4b30      	ldr	r3, [pc, #192]	; (8008e8c <__ieee754_pow+0xa4c>)
 8008dca:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8008dce:	429e      	cmp	r6, r3
 8008dd0:	f77f af0c 	ble.w	8008bec <__ieee754_pow+0x7ac>
 8008dd4:	4b2e      	ldr	r3, [pc, #184]	; (8008e90 <__ieee754_pow+0xa50>)
 8008dd6:	440b      	add	r3, r1
 8008dd8:	4303      	orrs	r3, r0
 8008dda:	d009      	beq.n	8008df0 <__ieee754_pow+0x9b0>
 8008ddc:	ec51 0b18 	vmov	r0, r1, d8
 8008de0:	2200      	movs	r2, #0
 8008de2:	2300      	movs	r3, #0
 8008de4:	f7f7 fe7a 	bl	8000adc <__aeabi_dcmplt>
 8008de8:	3800      	subs	r0, #0
 8008dea:	bf18      	it	ne
 8008dec:	2001      	movne	r0, #1
 8008dee:	e447      	b.n	8008680 <__ieee754_pow+0x240>
 8008df0:	4622      	mov	r2, r4
 8008df2:	462b      	mov	r3, r5
 8008df4:	f7f7 fa48 	bl	8000288 <__aeabi_dsub>
 8008df8:	4642      	mov	r2, r8
 8008dfa:	464b      	mov	r3, r9
 8008dfc:	f7f7 fe82 	bl	8000b04 <__aeabi_dcmpge>
 8008e00:	2800      	cmp	r0, #0
 8008e02:	f43f aef3 	beq.w	8008bec <__ieee754_pow+0x7ac>
 8008e06:	e7e9      	b.n	8008ddc <__ieee754_pow+0x99c>
 8008e08:	f04f 0a00 	mov.w	sl, #0
 8008e0c:	e71a      	b.n	8008c44 <__ieee754_pow+0x804>
 8008e0e:	ec51 0b10 	vmov	r0, r1, d0
 8008e12:	4619      	mov	r1, r3
 8008e14:	e7d4      	b.n	8008dc0 <__ieee754_pow+0x980>
 8008e16:	491c      	ldr	r1, [pc, #112]	; (8008e88 <__ieee754_pow+0xa48>)
 8008e18:	2000      	movs	r0, #0
 8008e1a:	f7ff bb30 	b.w	800847e <__ieee754_pow+0x3e>
 8008e1e:	2000      	movs	r0, #0
 8008e20:	2100      	movs	r1, #0
 8008e22:	f7ff bb2c 	b.w	800847e <__ieee754_pow+0x3e>
 8008e26:	4630      	mov	r0, r6
 8008e28:	4639      	mov	r1, r7
 8008e2a:	f7ff bb28 	b.w	800847e <__ieee754_pow+0x3e>
 8008e2e:	9204      	str	r2, [sp, #16]
 8008e30:	f7ff bb7a 	b.w	8008528 <__ieee754_pow+0xe8>
 8008e34:	2300      	movs	r3, #0
 8008e36:	f7ff bb64 	b.w	8008502 <__ieee754_pow+0xc2>
 8008e3a:	bf00      	nop
 8008e3c:	f3af 8000 	nop.w
 8008e40:	00000000 	.word	0x00000000
 8008e44:	3fe62e43 	.word	0x3fe62e43
 8008e48:	fefa39ef 	.word	0xfefa39ef
 8008e4c:	3fe62e42 	.word	0x3fe62e42
 8008e50:	0ca86c39 	.word	0x0ca86c39
 8008e54:	be205c61 	.word	0xbe205c61
 8008e58:	72bea4d0 	.word	0x72bea4d0
 8008e5c:	3e663769 	.word	0x3e663769
 8008e60:	c5d26bf1 	.word	0xc5d26bf1
 8008e64:	3ebbbd41 	.word	0x3ebbbd41
 8008e68:	af25de2c 	.word	0xaf25de2c
 8008e6c:	3f11566a 	.word	0x3f11566a
 8008e70:	16bebd93 	.word	0x16bebd93
 8008e74:	3f66c16c 	.word	0x3f66c16c
 8008e78:	5555553e 	.word	0x5555553e
 8008e7c:	3fc55555 	.word	0x3fc55555
 8008e80:	3fe00000 	.word	0x3fe00000
 8008e84:	000fffff 	.word	0x000fffff
 8008e88:	3ff00000 	.word	0x3ff00000
 8008e8c:	4090cbff 	.word	0x4090cbff
 8008e90:	3f6f3400 	.word	0x3f6f3400
 8008e94:	652b82fe 	.word	0x652b82fe
 8008e98:	3c971547 	.word	0x3c971547

08008e9c <__ieee754_sqrt>:
 8008e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ea0:	ec55 4b10 	vmov	r4, r5, d0
 8008ea4:	4e55      	ldr	r6, [pc, #340]	; (8008ffc <__ieee754_sqrt+0x160>)
 8008ea6:	43ae      	bics	r6, r5
 8008ea8:	ee10 0a10 	vmov	r0, s0
 8008eac:	ee10 3a10 	vmov	r3, s0
 8008eb0:	462a      	mov	r2, r5
 8008eb2:	4629      	mov	r1, r5
 8008eb4:	d110      	bne.n	8008ed8 <__ieee754_sqrt+0x3c>
 8008eb6:	ee10 2a10 	vmov	r2, s0
 8008eba:	462b      	mov	r3, r5
 8008ebc:	f7f7 fb9c 	bl	80005f8 <__aeabi_dmul>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	460b      	mov	r3, r1
 8008ec4:	4620      	mov	r0, r4
 8008ec6:	4629      	mov	r1, r5
 8008ec8:	f7f7 f9e0 	bl	800028c <__adddf3>
 8008ecc:	4604      	mov	r4, r0
 8008ece:	460d      	mov	r5, r1
 8008ed0:	ec45 4b10 	vmov	d0, r4, r5
 8008ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ed8:	2d00      	cmp	r5, #0
 8008eda:	dc10      	bgt.n	8008efe <__ieee754_sqrt+0x62>
 8008edc:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008ee0:	4330      	orrs	r0, r6
 8008ee2:	d0f5      	beq.n	8008ed0 <__ieee754_sqrt+0x34>
 8008ee4:	b15d      	cbz	r5, 8008efe <__ieee754_sqrt+0x62>
 8008ee6:	ee10 2a10 	vmov	r2, s0
 8008eea:	462b      	mov	r3, r5
 8008eec:	ee10 0a10 	vmov	r0, s0
 8008ef0:	f7f7 f9ca 	bl	8000288 <__aeabi_dsub>
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	460b      	mov	r3, r1
 8008ef8:	f7f7 fca8 	bl	800084c <__aeabi_ddiv>
 8008efc:	e7e6      	b.n	8008ecc <__ieee754_sqrt+0x30>
 8008efe:	1512      	asrs	r2, r2, #20
 8008f00:	d074      	beq.n	8008fec <__ieee754_sqrt+0x150>
 8008f02:	07d4      	lsls	r4, r2, #31
 8008f04:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8008f08:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8008f0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8008f10:	bf5e      	ittt	pl
 8008f12:	0fda      	lsrpl	r2, r3, #31
 8008f14:	005b      	lslpl	r3, r3, #1
 8008f16:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8008f1a:	2400      	movs	r4, #0
 8008f1c:	0fda      	lsrs	r2, r3, #31
 8008f1e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8008f22:	107f      	asrs	r7, r7, #1
 8008f24:	005b      	lsls	r3, r3, #1
 8008f26:	2516      	movs	r5, #22
 8008f28:	4620      	mov	r0, r4
 8008f2a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8008f2e:	1886      	adds	r6, r0, r2
 8008f30:	428e      	cmp	r6, r1
 8008f32:	bfde      	ittt	le
 8008f34:	1b89      	suble	r1, r1, r6
 8008f36:	18b0      	addle	r0, r6, r2
 8008f38:	18a4      	addle	r4, r4, r2
 8008f3a:	0049      	lsls	r1, r1, #1
 8008f3c:	3d01      	subs	r5, #1
 8008f3e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8008f42:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8008f46:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008f4a:	d1f0      	bne.n	8008f2e <__ieee754_sqrt+0x92>
 8008f4c:	462a      	mov	r2, r5
 8008f4e:	f04f 0e20 	mov.w	lr, #32
 8008f52:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008f56:	4281      	cmp	r1, r0
 8008f58:	eb06 0c05 	add.w	ip, r6, r5
 8008f5c:	dc02      	bgt.n	8008f64 <__ieee754_sqrt+0xc8>
 8008f5e:	d113      	bne.n	8008f88 <__ieee754_sqrt+0xec>
 8008f60:	459c      	cmp	ip, r3
 8008f62:	d811      	bhi.n	8008f88 <__ieee754_sqrt+0xec>
 8008f64:	f1bc 0f00 	cmp.w	ip, #0
 8008f68:	eb0c 0506 	add.w	r5, ip, r6
 8008f6c:	da43      	bge.n	8008ff6 <__ieee754_sqrt+0x15a>
 8008f6e:	2d00      	cmp	r5, #0
 8008f70:	db41      	blt.n	8008ff6 <__ieee754_sqrt+0x15a>
 8008f72:	f100 0801 	add.w	r8, r0, #1
 8008f76:	1a09      	subs	r1, r1, r0
 8008f78:	459c      	cmp	ip, r3
 8008f7a:	bf88      	it	hi
 8008f7c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8008f80:	eba3 030c 	sub.w	r3, r3, ip
 8008f84:	4432      	add	r2, r6
 8008f86:	4640      	mov	r0, r8
 8008f88:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8008f8c:	f1be 0e01 	subs.w	lr, lr, #1
 8008f90:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8008f94:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008f98:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008f9c:	d1db      	bne.n	8008f56 <__ieee754_sqrt+0xba>
 8008f9e:	430b      	orrs	r3, r1
 8008fa0:	d006      	beq.n	8008fb0 <__ieee754_sqrt+0x114>
 8008fa2:	1c50      	adds	r0, r2, #1
 8008fa4:	bf13      	iteet	ne
 8008fa6:	3201      	addne	r2, #1
 8008fa8:	3401      	addeq	r4, #1
 8008faa:	4672      	moveq	r2, lr
 8008fac:	f022 0201 	bicne.w	r2, r2, #1
 8008fb0:	1063      	asrs	r3, r4, #1
 8008fb2:	0852      	lsrs	r2, r2, #1
 8008fb4:	07e1      	lsls	r1, r4, #31
 8008fb6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8008fba:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8008fbe:	bf48      	it	mi
 8008fc0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8008fc4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8008fc8:	4614      	mov	r4, r2
 8008fca:	e781      	b.n	8008ed0 <__ieee754_sqrt+0x34>
 8008fcc:	0ad9      	lsrs	r1, r3, #11
 8008fce:	3815      	subs	r0, #21
 8008fd0:	055b      	lsls	r3, r3, #21
 8008fd2:	2900      	cmp	r1, #0
 8008fd4:	d0fa      	beq.n	8008fcc <__ieee754_sqrt+0x130>
 8008fd6:	02cd      	lsls	r5, r1, #11
 8008fd8:	d50a      	bpl.n	8008ff0 <__ieee754_sqrt+0x154>
 8008fda:	f1c2 0420 	rsb	r4, r2, #32
 8008fde:	fa23 f404 	lsr.w	r4, r3, r4
 8008fe2:	1e55      	subs	r5, r2, #1
 8008fe4:	4093      	lsls	r3, r2
 8008fe6:	4321      	orrs	r1, r4
 8008fe8:	1b42      	subs	r2, r0, r5
 8008fea:	e78a      	b.n	8008f02 <__ieee754_sqrt+0x66>
 8008fec:	4610      	mov	r0, r2
 8008fee:	e7f0      	b.n	8008fd2 <__ieee754_sqrt+0x136>
 8008ff0:	0049      	lsls	r1, r1, #1
 8008ff2:	3201      	adds	r2, #1
 8008ff4:	e7ef      	b.n	8008fd6 <__ieee754_sqrt+0x13a>
 8008ff6:	4680      	mov	r8, r0
 8008ff8:	e7bd      	b.n	8008f76 <__ieee754_sqrt+0xda>
 8008ffa:	bf00      	nop
 8008ffc:	7ff00000 	.word	0x7ff00000

08009000 <with_errno>:
 8009000:	b570      	push	{r4, r5, r6, lr}
 8009002:	4604      	mov	r4, r0
 8009004:	460d      	mov	r5, r1
 8009006:	4616      	mov	r6, r2
 8009008:	f7fc f9f2 	bl	80053f0 <__errno>
 800900c:	4629      	mov	r1, r5
 800900e:	6006      	str	r6, [r0, #0]
 8009010:	4620      	mov	r0, r4
 8009012:	bd70      	pop	{r4, r5, r6, pc}

08009014 <xflow>:
 8009014:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009016:	4614      	mov	r4, r2
 8009018:	461d      	mov	r5, r3
 800901a:	b108      	cbz	r0, 8009020 <xflow+0xc>
 800901c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009020:	e9cd 2300 	strd	r2, r3, [sp]
 8009024:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009028:	4620      	mov	r0, r4
 800902a:	4629      	mov	r1, r5
 800902c:	f7f7 fae4 	bl	80005f8 <__aeabi_dmul>
 8009030:	2222      	movs	r2, #34	; 0x22
 8009032:	b003      	add	sp, #12
 8009034:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009038:	f7ff bfe2 	b.w	8009000 <with_errno>

0800903c <__math_uflow>:
 800903c:	b508      	push	{r3, lr}
 800903e:	2200      	movs	r2, #0
 8009040:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009044:	f7ff ffe6 	bl	8009014 <xflow>
 8009048:	ec41 0b10 	vmov	d0, r0, r1
 800904c:	bd08      	pop	{r3, pc}

0800904e <__math_oflow>:
 800904e:	b508      	push	{r3, lr}
 8009050:	2200      	movs	r2, #0
 8009052:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009056:	f7ff ffdd 	bl	8009014 <xflow>
 800905a:	ec41 0b10 	vmov	d0, r0, r1
 800905e:	bd08      	pop	{r3, pc}

08009060 <fabs>:
 8009060:	ec51 0b10 	vmov	r0, r1, d0
 8009064:	ee10 2a10 	vmov	r2, s0
 8009068:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800906c:	ec43 2b10 	vmov	d0, r2, r3
 8009070:	4770      	bx	lr

08009072 <finite>:
 8009072:	b082      	sub	sp, #8
 8009074:	ed8d 0b00 	vstr	d0, [sp]
 8009078:	9801      	ldr	r0, [sp, #4]
 800907a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800907e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009082:	0fc0      	lsrs	r0, r0, #31
 8009084:	b002      	add	sp, #8
 8009086:	4770      	bx	lr

08009088 <scalbn>:
 8009088:	b570      	push	{r4, r5, r6, lr}
 800908a:	ec55 4b10 	vmov	r4, r5, d0
 800908e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009092:	4606      	mov	r6, r0
 8009094:	462b      	mov	r3, r5
 8009096:	b99a      	cbnz	r2, 80090c0 <scalbn+0x38>
 8009098:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800909c:	4323      	orrs	r3, r4
 800909e:	d036      	beq.n	800910e <scalbn+0x86>
 80090a0:	4b39      	ldr	r3, [pc, #228]	; (8009188 <scalbn+0x100>)
 80090a2:	4629      	mov	r1, r5
 80090a4:	ee10 0a10 	vmov	r0, s0
 80090a8:	2200      	movs	r2, #0
 80090aa:	f7f7 faa5 	bl	80005f8 <__aeabi_dmul>
 80090ae:	4b37      	ldr	r3, [pc, #220]	; (800918c <scalbn+0x104>)
 80090b0:	429e      	cmp	r6, r3
 80090b2:	4604      	mov	r4, r0
 80090b4:	460d      	mov	r5, r1
 80090b6:	da10      	bge.n	80090da <scalbn+0x52>
 80090b8:	a32b      	add	r3, pc, #172	; (adr r3, 8009168 <scalbn+0xe0>)
 80090ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090be:	e03a      	b.n	8009136 <scalbn+0xae>
 80090c0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80090c4:	428a      	cmp	r2, r1
 80090c6:	d10c      	bne.n	80090e2 <scalbn+0x5a>
 80090c8:	ee10 2a10 	vmov	r2, s0
 80090cc:	4620      	mov	r0, r4
 80090ce:	4629      	mov	r1, r5
 80090d0:	f7f7 f8dc 	bl	800028c <__adddf3>
 80090d4:	4604      	mov	r4, r0
 80090d6:	460d      	mov	r5, r1
 80090d8:	e019      	b.n	800910e <scalbn+0x86>
 80090da:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80090de:	460b      	mov	r3, r1
 80090e0:	3a36      	subs	r2, #54	; 0x36
 80090e2:	4432      	add	r2, r6
 80090e4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80090e8:	428a      	cmp	r2, r1
 80090ea:	dd08      	ble.n	80090fe <scalbn+0x76>
 80090ec:	2d00      	cmp	r5, #0
 80090ee:	a120      	add	r1, pc, #128	; (adr r1, 8009170 <scalbn+0xe8>)
 80090f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090f4:	da1c      	bge.n	8009130 <scalbn+0xa8>
 80090f6:	a120      	add	r1, pc, #128	; (adr r1, 8009178 <scalbn+0xf0>)
 80090f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80090fc:	e018      	b.n	8009130 <scalbn+0xa8>
 80090fe:	2a00      	cmp	r2, #0
 8009100:	dd08      	ble.n	8009114 <scalbn+0x8c>
 8009102:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009106:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800910a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800910e:	ec45 4b10 	vmov	d0, r4, r5
 8009112:	bd70      	pop	{r4, r5, r6, pc}
 8009114:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009118:	da19      	bge.n	800914e <scalbn+0xc6>
 800911a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800911e:	429e      	cmp	r6, r3
 8009120:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009124:	dd0a      	ble.n	800913c <scalbn+0xb4>
 8009126:	a112      	add	r1, pc, #72	; (adr r1, 8009170 <scalbn+0xe8>)
 8009128:	e9d1 0100 	ldrd	r0, r1, [r1]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d1e2      	bne.n	80090f6 <scalbn+0x6e>
 8009130:	a30f      	add	r3, pc, #60	; (adr r3, 8009170 <scalbn+0xe8>)
 8009132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009136:	f7f7 fa5f 	bl	80005f8 <__aeabi_dmul>
 800913a:	e7cb      	b.n	80090d4 <scalbn+0x4c>
 800913c:	a10a      	add	r1, pc, #40	; (adr r1, 8009168 <scalbn+0xe0>)
 800913e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d0b8      	beq.n	80090b8 <scalbn+0x30>
 8009146:	a10e      	add	r1, pc, #56	; (adr r1, 8009180 <scalbn+0xf8>)
 8009148:	e9d1 0100 	ldrd	r0, r1, [r1]
 800914c:	e7b4      	b.n	80090b8 <scalbn+0x30>
 800914e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009152:	3236      	adds	r2, #54	; 0x36
 8009154:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009158:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800915c:	4620      	mov	r0, r4
 800915e:	4b0c      	ldr	r3, [pc, #48]	; (8009190 <scalbn+0x108>)
 8009160:	2200      	movs	r2, #0
 8009162:	e7e8      	b.n	8009136 <scalbn+0xae>
 8009164:	f3af 8000 	nop.w
 8009168:	c2f8f359 	.word	0xc2f8f359
 800916c:	01a56e1f 	.word	0x01a56e1f
 8009170:	8800759c 	.word	0x8800759c
 8009174:	7e37e43c 	.word	0x7e37e43c
 8009178:	8800759c 	.word	0x8800759c
 800917c:	fe37e43c 	.word	0xfe37e43c
 8009180:	c2f8f359 	.word	0xc2f8f359
 8009184:	81a56e1f 	.word	0x81a56e1f
 8009188:	43500000 	.word	0x43500000
 800918c:	ffff3cb0 	.word	0xffff3cb0
 8009190:	3c900000 	.word	0x3c900000

08009194 <_init>:
 8009194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009196:	bf00      	nop
 8009198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800919a:	bc08      	pop	{r3}
 800919c:	469e      	mov	lr, r3
 800919e:	4770      	bx	lr

080091a0 <_fini>:
 80091a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091a2:	bf00      	nop
 80091a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091a6:	bc08      	pop	{r3}
 80091a8:	469e      	mov	lr, r3
 80091aa:	4770      	bx	lr
